<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于新闻事件Bert序列建模的行业涨跌预测</title>
    <link href="/2022/07/08/AI%E9%A2%84%E6%B5%8B%E8%82%A1%E7%A5%A8%E4%B9%8B%E6%96%B0%E9%97%BB%E4%BA%8B%E4%BB%B6%E6%95%B0%E6%8D%AE/"/>
    <url>/2022/07/08/AI%E9%A2%84%E6%B5%8B%E8%82%A1%E7%A5%A8%E4%B9%8B%E6%96%B0%E9%97%BB%E4%BA%8B%E4%BB%B6%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>俗话说”女怕嫁错郎，男怕入错行”，选择往往比努力更重要，在股票市场也不例外，一个好的标的往往能让我们瞬间躺赢，而一旦踩雷则万劫不复。金融市场从长期来看均是受经济增长因素驱动，短期走势则是受资金的流动影响，而新闻事件和各种消息对市场价格的影响非常快速，影响交易情绪。今天我们利用先进的深度学习技术单独分析新闻事件序列对行业指数的短期影响，和读者一起探讨利用AI做行业选股的可行性。</p></blockquote><h2 id="行业板块数据处理"><a href="#行业板块数据处理" class="headerlink" title="行业板块数据处理"></a>行业板块数据处理</h2><p>读取数据库中的行业板块日线数据，包含3类：</p><ul><li>大盘指数：上证指数、上证50、沪深300、中证500等</li><li>CSRC1行业分类：如CSRC1采矿业、CSRC1建筑业等</li><li>CSRC2行业分类：如CSRC2农副食品加工业、CSRC2开采辅助活动等</li></ul><p>上述行业板块数据合计108个，然后提取相关的指标：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取数据库中的数据</span><br>sector_data = client2.execute(<span class="hljs-string">&quot;select code, trade_day, sector_name, sector_type, open, close, high, low, volume, amount from xtquant.sector_1d&quot;</span>)<br><span class="hljs-comment"># 转换成DataFrame</span><br>sector_df = pd.DataFrame(sector_data, columns=[<span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;sector_name&#x27;</span>, <span class="hljs-string">&#x27;sector_type&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>])<br>sector_df = sector_df.drop_duplicates(subset=[<span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>])<br><br><span class="hljs-comment"># 每个指数分别处理</span><br>sector_feature_grouped = sector_df.sort_values(by=[<span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>]).set_index(<span class="hljs-string">&#x27;trade_day&#x27;</span>).groupby([<span class="hljs-string">&#x27;code&#x27;</span>])<br><br><span class="hljs-comment"># 日内： 开盘相对昨收的涨跌百分比(开盘9:15时间截断)</span><br>sector_feature_intraday_open_close = sector_feature_grouped.apply(<span class="hljs-keyword">lambda</span> row: (row[<span class="hljs-string">&#x27;open&#x27;</span>] / row.shift(<span class="hljs-number">1</span>)[<span class="hljs-string">&#x27;close&#x27;</span>] - <span class="hljs-number">1</span>) * <span class="hljs-number">100</span>).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).reset_index().rename(columns=&#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;intraday_open_close&#x27;</span>&#125;).set_index([<span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>])<br><br><span class="hljs-comment"># 日间：第二天开盘相对于前一天开盘的涨跌百分比(开盘9:15时间截断)</span><br>sector_feature_daily_open_open = sector_feature_grouped.apply(<span class="hljs-keyword">lambda</span> row: (row.shift(-<span class="hljs-number">1</span>)[<span class="hljs-string">&#x27;open&#x27;</span>] / row[<span class="hljs-string">&#x27;open&#x27;</span>] - <span class="hljs-number">1</span>) * <span class="hljs-number">100</span>).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).reset_index().rename(columns=&#123;<span class="hljs-string">&#x27;open&#x27;</span>: <span class="hljs-string">&#x27;daily_open_open&#x27;</span>&#125;).set_index([<span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>])<br><br></code></pre></td></tr></table></figure><p>指标共10个，基准分为当天和第二天：</p><ul><li>intraday_open_close：开盘相对昨收的涨跌百分比</li><li>intraday_close_close：收盘相对昨收的涨跌百分比</li><li>intraday_avg_close：平均相对于昨收的涨跌百分比</li><li>intraday_close_open：收盘相对开盘的涨跌百分比</li><li>intraday_avg_open：平均相对于开盘的涨跌百分比</li><li>daily_open_open：第二天开盘相对于前一天开盘的涨跌百分比</li><li>daily_close_open：第二天收盘相对于前一天开盘的涨跌百分比</li><li>daily_avg_open：第二天平均相对于前一天开盘的涨跌百分比</li><li>daily_open_avg：第二天开盘相对于前一天平均价格的涨跌百分比</li><li>daily_avg_avg：第二天平均相对于前一天平均的涨跌百分比</li></ul><p>其中当天的指标主要优化模型的拟合能力，即过去发生的事对当前的影响，而第二天指标优化模型的预测能力，即过去发生的事对未来的影响。这里重点关注第二天指标，因为A股为T+1交易，这关系到能否利用已发生的事件赚取未来的收益。</p><p>数据样例如下, 时间戳为索引，列共<code>108*10 = 1080</code>个：</p><p><img src="/img/label_data.png"></p><h2 id="新闻数据采集和Bert微调"><a href="#新闻数据采集和Bert微调" class="headerlink" title="新闻数据采集和Bert微调"></a>新闻数据采集和Bert微调</h2><p>这里主要使用了两个数据集：财联社快讯和华盛通快讯的爬虫数据，时间维度从2016年至今，进行清洗后，按照时间排序。数据如下表所示：</p><table><thead><tr><th align="right">timestamp</th><th align="left">content</th></tr></thead><tbody><tr><td align="right">1460337101</td><td align="left">一季度新能源乘用车销量3.95万 同比翻番</td></tr><tr><td align="right">1515081541</td><td align="left">英国商务大臣克拉克：努力深化与欧盟27国的贸易联系。</td></tr><tr><td align="right">1535487757</td><td align="left">据外媒：美国参议院确定克拉里达成为美联储的副主席。</td></tr><tr><td align="right">1611292392</td><td align="left">吉林通化第二轮检测已检31.6万人 51例阳性</td></tr><tr><td align="right">1617094987</td><td align="left">洪汇新材：上调氯乙烯-醋酸乙烯共聚树脂二元系列产品的国内销售报价</td></tr><tr><td align="right">1617662023</td><td align="left">公募“大年”FOF大丰收 规模业绩实现双增长</td></tr><tr><td align="right">1628664753</td><td align="left">中兴通讯AH股走低，目前均跌近8%；其他电讯设备股中，国微控股跌超6%，京信通信跌1.5%。</td></tr><tr><td align="right">1629450813</td><td align="left">香港交易所计划推出全新MSCI中国A50互联互通指数期货合约。（港交所）</td></tr><tr><td align="right">1632368553</td><td align="left">韩媒：韩国预计在中秋假日后新冠感染病例将上升</td></tr><tr><td align="right">1633867053</td><td align="left">中工国际：前三季净利预增63.52%-86.88%</td></tr></tbody></table><p>由于BERT模型使用的数据与这里的数据有较大差异，因此可以使用掩码语言模型(MLM)进行进一步的微调，<a href="https://github.com/UKPLab/sentence-transformers/blob/master/examples/unsupervised_learning/MLM/train_mlm.py">sentence-bert</a>提供了一个训练脚本，这里可直接拿来使用，只需使用content行的文本即可，每行一个新闻，划分好开发集和测试集，便可进行微调改进。</p><h2 id="涨跌预测回归模型构建"><a href="#涨跌预测回归模型构建" class="headerlink" title="涨跌预测回归模型构建"></a>涨跌预测回归模型构建</h2><p>首先导入相关的包，定义相关的路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置使用的显卡</span><br><span class="hljs-keyword">import</span> os<br>os.environ[<span class="hljs-string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="hljs-string">&quot;0&quot;</span><br><br><span class="hljs-comment"># pytorch 程序包</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F <br><span class="hljs-keyword">import</span> torch.optim <span class="hljs-keyword">as</span> optim<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset, DataLoader<br><br><span class="hljs-comment"># transformers预训练模型包</span><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertModel, BertTokenizer, BertConfig<br><span class="hljs-comment"># 长序列建模包</span><br><span class="hljs-keyword">from</span> flash_pytorch <span class="hljs-keyword">import</span> FLASH<br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> datetime, json, random<br><span class="hljs-keyword">from</span> sklearn.utils <span class="hljs-keyword">import</span> shuffle<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> tensorboardX <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-comment"># 农历日期组件</span><br><span class="hljs-keyword">from</span> lunardate <span class="hljs-keyword">import</span> LunarDate<br><br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br><br><span class="hljs-comment"># 项目路径</span><br>base_dir = <span class="hljs-string">&#x27;path_to_your_bert&#x27;</span><br><span class="hljs-comment"># 模型存储路径</span><br>model_dir = base_dir + <span class="hljs-string">&#x27;model/&#x27;</span><br><span class="hljs-comment"># 预训练孟子模型</span><br>bert_dir = model_dir + <span class="hljs-string">&#x27;mengzi-bert-base-mlm/&#x27;</span><br><span class="hljs-comment"># 输入数据集</span><br>input_dir = base_dir + <span class="hljs-string">&#x27;input/&#x27;</span><br><span class="hljs-comment"># tensorboard日志路径</span><br>log_dir =  base_dir + <span class="hljs-string">&#x27;log/&#x27;</span><br><br></code></pre></td></tr></table></figure><h3 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h3><p>构造数据的主要思路是取当天交易日的9:15前的4096条新闻文本，经过Bert分词编码后，对对应的时间特征一起用来训练，标签及其未缺失的掩码用来优化指导AI模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewsDataset</span>(<span class="hljs-params">Dataset</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, seq_len=<span class="hljs-number">4096</span>, txt_len=<span class="hljs-number">64</span>, label_df=<span class="hljs-literal">None</span>, mask_df=<span class="hljs-literal">None</span>, news_df=<span class="hljs-literal">None</span>, tokenizer=<span class="hljs-literal">None</span></span>):</span><br>        self.label_df = label_df<br>        self.mask_df = mask_df<br>        self.news_df = news_df<br>        self.tokenizer = tokenizer<br>        self.seq_len = seq_len<br>        self.txt_len = txt_len <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.label_df)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_news_time</span>(<span class="hljs-params">self, x, base</span>):</span><br>        interval = <span class="hljs-built_in">int</span>(np.clip(np.log1p(base - x), <span class="hljs-number">0</span>, <span class="hljs-number">20</span>))<br>        ts = datetime.datetime.fromtimestamp(x)<br>        month = ts.month<br>        day = ts.day<br>        weekday = ts.weekday()<br>        luna_date = LunarDate.fromSolarDate(ts.year, month, day)<br>        luna_month = luna_date.month<br>        luna_day = luna_date.day<br>        <span class="hljs-keyword">return</span> [month, day, weekday, interval, luna_month, luna_day]<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getitem__</span>(<span class="hljs-params">self, idx</span>):</span><br>        ts = self.label_df.iloc[idx]<br>        label = torch.tensor(ts.tolist(), dtype=torch.float32).reshape((<span class="hljs-number">108</span>, <span class="hljs-number">10</span>))<br>        mask = torch.tensor(self.mask_df.iloc[idx].astype(<span class="hljs-built_in">int</span>).tolist(), dtype=torch.<span class="hljs-built_in">bool</span>)<br>        news = news_df[news_df.timestamp&lt;=ts.name].iloc[-(self.seq_len + <span class="hljs-number">1024</span>):].sort_values(by=[<span class="hljs-string">&#x27;timestamp&#x27;</span>], ascending=<span class="hljs-literal">False</span>)<br>        news = pd.concat([news.iloc[:<span class="hljs-number">1024</span>], news.iloc[<span class="hljs-number">1024</span>:].sample(self.seq_len - <span class="hljs-number">1024</span>).sort_values(by=[<span class="hljs-string">&#x27;timestamp&#x27;</span>], ascending=<span class="hljs-literal">False</span>)], axis=<span class="hljs-number">0</span>)<br>        input_ids = tokenizer(news[<span class="hljs-string">&#x27;content&#x27;</span>].tolist(), max_length=self.txt_len, truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)[<span class="hljs-string">&#x27;input_ids&#x27;</span>]<br>        input_times = news[<span class="hljs-string">&quot;timestamp&quot;</span>].apply(<span class="hljs-keyword">lambda</span> x: self.parse_news_time(x, ts.name)).tolist()<br>        input_times = torch.tensor(input_times, dtype=torch.long)<br>        <br>        <span class="hljs-keyword">return</span> label, mask, input_ids, input_times<br>    <br></code></pre></td></tr></table></figure><h3 id="时间特征编码"><a href="#时间特征编码" class="headerlink" title="时间特征编码"></a>时间特征编码</h3><p>这里对时间6个特征进行编码，然后合并到一起，组成和文本编码相同的维度(BERT的最后输出为768)，作为Transformer模型的位置编码特征。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeEncoder</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, dim=<span class="hljs-number">768</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.month_emb = nn.Embedding(<span class="hljs-number">13</span>, dim // <span class="hljs-number">8</span>)<br>        self.day_emb = nn.Embedding(<span class="hljs-number">32</span>, dim // <span class="hljs-number">8</span> )<br>        self.lunar_month_emb = nn.Embedding(<span class="hljs-number">13</span>, dim // <span class="hljs-number">8</span>)<br>        self.lunar_day_emb = nn.Embedding(<span class="hljs-number">32</span>, dim // <span class="hljs-number">8</span> )<br>        self.weekday_emb = nn.Embedding(<span class="hljs-number">8</span>, dim // <span class="hljs-number">4</span>)<br>        self.interval_emb = nn.Embedding(<span class="hljs-number">20</span>, dim // <span class="hljs-number">4</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, times</span>):</span><br>        month_emb = self.month_emb(times[:, <span class="hljs-number">0</span>])<br>        day_emb = self.day_emb(times[:, <span class="hljs-number">1</span>])<br>        weekday_emb = self.weekday_emb(times[:, <span class="hljs-number">2</span>])<br>        interval_emb = self.interval_emb(times[:, <span class="hljs-number">3</span>])<br>        lunar_month_emb = self.lunar_month_emb(times[:, <span class="hljs-number">4</span>])<br>        lunar_day_emb = self.lunar_day_emb(times[:, <span class="hljs-number">5</span>])<br>        time_embedding = torch.cat([month_emb, day_emb, weekday_emb, interval_emb, lunar_month_emb, lunar_day_emb], dim=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> time_embedding<br></code></pre></td></tr></table></figure><h3 id="新闻BERT编码"><a href="#新闻BERT编码" class="headerlink" title="新闻BERT编码"></a>新闻BERT编码</h3><p>这里使用了澜舟科技开源的<a href="https://github.com/Langboat/Mengzi">孟子预训练模型</a>对单个新闻文本进行编码，并使用了<code>MLM</code>任务进行了进一步的微调。最终可以得到一个<code>Batch  * Seq_len * Dim</code> 的文本向量表示。需要注意的是，我们对孟子模型的最后三层设置了可再训练，会消耗较大显存，如果资源不足，可设置不再优化。对于多个新闻序列，我们这里使用了<a href="https://github.com/lucidrains/FLASH-pytorch">Flash-Transformer</a>，一个长序列建模工具，最终得到新闻序列的向量表示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewsEncoder</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, depth=<span class="hljs-number">3</span>, dim=<span class="hljs-number">768</span>, seq_len=<span class="hljs-number">4096</span>, txt_len=<span class="hljs-number">64</span>, group_size=<span class="hljs-number">256</span>, query_key_dim=<span class="hljs-number">128</span>, attn_dropout=<span class="hljs-number">0.2</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.dim = dim<br>        self.seq_len = seq_len<br>        self.txt_len = txt_len<br>        <span class="hljs-keyword">if</span> os.path.exists(bert_dir):<br>            self.bert_encoder = BertModel.from_pretrained(bert_dir)<br>        <span class="hljs-keyword">else</span>:<br>            self.bert_encoder = BertModel(BertConfig.from_json_file(model_dir + <span class="hljs-string">&#x27;bert_config.json&#x27;</span>)) <br>        <span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> self.bert_encoder.named_parameters():<br>            param.requires_grad = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;layer.10&#x27;</span>, <span class="hljs-string">&#x27;layer.11&#x27;</span>, <span class="hljs-string">&#x27;pooler.dense&#x27;</span>]:<br>                <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> name:<br>                    param.requires_grad = <span class="hljs-literal">True</span><br>        self.time_encoder = TimeEncoder(dim=<span class="hljs-number">768</span>)<br>        self.transformer_layers = nn.ModuleList([FLASH(dim=dim, group_size = group_size, query_key_dim = query_key_dim, causal=<span class="hljs-literal">False</span>, dropout = attn_dropout) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(depth)])<br>        self.norm = nn.LayerNorm(dim)<br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, input_ids, input_times</span>):</span><br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        input_ids: [Batch * seq_len * txt_len]</span><br><span class="hljs-string">        input_times: [Batch * seq_len * time_len]</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        input_ids = input_ids.reshape((-<span class="hljs-number">1</span>, input_ids.shape[-<span class="hljs-number">1</span>])) <span class="hljs-comment"># (Batch * seq_len) * txt_len</span><br>        input_times = input_times.reshape((-<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)) <span class="hljs-comment"># (Batch * seq_len) * 6</span><br>        <br>        attention_mask = input_ids.ne(<span class="hljs-number">0</span>).long().to(input_ids)<br>        <br>        bert_output = self.bert_encoder(input_ids,  attention_mask=attention_mask)  <span class="hljs-comment"># (Batch * seq_len) * txt_len * dim</span><br>        time_output = self.time_encoder(input_times) <span class="hljs-comment"># (Batch * seq_len) * dim</span><br>        news_feature = time_output + bert_output.pooler_output <span class="hljs-comment"># (Batch * seq_len)  * dim</span><br>        news_feature = news_feature.reshape((-<span class="hljs-number">1</span>, self.seq_len, self.dim)) <span class="hljs-comment"># Batch  * seq_len * dim</span><br>        <br>        <span class="hljs-keyword">for</span> flash <span class="hljs-keyword">in</span> self.transformer_layers:<br>            news_feature = flash(news_feature)<br>        output = self.norm(news_feature) <span class="hljs-comment"># Batch  * seq_len * dim</span><br>        <br>        <span class="hljs-keyword">return</span> output<br>   <br></code></pre></td></tr></table></figure><h3 id="指标预测"><a href="#指标预测" class="headerlink" title="指标预测"></a>指标预测</h3><p>由于将一段时间内多个新闻汇集到一起进行预测，因此需要将上述新闻向量表示进行进一步地加工，首先进行平均池化操作，然后对接一个分类器，形成<code>Batch  * 108 * 10</code>维度的预测值，即代表着108个板块中，10个指标的预测情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndustryPredictor</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, depth=<span class="hljs-number">2</span>, dim=<span class="hljs-number">768</span>, seq_len=<span class="hljs-number">4096</span>, class_num=<span class="hljs-number">10</span></span>):</span><br>        <span class="hljs-built_in">super</span>(IndustryPredictor, self).__init__()<br>        self.news_encoder = NewsEncoder(depth=depth, dim=dim, seq_len=seq_len)<br>        self.avg_pooling = nn.AdaptiveAvgPool1d(<span class="hljs-number">108</span>)<br>        self.classifier = nn.Linear(in_features=dim, out_features=class_num)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, input_ids, input_times</span>):</span><br>        news_feature = self.news_encoder(input_ids, input_times) <br>        output = self.avg_pooling(news_feature.transpose(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>).contiguous()).transpose(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>).contiguous() <span class="hljs-comment"># Batch  * 108 * 768</span><br>        output = self.classifier(output)  <span class="hljs-comment"># Batch  * 108 * 10</span><br>        <span class="hljs-keyword">return</span> output<br><br></code></pre></td></tr></table></figure><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>虽然我们可以直接用MSE均方误差损失函数对预测结果进行梯度优化，但考虑到部分指标并不是一直存在的，例如科创50指数早期并不存在，也就没有group truth，会造成指标的不一致，因此，这里我们使用掩码的方式将标签和对应的预测值遮蔽，避免造成干扰。这里也同时计算了pearson相关系数指标，在验证的时候可以直观地看到预测值和真实值的相关程度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calc_loss</span>(<span class="hljs-params">y_true, y_pred, mask</span>):</span><br>    mask2 = mask.squeeze(<span class="hljs-number">0</span>).reshape((<span class="hljs-number">108</span>, <span class="hljs-number">1</span>)).repeat(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>).unsqueeze(<span class="hljs-number">0</span>)<br>    y_true = torch.masked_select(y_true.unsqueeze(<span class="hljs-number">0</span>), mask2).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br>    y_pred = torch.masked_select(y_pred.unsqueeze(<span class="hljs-number">0</span>), mask2).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br>    y_true_label = y_true - y_true.mean(dim=<span class="hljs-number">0</span>, keepdim=<span class="hljs-literal">True</span>)<br>    y_pred_label =  y_pred - y_pred.mean(dim=<span class="hljs-number">0</span>, keepdim=<span class="hljs-literal">True</span>)<br>    loss = F.mse_loss(y_pred, y_true)<br>    pearson = torch.cosine_similarity(y_true_label ,y_pred_label, dim=<span class="hljs-number">0</span>, eps=<span class="hljs-number">1e-6</span>)<br>    <span class="hljs-keyword">return</span> loss, pearson<br></code></pre></td></tr></table></figure><h3 id="主训练过程"><a href="#主训练过程" class="headerlink" title="主训练过程"></a>主训练过程</h3><p><code>FLASH-Transformer</code>深度为3， 序列长度为4096，使用AdamW优化器，学习率为0.00005</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">writer = SummaryWriter(log_dir + <span class="hljs-string">&#x27;/tensorbord/&#x27;</span>) <br>model = IndustryPredictor(depth=<span class="hljs-number">3</span>, dim=<span class="hljs-number">768</span>, seq_len=<span class="hljs-number">4096</span>)<br>model = model.to(device)<br>opt = optim.AdamW(model.parameters(), lr=<span class="hljs-number">5e-5</span>)<br>step = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    train_dataloader = DataLoader(train_dataset, batch_size=<span class="hljs-number">1</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">4</span>)<br>    model.train()<br>    <span class="hljs-keyword">for</span> ind, batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_dataloader):<br>        label, mask, input_ids, input_times = batch<br>        logit = model(input_ids.to(device), input_times.to(device))<br>        loss, pearson = calc_loss(label.to(device), logit, mask.to(device))<br>              <br>        writer.add_scalars(<span class="hljs-string">&#x27;train&#x27;</span>, &#123;<span class="hljs-string">&#x27;loss&#x27;</span>:loss.item()&#125;, step)<br>        <br>        loss.backward()<br>        opt.step()<br>        opt.zero_grad()<br>        <br>        step += <span class="hljs-number">1</span><br>    torch.save(model.state_dict(), model_dir + <span class="hljs-string">&quot;/news_model/IndustryPredictor_%d.torch&quot;</span> % epoch)<br></code></pre></td></tr></table></figure><h2 id="分析预测结果"><a href="#分析预测结果" class="headerlink" title="分析预测结果"></a>分析预测结果</h2><h3 id="查看训练过程的损失函数变化曲线"><a href="#查看训练过程的损失函数变化曲线" class="headerlink" title="查看训练过程的损失函数变化曲线"></a>查看训练过程的损失函数变化曲线</h3><p><img src="/img/loss.png"></p><p>从图中可以看出,训练过程中的损失函数曲线十分曲折，就是使用0.99的阈值平滑，噪声也很大。因此，这并不是一个容易学习的任务，预测的结果具有很高的随机性。</p><h3 id="查看验证集上的预测值和实际值的相关性系数"><a href="#查看验证集上的预测值和实际值的相关性系数" class="headerlink" title="查看验证集上的预测值和实际值的相关性系数"></a>查看验证集上的预测值和实际值的相关性系数</h3><p>我们在验证集上对108个板块，10个单项指标，合计1080个总指标的预测值与真实值之间的相关系数(<code>sector_corr_df[&quot;corr&quot;].describe()</code>)进行统计,可发现尽管总体上相关程度不高，但也有一些较高的单项。</p><table><thead><tr><th align="left"></th><th align="right">corr</th></tr></thead><tbody><tr><td align="left">count</td><td align="right">1080</td></tr><tr><td align="left">mean</td><td align="right">-0.030514</td></tr><tr><td align="left">std</td><td align="right">0.274666</td></tr><tr><td align="left">min</td><td align="right">-0.649692</td></tr><tr><td align="left">25%</td><td align="right">-0.221297</td></tr><tr><td align="left">50%</td><td align="right">-0.0553582</td></tr><tr><td align="left">75%</td><td align="right">0.136897</td></tr><tr><td align="left">max</td><td align="right">0.864099</td></tr></tbody></table><p>我们详细看看那些预测较高(<code>sector_corr_df[sector_corr_df[&quot;corr&quot;] &gt; 0.6]</code>))的指标：</p><table><thead><tr><th align="left">sector</th><th align="left">indicator</th><th align="right">corr</th></tr></thead><tbody><tr><td align="left">CSRC2农副食品加工业</td><td align="left">intraday_open_close</td><td align="right">0.780031</td></tr><tr><td align="left">CSRC2食品制造业</td><td align="left">intraday_open_close</td><td align="right">0.84407</td></tr><tr><td align="left">CSRC2酒、饮料和精制茶制造业</td><td align="left">intraday_open_close</td><td align="right">0.731186</td></tr><tr><td align="left">CSRC2皮革、毛皮、羽毛及其制品和制鞋业</td><td align="left">intraday_open_close</td><td align="right">0.635645</td></tr><tr><td align="left">CSRC2木材加工及木、竹、藤、棕、草制品业</td><td align="left">intraday_open_close</td><td align="right">0.694802</td></tr><tr><td align="left">CSRC2家具制造业</td><td align="left">intraday_open_close</td><td align="right">0.825688</td></tr><tr><td align="left">CSRC2造纸及纸制品业</td><td align="left">intraday_open_close</td><td align="right">0.755133</td></tr><tr><td align="left">CSRC2橡胶和塑料制品业</td><td align="left">intraday_open_close</td><td align="right">0.636808</td></tr><tr><td align="left">CSRC2金属制品业</td><td align="left">intraday_open_close</td><td align="right">0.838386</td></tr><tr><td align="left">CSRC2通用设备制造业</td><td align="left">intraday_open_close</td><td align="right">0.811593</td></tr><tr><td align="left">CSRC2专用设备制造业</td><td align="left">intraday_open_close</td><td align="right">0.828883</td></tr><tr><td align="left">CSRC2汽车制造业</td><td align="left">intraday_open_close</td><td align="right">0.728715</td></tr><tr><td align="left">CSRC2计算机、通信和其他电子设备制造业</td><td align="left">intraday_open_close</td><td align="right">0.681775</td></tr><tr><td align="left">CSRC2仪器仪表制造业</td><td align="left">intraday_open_close</td><td align="right">0.76271</td></tr><tr><td align="left">CSRC2仪器仪表制造业</td><td align="left">intraday_avg_close</td><td align="right">0.600887</td></tr><tr><td align="left">CSRC2废弃资源综合利用业</td><td align="left">intraday_open_close</td><td align="right">0.617559</td></tr><tr><td align="left">CSRC2电力、热力生产和供应业</td><td align="left">intraday_open_close</td><td align="right">0.679018</td></tr><tr><td align="left">CSRC2燃气生产和供应业</td><td align="left">intraday_open_close</td><td align="right">0.708935</td></tr><tr><td align="left">CSRC2土木工程建筑业</td><td align="left">intraday_open_close</td><td align="right">0.666156</td></tr><tr><td align="left">CSRC2建筑装饰和其他建筑业</td><td align="left">intraday_open_close</td><td align="right">0.864099</td></tr><tr><td align="left">CSRC2建筑装饰和其他建筑业</td><td align="left">intraday_avg_close</td><td align="right">0.709512</td></tr><tr><td align="left">CSRC2批发业</td><td align="left">intraday_open_close</td><td align="right">0.605899</td></tr><tr><td align="left">CSRC2批发业</td><td align="left">intraday_avg_close</td><td align="right">0.612417</td></tr><tr><td align="left">CSRC2电信、广播电视和卫星传输服务</td><td align="left">intraday_open_close</td><td align="right">0.649785</td></tr><tr><td align="left">CSRC2互联网和相关服务</td><td align="left">intraday_open_close</td><td align="right">0.683816</td></tr></tbody></table><p>可发现日内相关指标的系数较高，而日间较低，这与预期相符，毕竟第二天不可控的因素更多。</p><h3 id="具体日期预测结果分析"><a href="#具体日期预测结果分析" class="headerlink" title="具体日期预测结果分析"></a>具体日期预测结果分析</h3><p>我们以<code>2022-07-01</code>日的预测结果回看准确性。将预测的结果倒序，排除日内指标，可看出推荐的Top5隔天平均收益达到1个百分点，整体还是可观的。</p><table><thead><tr><th align="left">trade_date</th><th align="left">sector</th><th align="left">metric</th><th align="right">actual</th><th align="right">prediction</th></tr></thead><tbody><tr><td align="left">2022-07-01</td><td align="left">CSRC2铁路运输业</td><td align="left">daily_close_open</td><td align="right">-1.282</td><td align="right">0.921</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2林业</td><td align="left">daily_close_open</td><td align="right">2.471</td><td align="right">0.899</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2有色金属矿采选业</td><td align="left">daily_close_open</td><td align="right">3.187</td><td align="right">0.895</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2零售业</td><td align="left">daily_close_open</td><td align="right">-0.882</td><td align="right">0.886</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2农业</td><td align="left">daily_close_open</td><td align="right">1.727</td><td align="right">0.875</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2黑色金属矿采选业</td><td align="left">daily_close_open</td><td align="right">3.532</td><td align="right">0.871</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2化学原料及化学制品制造业</td><td align="left">daily_close_open</td><td align="right">1.628</td><td align="right">0.867</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2电气机械及器材制造业</td><td align="left">daily_close_open</td><td align="right">0.953</td><td align="right">0.861</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2有色金属冶炼及压延加工业</td><td align="left">daily_close_open</td><td align="right">1.94</td><td align="right">0.85</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2畜牧业</td><td align="left">daily_close_open</td><td align="right">9.056</td><td align="right">0.84</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2水上运输业</td><td align="left">daily_close_open</td><td align="right">-0.427</td><td align="right">0.835</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2金属制品业</td><td align="left">daily_close_open</td><td align="right">1.102</td><td align="right">0.811</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2航空运输业</td><td align="left">daily_close_open</td><td align="right">-3.904</td><td align="right">0.801</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2医药制造业</td><td align="left">daily_close_open</td><td align="right">2.501</td><td align="right">0.8</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2石油加工、炼焦及核燃料加工业</td><td align="left">daily_close_open</td><td align="right">0.381</td><td align="right">0.797</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2铁路、船舶、航空航天和其它运输设备制造业</td><td align="left">daily_close_open</td><td align="right">0.922</td><td align="right">0.789</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2道路运输业</td><td align="left">daily_close_open</td><td align="right">-1.089</td><td align="right">0.783</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2道路运输业</td><td align="left">daily_avg_open</td><td align="right">-1.441</td><td align="right">0.783</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2通用设备制造业</td><td align="left">daily_close_open</td><td align="right">0.666</td><td align="right">0.782</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2非金属矿采选业</td><td align="left">daily_close_open</td><td align="right">2.067</td><td align="right">0.778</td></tr></tbody></table><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>利用序列模型对新闻事件数据进行拟合、预测，虽然不是非常精确、整体相关性不是很明显，但在一些突发事件中，还是可以获得一些超额收益的。大家如有观点看法，欢迎后台留言讨论！</p><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。<br><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>量化交易</tag>
      
      <tag>新闻事件</tag>
      
      <tag>量化策略</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迅投QMT历史行情转存Clickhouse数据库</title>
    <link href="/2022/07/03/%E8%BF%85%E6%8A%95QMT%E5%8E%86%E5%8F%B2%E8%A1%8C%E6%83%85%E8%BD%AC%E5%AD%98Clickhouse%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2022/07/03/%E8%BF%85%E6%8A%95QMT%E5%8E%86%E5%8F%B2%E8%A1%8C%E6%83%85%E8%BD%AC%E5%AD%98Clickhouse%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>上文介绍如何获取批量股票代码并缓存对应的tick、分钟、日级别的历史数据，本节则介绍如何将读取本地的缓存数据并写入到clickhouse数据库中。历史行情数据从格式上看分为tick数据和K线数据两大类，针对这两类的数据我们分别处理。</p></blockquote><h2 id="Tick数据预处理"><a href="#Tick数据预处理" class="headerlink" title="Tick数据预处理"></a>Tick数据预处理</h2><p>首先读取本地缓存数据，这里以南航转债(<code>110075.SH</code>)为例，需要注意的是tick数据包含了集合竞价时段，成交量/额是按日累计的，因此需要做一定的转换。</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> xtquant <span class="hljs-keyword">import</span> xtdata<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_local_tick_data</span>(<span class="hljs-params">code=<span class="hljs-string">&#x27;110075.SH&#x27;</span>, start_time=<span class="hljs-string">&#x27;19700101&#x27;</span></span>):</span><br>    <span class="hljs-comment"># 获取本地数据</span><br>    df = xtdata.get_local_data(stock_code=[code], period=<span class="hljs-string">&#x27;tick&#x27;</span>, field_list=[<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;lastPrice&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;lastClose&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>, <span class="hljs-string">&#x27;askPrice&#x27;</span>, <span class="hljs-string">&#x27;bidPrice&#x27;</span>, <span class="hljs-string">&#x27;askVol&#x27;</span>, <span class="hljs-string">&#x27;bidVol&#x27;</span>], start_time=start_time, end_time=start_time)<br><br>    <span class="hljs-comment"># 转成DataFRame</span><br>    df = pd.DataFrame(df[code])<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(df) &lt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> df<br><br>    <span class="hljs-comment"># 日期处理</span><br>    df[<span class="hljs-string">&#x27;trade_time&#x27;</span>] = df[<span class="hljs-string">&#x27;time&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: datetime.datetime.fromtimestamp(x / <span class="hljs-number">1000.0</span>)) <span class="hljs-comment"># , cn_tz</span><br>    df[<span class="hljs-string">&#x27;trade_day&#x27;</span>] = df[<span class="hljs-string">&#x27;trade_time&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: x.date())<br>    df[<span class="hljs-string">&#x27;trade_minute&#x27;</span>] = df[<span class="hljs-string">&#x27;trade_time&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: x.hour * <span class="hljs-number">60</span> + x.minute)<br>    df[<span class="hljs-string">&#x27;trade_second&#x27;</span>] = df[<span class="hljs-string">&#x27;trade_time&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: x.hour * <span class="hljs-number">3600</span> + x.minute * <span class="hljs-number">60</span> + x.second)<br>    df = df[df.trade_second &lt;= <span class="hljs-number">54001</span>] <span class="hljs-comment"># 排除盘后交易</span><br>    df = df[df.trade_second &gt;= <span class="hljs-number">33840</span>] <span class="hljs-comment"># 保留最后一分钟的集合竞价数据</span><br>    df = df.reset_index(drop=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment"># 重新计算成交量、成交额</span><br>    df[<span class="hljs-string">&#x27;volume_deal&#x27;</span>] = df.groupby([<span class="hljs-string">&#x27;trade_day&#x27;</span>])[<span class="hljs-string">&#x27;volume&#x27;</span>].diff(periods=<span class="hljs-number">1</span>).fillna(<span class="hljs-number">0</span>)<br>    df[<span class="hljs-string">&#x27;amount_deal&#x27;</span>] = df.groupby([<span class="hljs-string">&#x27;trade_day&#x27;</span>])[<span class="hljs-string">&#x27;amount&#x27;</span>].diff(periods=<span class="hljs-number">1</span>).fillna(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-comment"># 重新选择列</span><br>    df[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-string">&#x27;110075.SH&#x27;</span><br>    df[<span class="hljs-string">&#x27;close&#x27;</span>] = df[<span class="hljs-string">&#x27;lastPrice&#x27;</span>] <span class="hljs-comment"># 收盘</span><br>    df[<span class="hljs-string">&#x27;last&#x27;</span>] = df[<span class="hljs-string">&#x27;lastClose&#x27;</span>] <span class="hljs-comment"># 昨收</span><br>    df = df[[<span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;trade_time&#x27;</span>, <span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;trade_minute&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;last&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>, <span class="hljs-string">&#x27;volume_deal&#x27;</span>, <span class="hljs-string">&#x27;amount_deal&#x27;</span>, <span class="hljs-string">&#x27;askPrice&#x27;</span>, <span class="hljs-string">&#x27;bidPrice&#x27;</span>, <span class="hljs-string">&#x27;askVol&#x27;</span>, <span class="hljs-string">&#x27;bidVol&#x27;</span>]]<br><br>    <span class="hljs-keyword">return</span> df<br><br>df = get_local_tick_data(code=<span class="hljs-string">&#x27;110075.SH&#x27;</span>, start_time=<span class="hljs-string">&#x27;20220630&#x27;</span>)<br><span class="hljs-built_in">print</span>(df.iloc[-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>最终，我们得到诸如下图的tick存储数据:</p><p><img src="/img/tick_data_store.png"></p><h2 id="K线数据预处理"><a href="#K线数据预处理" class="headerlink" title="K线数据预处理"></a>K线数据预处理</h2><p>读取本地缓存数据，这里以行业板块指数为例，首先获取行业指数，然后查询详情，获取元数据:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_sector_list</span>():</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    获取沪深指数、行业指数</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    sector_1 = xtdata.get_stock_list_in_sector(<span class="hljs-string">&#x27;证监会行业板块指数&#x27;</span>)<br>    sector_1 = [(i, xtdata.get_instrument_detail(i)[<span class="hljs-string">&#x27;InstrumentName&#x27;</span>], <span class="hljs-string">&#x27;证监会一级行业&#x27;</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sector_1]<br><br>    sector_2 = xtdata.get_stock_list_in_sector(<span class="hljs-string">&#x27;板块指数&#x27;</span>)<br>    sector_2 = [(i, xtdata.get_instrument_detail(i)[<span class="hljs-string">&#x27;InstrumentName&#x27;</span>], <span class="hljs-string">&#x27;证监会二级行业&#x27;</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sector_2 <span class="hljs-keyword">if</span> i.startswith(<span class="hljs-string">&#x27;23&#x27;</span>)]<br><br><br>    index_code = [(<span class="hljs-string">&#x27;000001.SH&#x27;</span>, <span class="hljs-string">&#x27;上证指数&#x27;</span>, <span class="hljs-string">&#x27;大盘指数&#x27;</span>), (<span class="hljs-string">&#x27;399001.SZ&#x27;</span>, <span class="hljs-string">&#x27;深证成指&#x27;</span>, <span class="hljs-string">&#x27;大盘指数&#x27;</span>), (<span class="hljs-string">&#x27;399006.SZ&#x27;</span>, <span class="hljs-string">&#x27;创业板指&#x27;</span>, <span class="hljs-string">&#x27;大盘指数&#x27;</span>), (<span class="hljs-string">&#x27;000688.SH&#x27;</span>, <span class="hljs-string">&#x27;科创50&#x27;</span>, <span class="hljs-string">&#x27;大盘指数&#x27;</span>), (<span class="hljs-string">&#x27;000300.SH&#x27;</span>, <span class="hljs-string">&#x27;沪深300&#x27;</span>, <span class="hljs-string">&#x27;大盘指数&#x27;</span>), (<span class="hljs-string">&#x27;000016.SH&#x27;</span>, <span class="hljs-string">&#x27;上证50&#x27;</span>, <span class="hljs-string">&#x27;大盘指数&#x27;</span>), (<span class="hljs-string">&#x27;000905.SH&#x27;</span>, <span class="hljs-string">&#x27;中证500&#x27;</span>, <span class="hljs-string">&#x27;大盘指数&#x27;</span>), (<span class="hljs-string">&#x27;000852.SH&#x27;</span>, <span class="hljs-string">&#x27;中证1000&#x27;</span>, <span class="hljs-string">&#x27;大盘指数&#x27;</span>)]<br><br>    code_list = &#123;i[<span class="hljs-number">0</span>]: i[<span class="hljs-number">1</span>:] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sector_1 + sector_2 + index_code&#125;<br><br>    <span class="hljs-keyword">return</span> code_list<br></code></pre></td></tr></table></figure><p>然后处理本地行情，这里以证监会二级行业行业中的餐饮业(<code>230130.BKZS</code>)为例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_local_kline_data</span>(<span class="hljs-params">code=<span class="hljs-string">&#x27;230130.BKZS&#x27;</span>, start_time=<span class="hljs-string">&#x27;20200101&#x27;</span>, period=<span class="hljs-string">&#x27;1d&#x27;</span>, code_list =  get_sector_list(<span class="hljs-params"></span>)</span>):</span><br>    <span class="hljs-comment"># 获取本地数据</span><br>    df = xtdata.get_local_data(stock_code=[code], period=<span class="hljs-string">&#x27;1d&#x27;</span>, field_list=[<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>], start_time=start_time, end_time=datetime.datetime.now().strftime(<span class="hljs-string">&#x27;%Y%m%d%H%M%S&#x27;</span>))<br>    df = pd.concat([df[i].T.rename(columns=&#123;code:i&#125;) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>]], axis=<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(df) &lt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> df<br><br>    <span class="hljs-comment"># 时间转换</span><br>    df[<span class="hljs-string">&#x27;trade_day&#x27;</span>] = df[<span class="hljs-string">&#x27;time&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: datetime.datetime.fromtimestamp(x / <span class="hljs-number">1000.0</span>).date())<br><br>    <span class="hljs-comment"># 重新选择列</span><br>    df[<span class="hljs-string">&#x27;code&#x27;</span>] = code<br>    df[<span class="hljs-string">&#x27;sector_name&#x27;</span>] = df[<span class="hljs-string">&#x27;code&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: code_list[x][<span class="hljs-number">0</span>])<br>    df[<span class="hljs-string">&#x27;sector_type&#x27;</span>] = df[<span class="hljs-string">&#x27;code&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: code_list[x][<span class="hljs-number">1</span>])<br>    df = df[[<span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;sector_name&#x27;</span>, <span class="hljs-string">&#x27;sector_type&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>]]<br><br>    <span class="hljs-keyword">return</span> df<br></code></pre></td></tr></table></figure><p><img src="/img/kline_data_store.png"></p><h2 id="Clickhouse数据库设计"><a href="#Clickhouse数据库设计" class="headerlink" title="Clickhouse数据库设计"></a>Clickhouse数据库设计</h2><p>这里选用Clickhouse，而不是MySQL的主要原因是性能问题。行情数据一旦写入，几乎不会更新，并且量非常大，没有复杂的表关联，MySQL在这种场景下主要的问题是存储空间占用多、读写慢，而ClickHouse主要用于在线分析处理查询（OLAP），具有高效的数据压缩、向量引擎、列式存储特性，非常适合金融行情数据存储。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> database xtquant<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> xtquant.bond_tick<br>(<br>    code String, <br>    trade_time DateTime(<span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>), <br>    trade_day <span class="hljs-type">Date</span>, <br>    trade_minute Int16, <br>    <span class="hljs-keyword">open</span> Nullable(Float32), <br>    <span class="hljs-keyword">close</span> Nullable(Float32), <br>    high Nullable(Float32), <br>    low Nullable(Float32), <br>    <span class="hljs-keyword">last</span> Nullable(Float32), <br>    volume Nullable(Float64), <br>    amount Nullable(Float64), <br>    volume_deal Nullable(Float32), <br>    amount_deal Nullable(Float32), <br>    askPrice <span class="hljs-keyword">Array</span>(Nullable(Float32)), <br>    bidPrice <span class="hljs-keyword">Array</span>(Nullable(Float32)), <br>    askVol <span class="hljs-keyword">Array</span>(Nullable(Float32)), <br>    bidVol <span class="hljs-keyword">Array</span>(Nullable(Float32))<br>)<br>ENGINE <span class="hljs-operator">=</span> ReplacingMergeTree()<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> (trade_time, code, trade_day)<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> xtquant.sector_1d<br>(<br>    code String, <br>    trade_day <span class="hljs-type">Date</span>, <br>    sector_name String,<br>    sector_type String,<br>    <span class="hljs-keyword">open</span> Nullable(Float32), <br>    <span class="hljs-keyword">close</span> Nullable(Float32), <br>    high Nullable(Float32), <br>    low Nullable(Float32), <br>    volume Nullable(Float64), <br>    amount Nullable(Float64)<br>)<br>ENGINE <span class="hljs-operator">=</span> ReplacingMergeTree()<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> (trade_day, code)<br></code></pre></td></tr></table></figure><h2 id="Clickhouse数据批量写入"><a href="#Clickhouse数据批量写入" class="headerlink" title="Clickhouse数据批量写入"></a>Clickhouse数据批量写入</h2><p>设计好数据表后，利用<code>clickhouse_driver</code>库提供的接口将数据同步到数据库中。</p><p>对于tick数据，按天来遍历插入，对于k线数据，则直接存入，为了增量同步，写入时可查询已有数据的最大时间，避免重复写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> clickhouse_driver <span class="hljs-keyword">import</span> Client<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br>storage_client = Client(<span class="hljs-string">&#x27;10.0.16.11&#x27;</span>, password=<span class="hljs-string">&#x27;******&#x27;</span>, settings=&#123;<span class="hljs-string">&#x27;use_numpy&#x27;</span>: <span class="hljs-literal">True</span>&#125;)<br><br><span class="hljs-comment"># 可转债tick数据</span><br><span class="hljs-comment"># 获取可转债列表</span><br>_, bond_code_list = get_bond_history()<br><span class="hljs-keyword">for</span> code <span class="hljs-keyword">in</span> tqdm(bond_code_list):<br>    start_date = storage_client.execute(<span class="hljs-string">&quot;select max(trade_day) from xtquant.bond_tick where code=&#x27;&#123;&#125;&#x27;&quot;</span>.<span class="hljs-built_in">format</span>(code))<br>    start_date = <span class="hljs-built_in">str</span>(start_date[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]).replace(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    start_date = <span class="hljs-built_in">max</span>(start_date, <span class="hljs-string">&#x27;20200401&#x27;</span>)<br>    trade_dates = xtdata.get_trading_dates(<span class="hljs-string">&#x27;SH&#x27;</span>, start_time=start_date, end_time=datetime.date.today().strftime(<span class="hljs-string">&#x27;%Y%m%d&#x27;</span>))<br>    <span class="hljs-keyword">for</span> day <span class="hljs-keyword">in</span> trade_dates:<br>        day = datetime.datetime.fromtimestamp(day / <span class="hljs-number">1000.0</span>).strftime(<span class="hljs-string">&#x27;%Y%m%d&#x27;</span>)<br>    df = get_local_tick_data(code=code, start_time=day)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(df) &gt; <span class="hljs-number">0</span>:<br>        storage_client.insert_dataframe(<span class="hljs-string">&#x27;INSERT INTO xtquant.bond_tick VALUES&#x27;</span>, df)<br><br><span class="hljs-comment"># 行业1d数据</span><br><span class="hljs-comment"># 获取行业列表</span><br>sector_code_list = get_sector_list()<br><span class="hljs-keyword">for</span> code <span class="hljs-keyword">in</span> tqdm(sector_code_list):<br>    start_date = storage_client.execute(<span class="hljs-string">&quot;select max(trade_day) from xtquant.sector_1d where code=&#x27;&#123;&#125;&#x27;&quot;</span>.<span class="hljs-built_in">format</span>(code))<br>    start_date = <span class="hljs-built_in">str</span>(start_date[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]).replace(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    start_date = <span class="hljs-built_in">max</span>(start_date, <span class="hljs-string">&#x27;20100101&#x27;</span>)<br>    df = get_local_kline_data(code=code, start_time=start_date, period=<span class="hljs-string">&#x27;1d&#x27;</span>, code_list =  sector_code_list)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(df) &gt; <span class="hljs-number">0</span>:<br>        storage_client.insert_dataframe(<span class="hljs-string">&#x27;INSERT INTO xtquant.sector_1d VALUES&#x27;</span>, df)<br></code></pre></td></tr></table></figure><p>运行如上代码后，我们便可在clickhouse客户端中查询到已经写入的数据：</p><p><img src="/img/clickhouse_query.png"></p><p>至此，我们已经完成了历史数据到数据库中存储和增量写入。</p><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="https://mp.weixin.qq.com/s/5XI09nyStjmD0faYs9UIlw">初探迅投QMT极简策略系统</a></li><li><a href="https://mp.weixin.qq.com/s/R2WquJUD4Mu6wuoFjoC3AQ">迅投QMT量化行情接口以及历史行情数据下载</a></li><li><a href="https://mp.weixin.qq.com/s/l-pFVnqsWjLP1iBM63dD9Q">迅投QMT历史行情批量缓存</a></li></ul><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。</p><p><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>迅投QMT</tag>
      
      <tag>量化交易</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迅投QMT历史行情批量缓存</title>
    <link href="/2022/07/01/%E8%BF%85%E6%8A%95QMT%E5%8E%86%E5%8F%B2%E8%A1%8C%E6%83%85%E6%89%B9%E9%87%8F%E7%BC%93%E5%AD%98/"/>
    <url>/2022/07/01/%E8%BF%85%E6%8A%95QMT%E5%8E%86%E5%8F%B2%E8%A1%8C%E6%83%85%E6%89%B9%E9%87%8F%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>上文介绍了QMT行情接口概况和一个历史行情数据下载案例，本文进一步介绍如何获取批量股票代码并缓存对应的tick、分钟、日级别的历史数据。</p></blockquote><h2 id="获取股票名称列表"><a href="#获取股票名称列表" class="headerlink" title="获取股票名称列表"></a>获取股票名称列表</h2><p>QMT的行情函数暂时不能获取可转债列表，因此这里使用<code>akshare</code>库进行相关元数据的获取，使用前确保已安装。<code>akshare</code>库本身的功能十分强大，后续将详细展开，这里先不赘述。</p><p>首先导入相关的包：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> xtquant <span class="hljs-keyword">import</span> xtdata<br><span class="hljs-keyword">import</span> akshare <span class="hljs-keyword">as</span> ak<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br></code></pre></td></tr></table></figure><p>第一个接口是获取包含历史转债代码的列表，以方便同步历史数据，可转债上海市场以11开头，深圳市场以12开头，这里需要将akshare中来自东方财富的数据与QMT进行代码的对齐：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_bond_history</span>():</span><br>    bond_zh_cov_df = ak.bond_zh_cov()<br>    <span class="hljs-comment"># 排除至今未上市的转债</span><br>    bond_zh_cov_df =  bond_zh_cov_df[bond_zh_cov_df[<span class="hljs-string">&#x27;上市时间&#x27;</span>] &lt;= datetime.date.today()]<br>    stock_code_list, bond_code_list = [], []<br>    <span class="hljs-keyword">for</span> _, row <span class="hljs-keyword">in</span> bond_zh_cov_df.iterrows():<br>        <span class="hljs-keyword">if</span> row[<span class="hljs-string">&#x27;债券代码&#x27;</span>].startswith(<span class="hljs-string">&#x27;11&#x27;</span>):<br>            market = <span class="hljs-string">&#x27;.SH&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            market = <span class="hljs-string">&#x27;.SZ&#x27;</span><br>        stock_code_list.append(row[<span class="hljs-string">&#x27;正股代码&#x27;</span>] + market)<br>        bond_code_list.append(row[<span class="hljs-string">&#x27;债券代码&#x27;</span>] + market)<br>    <span class="hljs-keyword">return</span> stock_code_list, bond_code_list<br></code></pre></td></tr></table></figure><p>第二个接口是获取实时转债代码的列表，以方便增量更新，避免重复下载：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_bond_spot</span>():</span><br>    bond_cov_comparison_df = ak.bond_cov_comparison()<br>    <span class="hljs-comment"># 排除至今未上市的转债</span><br>    bond_cov_comparison_df =  bond_cov_comparison_df[bond_cov_comparison_df[<span class="hljs-string">&#x27;上市日期&#x27;</span>] !=<span class="hljs-string">&#x27;-&#x27;</span>]<br><br>    stock_code_list, bond_code_list = [], []<br>    <span class="hljs-keyword">for</span> _, row <span class="hljs-keyword">in</span> bond_cov_comparison_df.iterrows():<br>        <span class="hljs-keyword">if</span> row[<span class="hljs-string">&#x27;转债代码&#x27;</span>].startswith(<span class="hljs-string">&#x27;11&#x27;</span>):<br>            market = <span class="hljs-string">&#x27;.SH&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            market = <span class="hljs-string">&#x27;.SZ&#x27;</span><br>        stock_code_list.append(row[<span class="hljs-string">&#x27;正股代码&#x27;</span>] + market)<br>        bond_code_list.append(row[<span class="hljs-string">&#x27;转债代码&#x27;</span>] + market)<br>    <span class="hljs-keyword">return</span> stock_code_list, bond_code_list<br></code></pre></td></tr></table></figure><p>第三个接口是获取A股市场的沪深指数、所有A股、ETF、债券列表等股票代码，以便下载K线数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_shse_a_list</span>():</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    获取沪深指数、所有A股、ETF、债券列表</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    index_code = [<span class="hljs-string">&#x27;000001.SH&#x27;</span>, <span class="hljs-string">&#x27;399001.SZ&#x27;</span>, <span class="hljs-string">&#x27;399006.SZ&#x27;</span>, <span class="hljs-string">&#x27;000688.SH&#x27;</span>, <span class="hljs-string">&#x27;000300.SH&#x27;</span>, <span class="hljs-string">&#x27;000016.SH&#x27;</span>, <span class="hljs-string">&#x27;000905.SH&#x27;</span>, <span class="hljs-string">&#x27;000852.SH&#x27;</span>] <span class="hljs-comment"># 上证指数、深证成指、创业板指、科创50、沪深300、上证50、中证500、中证1000</span><br>    a_code = xtdata.get_stock_list_in_sector(<span class="hljs-string">&#x27;沪深A股&#x27;</span>)<br>    etf_code =  xtdata.get_stock_list_in_sector(<span class="hljs-string">&#x27;沪深ETF&#x27;</span>)<br>    <span class="hljs-comment">#bond_code = [i for i in xtdata.get_stock_list_in_sector(&#x27;沪深债券&#x27;) if i[:3] in &#123;&#x27;110&#x27;,  &#x27;111&#x27;, &#x27;113&#x27;, &#x27;118&#x27;, &#x27;123&#x27;, &#x27;127&#x27;, &#x27;128&#x27;&#125;]</span><br>    bond_code = get_bond_history()[-<span class="hljs-number">1</span>]<br><br>    <span class="hljs-keyword">return</span> index_code + a_code + etf_code + bond_code<br></code></pre></td></tr></table></figure><h2 id="批量下载可转债tick数据"><a href="#批量下载可转债tick数据" class="headerlink" title="批量下载可转债tick数据"></a>批量下载可转债tick数据</h2><p>通过控制参数<code>init</code>来决定是否增量下载(以天为粒度)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download_history_bond_tick</span>(<span class="hljs-params">init=<span class="hljs-number">1</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    下载历史转债tick数据(20200401起)</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># 初始化：获取转债及其正股代码</span><br>    <span class="hljs-keyword">if</span> init:<br>        <span class="hljs-comment"># 包含历史过期代码</span><br>        stock_code_list, bond_code_list = get_bond_history()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 仅当日代码</span><br>        stock_code_list, bond_code_list = get_bond_spot()<br>    <br>    <span class="hljs-comment"># 数据下载目录</span><br>    data_dir = <span class="hljs-string">&#x27;E:\\QMT\\userdata_mini\\datadir\\&#x27;</span><br>    <span class="hljs-keyword">for</span> stock, bond <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">zip</span>(stock_code_list, bond_code_list), total=<span class="hljs-built_in">len</span>(stock_code_list)):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始下载：股票 &#123;&#125;, 转债 &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(stock, bond))<br>        <span class="hljs-comment"># 上海转债: 已下载的数据</span><br>        <span class="hljs-keyword">if</span> bond.endswith(<span class="hljs-string">&quot;SH&quot;</span>):<br>            dir_path = data_dir + <span class="hljs-string">&quot;\\SH\\0\\&quot;</span> + bond.split(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br>        <span class="hljs-comment"># 深圳转债：已下载的数据</span><br>        <span class="hljs-keyword">else</span>:<br>            dir_path = data_dir + <span class="hljs-string">&quot;\\SZ\\0\\&quot;</span> + bond.split(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br>        <br>        start_date = <span class="hljs-string">&#x27;20200401&#x27;</span> <span class="hljs-comment"># QMT支持的最久数据时间</span><br>        <span class="hljs-comment"># 如果路径存在，断点续传，重设起点下载时间</span><br>        <span class="hljs-keyword">if</span> os.path.exists(dir_path):<br>            downloaded = os.listdir(dir_path)<br>            <span class="hljs-comment"># 获取已下载的最大日期，作为本次同步的起始时间</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(downloaded) &gt; <span class="hljs-number">0</span>:<br>                start_date = <span class="hljs-built_in">max</span>(downloaded).split(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br>            <br>        xtdata.download_history_data(stock_code=bond, period=<span class="hljs-string">&#x27;tick&#x27;</span>, start_time=start_date)<br><br></code></pre></td></tr></table></figure><h2 id="批量下载K线"><a href="#批量下载K线" class="headerlink" title="批量下载K线"></a>批量下载K线</h2><p>通过传入参数<code>start_time</code>设置起始下载时间，参数<code>period</code>设置K线类型:</p><ul><li>1m: 1分钟K线</li><li>1d: 1日K线</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download_history_kline</span>(<span class="hljs-params">code_list, start_time=<span class="hljs-string">&#x27;&#x27;</span>, period=<span class="hljs-string">&#x27;1m&#x27;</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    下载历史K线数据:</span><br><span class="hljs-string">    code_list: 股票代码， 如：get_shse_a_list()</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;本次开始下载的时间为：&quot;</span>, datetime.datetime.now().strftime(<span class="hljs-string">&quot;%Y%m%d%H%M%S&quot;</span>))<br>    <span class="hljs-keyword">for</span> code <span class="hljs-keyword">in</span> tqdm(code_list):<br>        xtdata.download_history_data(code, period=period, start_time=start_time)<br><br></code></pre></td></tr></table></figure><p>经过漫长的等待，本地便会有历史数据的缓存了，存储的目录形式为<code>datadir\SH\&#123;0|60|86400&#125;\&#123;code&#125;</code>，便于我们进一步加工处理。</p><p>至此，我们已经缓存了许多历史数据，并且可以增量更新，保存到数据库中供后续分析。</p><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="https://mp.weixin.qq.com/s/5XI09nyStjmD0faYs9UIlw">初探迅投QMT极简策略系统</a></li><li><a href="https://mp.weixin.qq.com/s/R2WquJUD4Mu6wuoFjoC3AQ">迅投QMT量化行情接口以及历史行情数据下载</a></li></ul><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。</p><p><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>迅投QMT</tag>
      
      <tag>量化交易</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QMT行情接口以及历史行情数据下载</title>
    <link href="/2022/06/27/QMT%E8%A1%8C%E6%83%85%E6%8E%A5%E5%8F%A3%E4%BB%A5%E5%8F%8A%E5%8E%86%E5%8F%B2%E8%A1%8C%E6%83%85%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD/"/>
    <url>/2022/06/27/QMT%E8%A1%8C%E6%83%85%E6%8E%A5%E5%8F%A3%E4%BB%A5%E5%8F%8A%E5%8E%86%E5%8F%B2%E8%A1%8C%E6%83%85%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<blockquote><p>上文介绍QMT一些背景知识，本文则主要介绍QMT行情接口概况和一个历史行情数据下载案例，希望对读者有所启发。</p></blockquote><h2 id="行情接口分析"><a href="#行情接口分析" class="headerlink" title="行情接口分析"></a>行情接口分析</h2><p>QMT行情有两套不同的处理逻辑：</p><ul><li>数据查询接口：使用时需要先确保MiniQmt已有所需要的数据，如果不足可以通过补充数据接口补充，再调用数据获取接口获取。适用于少量的实时行情数据和大批量的历史行情数据。</li><li>订阅接口：直接设置数据回调，数据到来时会由回调返回。订阅接收到的数据一般会保存下来，同种数据不需要再单独补充。适用于大批量的实时行情数据。</li></ul><p>按照类别，主要有以下四类：</p><ul><li>行情数据（K线数据、分笔数据，订阅和主动获取的接口）</li><li>财务数据</li><li>合约基础信息</li><li>基础行情数据板块分类信息等基础信息</li></ul><h2 id="行情接口概况"><a href="#行情接口概况" class="headerlink" title="行情接口概况"></a>行情接口概况</h2><p>首先导入行情库：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> xtquant <span class="hljs-keyword">import</span> xtdata<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(xtdata))<br></code></pre></td></tr></table></figure><p>可以看到行情主要分为以下几个模块：</p><ul><li>实时行情订阅：subscribe* 系列</li><li>基本信息和行情查询：get_* 系列</li><li>历史数据订阅： download_* 系列 </li><li>历史数据处理： get_local_data</li></ul><p>针对数据存储目录，默认为<code>xtdata.data_dir=../userdata_mini/datadir</code>, 按照官方文档的说明似乎可以任意设置，但实操下来却发现没起到作用。因此，如果默认存储空间有限的话，我们可以将其移动到有较大空间的地方，然后创建一个快捷方式指向原来的地方，避免磁盘空间被耗尽。</p><h3 id="实战：历史行情数据下载"><a href="#实战：历史行情数据下载" class="headerlink" title="实战：历史行情数据下载"></a>实战：历史行情数据下载</h3><p>QMT提供的历史行情下载接口有两个：</p><ul><li>单支股票下载：download_history_data(stock_code, period, start_time=’’, end_time=’’)</li><li>批量股票下载：download_history_data2(stock_list, period, start_time=’’, end_time=’’,callback=None)</li></ul><p>其中各个参数具体含义如下：</p><ul><li>stock_code：股票名，以<code>code.exchange</code>的形式表示，exchange可从如下品种中选择<ul><li>上海证券(SH), 如<code>510050.SH</code></li><li>深圳证券(SZ), 如<code>159919.SZ</code></li><li>上海期权(SHO), 如<code>10004268.SHO</code></li><li>深圳期权(SZO), 如<code>90000967.SZO</code></li><li>中国金融期货(CFFEX), 如<code>IC07.CFFEX</code></li><li>郑州商品期货(CZCE), 如<code>SR05.CZCE</code></li><li>大连商品期货(DCE), 如<code>m2212.DCE</code></li><li>上海期货(SHFE), 如<code>wr2209.SHFE</code></li><li>能源中心(INE), 如<code>sc00.INE</code></li><li>香港联交所(HK), 如<code>00700.HK</code></li></ul></li><li>stock_list, 股票列表，如[‘510050.SH’, ‘159919.SZ’]</li><li>period, 数据周期，可选<code>1m</code>、<code>5m</code>、<code>1d</code>、<code>tick</code>, 分别表示1分钟K线、5分钟K线、1天K线、分笔数据</li><li>start_time, 数据起始时间，格式YYYYMMDD/YYYYMMDDhhmmss/YYYYMMDDhhmmss.milli，如 “20200427” “20200427093000” “20200427093000.000”</li><li>end_time，数据结束时间，格式同start_time</li></ul><p>如果运行如下代码，下载深圳市场300ETF期权<code>沪深300ETF购9月4900</code>标的的tick行情，就会在<code>userdata_mini\datadir\SZO\0\90000967</code>目录下生成以日为单位的tick数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> xtquant <span class="hljs-keyword">import</span> xtdata<br><br>xtdata.download_history_data(<span class="hljs-string">&#x27;90000967.SZO&#x27;</span>, period=<span class="hljs-string">&#x27;tick&#x27;</span>)<br>data = xtdata.get_local_data(field_list=[], stock_code=[<span class="hljs-string">&#x27;90000967.SZO&#x27;</span>], period=<span class="hljs-string">&#x27;tick&#x27;</span>, count=<span class="hljs-number">10</span>)<br><br>df = pd.DataFrame(data[<span class="hljs-string">&#x27;90000967.SZO&#x27;</span>])<br><span class="hljs-built_in">print</span>(df.iloc[-<span class="hljs-number">1</span>])<br><br></code></pre></td></tr></table></figure><p><img src="/img/data_file.png"></p><p>上述二进制文件是无法直接读取的，这里通过<code>get_local_data</code>接口进行数据文件的解析，便可解码已经下载的tick行情，包含时间戳、K线、买五卖五快照信息等：</p><p><img src="/img/option_tick_data.png"></p><p>注意到这里的Unix时间戳是精确到毫秒的，可以通过datetime转换成字符型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> datetime<br>df[<span class="hljs-string">&#x27;datetime&#x27;</span>] = df[<span class="hljs-string">&#x27;time&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: datetime.datetime.fromtimestamp(x / <span class="hljs-number">1000.0</span>))<br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><p><img src="/img/option_tick_timestamp.png"></p><p>至此，我们已经调试成功历史行情下载接口了，下篇文章则将会重点介绍如何获取指定的股票代码并下载对应的历史数据，保存到数据库中供后续分析。</p><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="https://mp.weixin.qq.com/s/5XI09nyStjmD0faYs9UIlw">初探迅投QMT极简策略系统</a></li></ul><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。</p><p><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>迅投QMT</tag>
      
      <tag>量化交易</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初探迅投QMT极简策略系统</title>
    <link href="/2022/06/26/%E5%88%9D%E6%8E%A2%E8%BF%85%E6%8A%95QMT%E6%9E%81%E7%AE%80%E7%AD%96%E7%95%A5%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/06/26/%E5%88%9D%E6%8E%A2%E8%BF%85%E6%8A%95QMT%E6%9E%81%E7%AE%80%E7%AD%96%E7%95%A5%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>迅投QMT是一个门槛相对较低、功能强大的量化策略交易系统。本文首先介绍一些背景知识，并主要分析极简策略交易系统的一些功能，后续将陆续呈现行情、交易、策略等实战教程。</p></blockquote><h2 id="QMT极速策略交易系统"><a href="#QMT极速策略交易系统" class="headerlink" title="QMT极速策略交易系统"></a>QMT极速策略交易系统</h2><p><strong>迅投QMT极速策略交易系统</strong> 是一款专门针对券商、期货公司、信托等机构的高净值客户开发设计的集行情显示，投资研究，产品交易于一身，并自备完整风控系统的综合性平台。其自带投研量化平台可以灵活实现CTA，无风险套利等多种量化策略，并能够对策略进行回测检验和自动化交易。目前大部分券商都有支持策略交易，目前已知的像国金、国盛、国信、海通、华鑫等券商均有对普通用户开放，在开通资金门槛、功能阉割和佣金费率方面可能有一些差异，目前部分券商股票佣金可低至万1，可极大降低量化交易摩擦成本。</p><p>QMT极速策略可手工交易的品种有：普通股票/ETF、港股通、融资融券、ETF期权等，其中ETF期权的程序化交易权限较难申请，其他均可在内置的模型交易中实现本地自动化程序交易。</p><p><img src="/img/strategy.png"></p><h2 id="QMT极简策略交易系统"><a href="#QMT极简策略交易系统" class="headerlink" title="QMT极简策略交易系统"></a>QMT极简策略交易系统</h2><p><code>xtquant</code>是<code>QMT</code>官方内置的<code>XtMiniQmt</code>极简客户端对应的Python接口，目前支持的版本为3.6~3.8，可支持历史行情下载、实时数据订阅、外部数据访问、普通账户和两融账户交易(需开通相关权限)，对量化交易支持的比较完善，跟极速策略交易系统相比最主要的优势是简洁、灵活，不局限在bar、kline的事件触发，可以容易地集成多种数据源进行综合分析，相关的官方文档可点击<a href="https://github.com/ai4trade/XtQuant/tree/main/xtquant/doc">GitHub仓库</a>下载查看。</p><p><code>QMT</code>内置的Python版本为3.6，第一次使用的话需手动下载相关的库，或直接拷贝已经下载好的<code>xtquant</code>库。</p><p><img src="/img/setting.png"></p><p><code>XtMiniQmt.exe</code>存在于QMT安装目录下的<code>bin.x64</code>子目录中, <code>xtquant</code>库默认安装在<code>bin.x64\Lib\site-packages</code>中。</p><p>内置的Python版本较老，对于一些较新的库支持有限，因此，如果我们想在自定义的<code>Python</code>中调用，如<code>Python3.8</code>，只需将<code>xtquant</code>拷贝到我们自己python安装目录的<code>Lib\site-packages</code>中便可，这里我的安装路径是 C:\ProgramData\Anaconda3\Lib\site-packages\xtquant。</p><p><code>xtquant</code>主要包含两大块：</p><ul><li><strong>xtdata</strong>：<code>xtdata</code>提供和<code>MiniQmt</code>的交互接口，本质是和<code>MiniQmt</code>建立连接，由<code>MiniQmt</code>处理行情数据请求，再把结果回传返回到<code>python</code>层。需要注意的是这个模块的使用目前并不需要登录，因此只要安装了<code>QMT</code>,就可以无门槛的使用其提供的数据服务。</li><li><strong>xttrader</strong>：<code>xttrader</code>是基于迅投<code>MiniQMT</code>衍生出来的一套完善的Python策略运行框架，对外以Python库的形式提供策略交易所需要的交易相关的API接口。该接口需开通A股实盘版权限方可登录使用。</li></ul><p>在运行使用<code>XtQuant</code>的程序前需要先启动<code>MiniQMT</code>客户端。通常有两种方式，一种是直接启动极简QMT客户端<code>XtMiniQmt.exe</code>：</p><p><img src="/img/XtMiniQmt.png"></p><p>如果登录时提示没有相关权限，可尝试启动QMT量化交易终端<code>XtItClient.exe</code>,在登录界面选择极简模式：</p><p><img src="/img/XtItClient.png"></p><p>部分券商不支持策略的云服务器运行，但接收行情数据不受影响。设置好客户端后，便可在ipython、jupyter等环境中调试数据和策略了。下期将带来行情相关的详细介绍以及服务化封装的细节。</p><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="https://github.com/ai4trade/XtQuant">XtQuant行情和策略封装GitHub仓库持续更新</a></li></ul><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。</p><p><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>迅投QMT</tag>
      
      <tag>量化交易</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>量化资源</title>
    <link href="/2022/01/08/%E9%87%8F%E5%8C%96%E8%B5%84%E6%BA%90/"/>
    <url>/2022/01/08/%E9%87%8F%E5%8C%96%E8%B5%84%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<blockquote><p>维护量化分析中的常用资源，包括量化平台、量化数据、量化库、AI模型、数据库、交易接口等。</p></blockquote><h1 id="量化平台"><a href="#量化平台" class="headerlink" title="量化平台"></a>量化平台</h1><ul><li><a href="https://www.joinquant.com/">K线策略框架：聚宽量化</a></li><li><a href="https://github.com/microsoft/qlib">深度学习框架：微软QLib</a></li><li><a href="https://github.com/AI4Finance-Foundation/FinRL">强化学习框架：FinRL</a></li></ul><h1 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h1><ul><li><a href="http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz">TA-Lib : Technical Analysis Library</a> </li><li><a href="https://github.com/mrjbq7/ta-lib">Python wrapper for TA-LIB</a></li><li><a href="https://github.com/twopirllc/pandas-ta">Pandas TA - A Technical Analysis Library in Python 3</a></li></ul><h1 id="预训练模型"><a href="#预训练模型" class="headerlink" title="预训练模型"></a>预训练模型</h1><ul><li><a href="https://github.com/Langboat/Mengzi">澜舟科技 Mengzi-BERT-base-fin</a></li><li><a href="https://github.com/valuesimplex/FinBERT">熵简科技 FinBERT 1.0</a></li></ul><h1 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h1><ul><li><a href="https://github.com/akfamily/akshare">akshare</a></li><li><a href="https://github.com/alvarobartt/investpy">investpy</a></li><li><a href="https://tushare.pro/">tushare</a></li><li><a href="https://www.joinquant.com/help/api/help">聚宽数据</a></li><li><a href="https://eodhistoricaldata.com/">eod历史数据</a></li><li><a href="https://site.financialmodelingprep.com/developer/docs">Financial Modeling Prep美股数据</a></li></ul><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><ul><li><a href="https://clickhouse.com/">Clickhouse数据仓库</a></li><li><a href="https://github.com/mymarilyn/clickhouse-driver">ClickHouse Python接口</a></li><li><a href="https://github.com/maximdanilchenko/aiochclient">ClickHouse 异步Python接口 aiochclient</a></li><li><a href="https://github.com/aio-libs/aiomysql">MySQL 异步Python接口 aiomysql</a></li></ul><h1 id="下单接口"><a href="#下单接口" class="headerlink" title="下单接口"></a>下单接口</h1><ul><li><a href="http://www.thinktrader.net/">迅投QMT</a></li><li><a href="https://www.isimu123.com/">恒生云纪PTrade</a></li><li><a href="https://github.com/shidenggui/easytrader">同花顺EasyTrader</a></li><li><a href="https://openapi.futunn.com/futu-api-doc/">富途OpenAPI</a></li><li><a href="https://quant.itiger.com/">老虎量化</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>资源</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
