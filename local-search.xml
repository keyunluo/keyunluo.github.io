<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>QMT量化平台常见问题QA</title>
    <link href="/2022/11/25/QMT%E9%87%8F%E5%8C%96%E5%B9%B3%E5%8F%B0%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98QA/"/>
    <url>/2022/11/25/QMT%E9%87%8F%E5%8C%96%E5%B9%B3%E5%8F%B0%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98QA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>经常有读者在公众号后台以及量化交流群中提出比较多的基础问题，现将其中的一些典型问题加以整理，提升初级使用者的学习体验。</p></blockquote><h2 id="一、账户问题"><a href="#一、账户问题" class="headerlink" title="一、账户问题"></a>一、账户问题</h2><h3 id="1-1-如何开通QMT、Ptrade权限"><a href="#1-1-如何开通QMT、Ptrade权限" class="headerlink" title="1.1 如何开通QMT、Ptrade权限"></a>1.1 如何开通QMT、Ptrade权限</h3><ul><li>A1：找开户的经理提需求，一般是要签一个协议，也有直接线上开通的</li></ul><h3 id="1-2-QMT、Ptrade平台开通的门槛多少"><a href="#1-2-QMT、Ptrade平台开通的门槛多少" class="headerlink" title="1.2  QMT、Ptrade平台开通的门槛多少"></a>1.2  QMT、Ptrade平台开通的门槛多少</h3><ul><li>A2：找开户的经理提需求，一般是20W以上，也有1W就能开通的</li></ul><h3 id="1-3-QMT没有miniQMT"><a href="#1-3-QMT没有miniQMT" class="headerlink" title="1.3 QMT没有miniQMT"></a>1.3 QMT没有miniQMT</h3><ul><li>A3：部分券商对个人使用是做了阉割的，比如国信证券</li></ul><h3 id="1-4-miniQMT读取基础数据不准确"><a href="#1-4-miniQMT读取基础数据不准确" class="headerlink" title="1.4 miniQMT读取基础数据不准确"></a>1.4 miniQMT读取基础数据不准确</h3><ul><li>A4：部分券商不再维护miniQMT，比如国盛证券</li></ul><h3 id="1-5-miniQMT无法在云服务器中运行"><a href="#1-5-miniQMT无法在云服务器中运行" class="headerlink" title="1.5 miniQMT无法在云服务器中运行"></a>1.5 miniQMT无法在云服务器中运行</h3><ul><li>A5：部分券商不支持，比如国盛证券，其他大多支持</li></ul><h3 id="1-6-QMT支持L2行情吗"><a href="#1-6-QMT支持L2行情吗" class="headerlink" title="1.6  QMT支持L2行情吗"></a>1.6  QMT支持L2行情吗</h3><ul><li>A6：部分券商支持，比如中金证券1380一年</li></ul><h3 id="1-7-QMT支持股票期权吗"><a href="#1-7-QMT支持股票期权吗" class="headerlink" title="1.7 QMT支持股票期权吗"></a>1.7 QMT支持股票期权吗</h3><ul><li>A7：支持期权的手动交易，不支持量化，需要报备，个人门槛较高</li></ul><h3 id="1-8-无法在QMT策略中卖出可转债"><a href="#1-8-无法在QMT策略中卖出可转债" class="headerlink" title="1.8 无法在QMT策略中卖出可转债"></a>1.8 无法在QMT策略中卖出可转债</h3><ul><li>A8：需要在开通QMT时填写可转债程序化交易投资者信息报备表，如果没有勾选则禁止交易</li></ul><h2 id="二、使用问题"><a href="#二、使用问题" class="headerlink" title="二、使用问题"></a>二、使用问题</h2><h3 id="2-1-使用miniQMT获取行情数据需要登录吗"><a href="#2-1-使用miniQMT获取行情数据需要登录吗" class="headerlink" title="2.1 使用miniQMT获取行情数据需要登录吗"></a>2.1 使用miniQMT获取行情数据需要登录吗</h3><ul><li>A1: 不需要，打开miniQMT终端即可，如果要实盘交易，则需要登录</li></ul><h3 id="2-2-如何登录miniQMT"><a href="#2-2-如何登录miniQMT" class="headerlink" title="2.2 如何登录miniQMT"></a>2.2 如何登录miniQMT</h3><ul><li>A2: 一般在主QMT登录框下选极简模式可以登录</li></ul><h3 id="2-3-如何安装xtquant"><a href="#2-3-如何安装xtquant" class="headerlink" title="2.3 如何安装xtquant"></a>2.3 如何安装xtquant</h3><ul><li>A3: 首先要在主QMT中下载Python库，然后到QMT安装目录下，进入<code>bin.x64\Lib\site-packages\xtquant</code>，拷贝下来放到自己的Python版本<code>Lib\site-packages</code>对应的路径中</li></ul><h3 id="2-4-ipython无法导入xtquant包"><a href="#2-4-ipython无法导入xtquant包" class="headerlink" title="2.4 ipython无法导入xtquant包"></a>2.4 ipython无法导入xtquant包</h3><ul><li>A4: 检查Python版本(目前仅支持Windows下的python3.6-3.8之间的版本)、检查是否使用了多个不同版本python造成了混乱(设置环境变量，把装有xtquant的python路径放到前面)</li></ul><h3 id="2-5-xtquant无法获取5档L1行情，只有最新价"><a href="#2-5-xtquant无法获取5档L1行情，只有最新价" class="headerlink" title="2.5 xtquant无法获取5档L1行情，只有最新价"></a>2.5 xtquant无法获取5档L1行情，只有最新价</h3><ul><li>A5: 该券商版本可能做了阉割、QMT登录界面行情应该选择5档全推而不是最新价</li></ul><h3 id="2-6-QMT网络连接总是重连"><a href="#2-6-QMT网络连接总是重连" class="headerlink" title="2.6  QMT网络连接总是重连"></a>2.6  QMT网络连接总是重连</h3><ul><li>A6: 家庭宽带不稳定，重启QMT客户端看看</li></ul><h3 id="2-7-跑QMT需要什么样的配置"><a href="#2-7-跑QMT需要什么样的配置" class="headerlink" title="2.7 跑QMT需要什么样的配置"></a>2.7 跑QMT需要什么样的配置</h3><ul><li>A7: 一般来说4核8G内存基本够用，但是如果策略复杂，或者订阅数据过多，会稍显吃力，推荐16核32GB内存的配置，以及稳定的家庭带宽或云服务器</li></ul><h3 id="2-8-xtquant下载历史数据后取local-data仍然为空"><a href="#2-8-xtquant下载历史数据后取local-data仍然为空" class="headerlink" title="2.8 xtquant下载历史数据后取local data仍然为空"></a>2.8 xtquant下载历史数据后取local data仍然为空</h3><ul><li>A8: QMT服务器可能处于维护状态、本地网络不稳定下载中断了、下载量过大TCP连接多阻塞了</li></ul><h3 id="2-9-历史tick数据最早到哪个时间"><a href="#2-9-历史tick数据最早到哪个时间" class="headerlink" title="2.9 历史tick数据最早到哪个时间"></a>2.9 历史tick数据最早到哪个时间</h3><ul><li>A9: 最早的数据为2020.4月以后</li></ul><h3 id="2-10-数据高效存取有哪些方法"><a href="#2-10-数据高效存取有哪些方法" class="headerlink" title="2.10 数据高效存取有哪些方法"></a>2.10 数据高效存取有哪些方法</h3><ul><li>A10：比较推荐的做法是使用数据库软件，比如clickhouse、dolphindb等，方便历史数据和实时数据的拼接。本地的话使用hdf5、parquet等也能取得很高的性能</li></ul><h3 id="2-11-xtquant支持回测吗"><a href="#2-11-xtquant支持回测吗" class="headerlink" title="2.11 xtquant支持回测吗"></a>2.11 xtquant支持回测吗</h3><ul><li>A11：不支持，需要借助第三方框架，如掘金量化等，推荐只将xtquant作为交易接口，回测可使用主QMT</li></ul><h3 id="2-12-pip下载库速度慢，有么有加速的方式"><a href="#2-12-pip下载库速度慢，有么有加速的方式" class="headerlink" title="2.12 pip下载库速度慢，有么有加速的方式"></a>2.12 pip下载库速度慢，有么有加速的方式</h3><ul><li>A12：使用国内源，如：<code>pip config set global.index-url https://mirrors.cloud.tencent.com/pypi/simple</code></li></ul><h3 id="2-13-交易系统问题"><a href="#2-13-交易系统问题" class="headerlink" title="2.13 交易系统问题"></a>2.13 交易系统问题</h3><ul><li>A13: 不打开miniQMT无法直接使用库交易，不可以在Linux下运行，开通极速柜台后不能在手机同花顺交易</li></ul><h3 id="2-14-数据不是很丰富和完整，哪里可以获得更多的数据"><a href="#2-14-数据不是很丰富和完整，哪里可以获得更多的数据" class="headerlink" title="2.14 数据不是很丰富和完整，哪里可以获得更多的数据"></a>2.14 数据不是很丰富和完整，哪里可以获得更多的数据</h3><ul><li>A14：akshare中包装了比较多的爬虫数据，另外可以自己在港美券商中爬虫获取历史行情、供应链数据、财务数据、估值数据等多种数据。专业的量化平台，如米筐、聚宽、优矿等，也提供了比较精准的因子、财务、历史行情。也可以在淘宝上购买一些高频历史数据</li></ul><h3 id="2-15-计算复权后数据与同花顺等软件有差异"><a href="#2-15-计算复权后数据与同花顺等软件有差异" class="headerlink" title="2.15 计算复权后数据与同花顺等软件有差异"></a>2.15 计算复权后数据与同花顺等软件有差异</h3><ul><li>A15：同花顺等软件大多使用了等差复权的方法，直接做加减法，这导致计算涨跌幅度的时候不正确，历史行情也会出现负值。而在量化中我们经常用乘除法，即等比复权的方式处理数据，避免了上面的问题，因此不必理会这种差异</li></ul><h3 id="2-16-如何计算当天的涨停价"><a href="#2-16-如何计算当天的涨停价" class="headerlink" title="2.16 如何计算当天的涨停价"></a>2.16 如何计算当天的涨停价</h3><ul><li>A16：主板(int(x * 110 + 0.5) / 100)、创业板/科创板/北交所(int(x * 120 + 0.5) / 100)，x为昨收价</li></ul><h3 id="2-17-可以使用文件单功能吗"><a href="#2-17-可以使用文件单功能吗" class="headerlink" title="2.17 可以使用文件单功能吗"></a>2.17 可以使用文件单功能吗</h3><ul><li>A17：个人用户基本受限的，可以在QMT中写个轮询程序监控指定路径，自行处理</li></ul><h3 id="2-18-subscribe-whole-quote取的是全市场数据"><a href="#2-18-subscribe-whole-quote取的是全市场数据" class="headerlink" title="2.18 subscribe_whole_quote取的是全市场数据"></a>2.18 subscribe_whole_quote取的是全市场数据</h3><ul><li>A18：QMT实现上的BUG，需要自己在回调函数中过滤自己感兴趣的</li></ul><h3 id="2-19-QMT支持C-调用吗"><a href="#2-19-QMT支持C-调用吗" class="headerlink" title="2.19 QMT支持C++调用吗"></a>2.19 QMT支持C++调用吗</h3><ul><li>A19：支持，有专门的C++ SDK框架，可找券商咨询</li></ul><h3 id="2-20-哪里找到官方文档"><a href="#2-20-哪里找到官方文档" class="headerlink" title="2.20 哪里找到官方文档"></a>2.20 哪里找到官方文档</h3><ul><li>A20：<a href="http://docs.thinktrader.net/QMT-Simple/">http://docs.thinktrader.net/QMT-Simple/</a></li></ul><p>PS：之前陆续收到不少小伙伴的私聊，为了方便大家交流，特意建了一个微信群，大家如有需要，可在公众号下方的菜单<code>交流群</code>获得入群方式。</p><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。</p><p><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>资源</tag>
      
      <tag>量化交易</tag>
      
      <tag>量化投研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>量化数据筛选以及国内外量化平台汇总</title>
    <link href="/2022/10/07/%E6%9C%80%E6%96%B0%E5%9B%BD%E5%86%85%E5%A4%96%E9%87%8F%E5%8C%96%E5%B9%B3%E5%8F%B0%E6%B1%87%E6%80%BB/"/>
    <url>/2022/10/07/%E6%9C%80%E6%96%B0%E5%9B%BD%E5%86%85%E5%A4%96%E9%87%8F%E5%8C%96%E5%B9%B3%E5%8F%B0%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<blockquote><p>推荐研究过程中使用的高质量数据，汇总国内外主流的量化资源，包括量化平台、投研数据、量化库、AI模型、数据库、交易接口等。</p></blockquote><h1 id="一、高质量数据推荐"><a href="#一、高质量数据推荐" class="headerlink" title="一、高质量数据推荐"></a>一、高质量数据推荐</h1><p>量化交易中数据起着至关重要的作用，然而现状是鱼龙混杂，部分数据有缺失甚至错误，给我们研究带来不少干扰。下面列举一些实践过的高质量数据，加粗的表示推荐：</p><h2 id="1-1-A股"><a href="#1-1-A股" class="headerlink" title="1.1 A股"></a>1.1 A股</h2><ul><li><strong>1.1.1 实时行情</strong><ul><li><strong>券商内嵌的网页、小程序行情接口</strong>，如：<a href="https://h5jy.gszq.com:8443/market/json?funcno=20003&amp;version=1&amp;stock_list=SZ:002594">https://h5jy.gszq.com:8443/market/json?funcno=20003&amp;version=1&amp;stock_list=SZ:002594</a> ，可获得盘口5挡行情以及K线行情</li><li>迅投QMT：MiniQMT可获取实时的Tick、K线行情</li><li>通达信mootdx：通过python直接读取通达信提供的实时行情</li><li><strong>港美股券商提供的免费A股行情</strong>：像富途、老虎、长桥等券商提供的API，可免费获得比较完备的高速A股5挡行情</li></ul></li><li><strong>1.1.2 tick快照历史数据</strong><ul><li>迅投MiniQMT：可提供2020.4以后的部分tick数据，有部分缺失</li><li>掘金量化：可提供近3个月的tick数据</li><li>东方财富：APP中的超级复盘功能，可获取历史上的分时成交以及5挡委托，需要逆向分析解包</li><li>天勤量化专业版：提供了股票的近期历史tick快照行情</li></ul></li><li><strong>1.1.3 1分钟/1日K线</strong><ul><li><strong>米筐</strong>：股票、ETF、可转债、指数、期货、期权、<strong>复权因子</strong>等非常齐全，基本可以满足日常研究使用</li><li><strong>掘金量化</strong>：支持1分钟整数倍的历史K线行情</li><li><strong>akshare</strong>：获取复权日K线数据后进行自加工计算复权因子</li><li>迅投MiniQMT：总体可用，但复权情况有部分问题，部分指数行情缺失</li></ul></li><li><strong>1.1.4 交易日期</strong><ul><li><strong>pandas_market_calendars</strong>：获取多个市场历史和未来的交易日期</li><li><strong>akshare</strong>: 获取A股市场历史和未来的交易日期</li></ul></li><li><strong>1.1.5 因子数据</strong><ul><li><strong>米筐</strong>：提供了日维度的alpha101技术因子、财务衍生因子等</li><li><strong>聚宽</strong>：提供了alpha101、alpha192技术因子、财务衍生因子等<h2 id="1-2-港美股"><a href="#1-2-港美股" class="headerlink" title="1.2 港美股"></a>1.2 港美股</h2></li></ul></li><li><strong>1.2.1 实时行情</strong><ul><li><strong>港美股券商OpenAPI实时行情</strong>：富途、老虎、长桥、尊嘉等券商APP中购买行情权限后获取访问权限</li><li><strong>港美券商APP逆向</strong>: 微牛、老虎等，可获取L1/L2等不同权限的行情接口</li><li><strong>盈透证券TWS</strong>：购买对应资源的包月套餐</li></ul></li><li><strong>1.2.2 历史行情</strong><ul><li><strong>b.scsi.to</strong>: 提供了截止2021.5月的近10年1分钟不复权美股行情，以及大量的另类数据，总规模可达1个TB</li><li><strong>港美股券商OpenAPI历史股票行情</strong>：一般提供了近3年的历史K线数据，不过可能有使用量上的限制</li></ul></li></ul><p>当然，万能的淘宝也给了我们另一个选择，卖数据的很多，花钱就能变强！</p><h1 id="二、量化平台"><a href="#二、量化平台" class="headerlink" title="二、量化平台"></a>二、量化平台</h1><h2 id="2-1-券商量化平台"><a href="#2-1-券商量化平台" class="headerlink" title="2.1 券商量化平台"></a>2.1 券商量化平台</h2><ul><li><a href="https://n-sight.com.cn/">华鑫证券奇点API系统</a>：门槛较低，股票、两融、期权等品种的回测、仿真、实盘一条龙服务，提供了Python和C++的接口</li><li><a href="https://xtp.zts.com.cn/">中泰证券XTP系统</a>: XTP极速交易平台，提供了股票和期权的C++行情与交易接口</li><li><a href="http://www.sfit.com.cn/">上期所CTP系统</a>: 官方提供了期货和期货期权C++接口，GitHub有大量的Python、Go等语言的接口包装</li></ul><h2 id="2-2-第三方量化平台"><a href="#2-2-第三方量化平台" class="headerlink" title="2.2 第三方量化平台"></a>2.2 第三方量化平台</h2><table><thead><tr><th align="center">主流平台</th><th align="center">面向市场</th><th align="center">量化投研</th><th align="center">实盘交易</th><th align="center">数据范围</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">掘金量化</td><td align="center">证券、期货</td><td align="center">支持<strong>tick</strong>、分钟、日线级别的回测</td><td align="center">部分券商，支持股票、两融、可转债、期货的本地实盘</td><td align="center">K线(分钟、日)、Tick快照、财务、<strong>期货</strong></td><td align="center">券商申请</td></tr><tr><td align="center">迅投QMT</td><td align="center">证券、期货</td><td align="center">支持分钟、日线级别的回测</td><td align="center">大部分券商，支持股票、两融、可转债、期货的本地实盘</td><td align="center">K线(分钟、日)、Tick快照、财务、<strong>期货</strong>、<strong>期权</strong></td><td align="center">券商免费申请</td></tr><tr><td align="center">恒生PTrade</td><td align="center">证券、期货</td><td align="center">支持分钟、日线级别的回测</td><td align="center">大部分券商，支持股票、两融、可转债的券商托管实盘</td><td align="center">K线(分钟、日)、Tick快照、财务、<strong>期货</strong>、<strong>期权</strong></td><td align="center">券商免费申请</td></tr><tr><td align="center">聚宽量化</td><td align="center">证券、期货</td><td align="center">支持<strong>tick</strong>、分钟、日线级别的回测</td><td align="center">一创聚宽(券商托管)</td><td align="center">K线(分钟、日)、Tick快照、财务、<strong>因子</strong> 、<strong>期货</strong>、<strong>期权</strong></td><td align="center">数据需购买</td></tr><tr><td align="center">米筐量化</td><td align="center">证券、期货</td><td align="center">支持<strong>tick</strong>、分钟、日线级别的回测，因子投研</td><td align="center"></td><td align="center">K线(分钟、日)、Tick快照、财务、<strong>因子</strong> 、<strong>期货</strong>、<strong>期权</strong></td><td align="center">数据需购买</td></tr><tr><td align="center">优矿量化</td><td align="center">证券、期货</td><td align="center">支持分钟、日线级别的回测，因子投研</td><td align="center"></td><td align="center">K线(日)、财务、<strong>因子</strong> 、<strong>期货</strong></td><td align="center">数据需购买</td></tr><tr><td align="center">BigQuant</td><td align="center">证券</td><td align="center">支持日线级别的回测，因子投研</td><td align="center">湘财证券(券商托管)</td><td align="center">K线(分钟、日)、财务、<strong>因子</strong></td><td align="center">回测资源需购买</td></tr><tr><td align="center">Quant360(宽睿)</td><td align="center">证券</td><td align="center">支持<strong>tick</strong>、分钟、日线级别的回测，模拟撮合历史行情</td><td align="center">部分券商(API接口)</td><td align="center">K线(分钟、日)、Tick快照</td><td align="center">较高的申请门槛</td></tr><tr><td align="center">同花顺iFind</td><td align="center">证券、期货、<strong>外盘</strong></td><td align="center"></td><td align="center"></td><td align="center">K线(分钟、日)、财务、<strong>因子</strong>、<strong>板块</strong>、<strong>期货</strong>、<strong>期权</strong></td><td align="center">购买</td></tr><tr><td align="center">东方财富choice数据</td><td align="center">证券、期货、<strong>外盘</strong></td><td align="center"></td><td align="center"></td><td align="center">K线(分钟、日)、财务、<strong>因子</strong>、<strong>板块</strong>、<strong>期货</strong>、<strong>期权</strong></td><td align="center">购买</td></tr><tr><td align="center">天勤量化</td><td align="center">期货、股票</td><td align="center">支持<strong>tick</strong>、分钟、日线级别的回测</td><td align="center">大部分期货公司(不需要用户主动做CTP穿透式认证)</td><td align="center">K线(分钟、日)、Tick快照、财务、<strong>期货</strong>、<strong>期权</strong></td><td align="center"></td></tr><tr><td align="center">vn.py</td><td align="center">期货</td><td align="center">CTA回测</td><td align="center">大部分期货公司(需要用户主动做CTP穿透式认证获取<strong>授权码</strong>)</td><td align="center"><strong>期货</strong>K线(分钟、日)、Tick快照、<strong>期权</strong></td><td align="center">外部数据</td></tr><tr><td align="center">真格量化</td><td align="center">期货</td><td align="center">CTA回测</td><td align="center">大部分期货公司(不需要用户主动做CTP穿透式认证)</td><td align="center"><strong>期货</strong>K线(分钟、日)、Tick快照、<strong>期权</strong></td><td align="center"></td></tr></tbody></table><h1 id="三、开放资源"><a href="#三、开放资源" class="headerlink" title="三、开放资源"></a>三、开放资源</h1><h2 id="3-1-机器学习量化交易框架"><a href="#3-1-机器学习量化交易框架" class="headerlink" title="3.1 机器学习量化交易框架"></a>3.1 机器学习量化交易框架</h2><ul><li><a href="https://github.com/microsoft/qlib">深度学习框架：微软QLib</a>，详情：<a href="https://github.com/microsoft/qlib">https://github.com/microsoft/qlib</a></li><li><a href="https://github.com/AI4Finance-Foundation/FinRL">强化学习框架：FinRL</a>，详情：<a href="https://github.com/AI4Finance-Foundation/FinRL">https://github.com/AI4Finance-Foundation/FinRL</a></li></ul><h2 id="3-2-技术分析库"><a href="#3-2-技术分析库" class="headerlink" title="3.2 技术分析库"></a>3.2 技术分析库</h2><ul><li><a href="http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz">TA-Lib : Technical Analysis Library</a> ，详情：<a href="http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz">http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz</a></li><li><a href="https://github.com/mrjbq7/ta-lib">Python wrapper for TA-LIB</a>，详情：<a href="https://github.com/mrjbq7/ta-lib">https://github.com/mrjbq7/ta-lib</a></li><li><a href="https://github.com/twopirllc/pandas-ta">Pandas TA - A Technical Analysis Library in Python 3</a>，详情：<a href="https://github.com/twopirllc/pandas-ta">https://github.com/twopirllc/pandas-ta</a></li></ul><h2 id="3-3-金融领域的NLP预训练模型"><a href="#3-3-金融领域的NLP预训练模型" class="headerlink" title="3.3 金融领域的NLP预训练模型"></a>3.3 金融领域的NLP预训练模型</h2><ul><li><a href="https://github.com/Langboat/Mengzi">澜舟科技 Mengzi-BERT-base-fin</a>：实体识别、情感/舆情预测)，详情：<a href="https://github.com/Langboat/Mengzi">https://github.com/Langboat/Mengzi</a></li><li><a href="https://github.com/valuesimplex/FinBERT">熵简科技 FinBERT 1.0</a>：实体识别、情感/舆情预测，详情：<a href="https://github.com/valuesimplex/FinBERT">https://github.com/valuesimplex/FinBERT</a></li></ul><h2 id="3-4-数据源"><a href="#3-4-数据源" class="headerlink" title="3.4 数据源"></a>3.4 数据源</h2><ul><li><a href="https://github.com/akfamily/akshare">akshare</a>：爬虫数据汇总(东方财富、新浪财经等)</li><li><a href="https://github.com/alvarobartt/investpy">investpy</a>：英为财情数据爬虫，主要特色为包含外盘股指期货、利率期货、商品期货、外汇利率等</li><li><a href="https://tushare.pro/">tushare</a>：Tushare大数据开放社区</li><li><a href="https://eodhistoricaldata.com/">eod历史数据</a>：全球市场的股票、ETF、指数K线数据</li><li><a href="https://site.financialmodelingprep.com/developer/docs">Financial Modeling Prep美股数据</a>：美股市场的股票、ETF、指数K线数据</li></ul><h2 id="3-5-数据库"><a href="#3-5-数据库" class="headerlink" title="3.5 数据库"></a>3.5 数据库</h2><ul><li><a href="https://clickhouse.com/">Clickhouse数据仓库</a></li><li><a href="https://github.com/mymarilyn/clickhouse-driver">ClickHouse Python接口</a></li><li><a href="https://github.com/maximdanilchenko/aiochclient">ClickHouse 异步Python接口 aiochclient</a></li><li><a href="https://github.com/aio-libs/aiomysql">MySQL 异步Python接口 aiomysql</a></li></ul><h2 id="3-6-下单接口"><a href="#3-6-下单接口" class="headerlink" title="3.6 下单接口"></a>3.6 下单接口</h2><ul><li><strong>券商网页版下单</strong>: 网页版、公众号等地方，部分券商内嵌了下单界面，可逆向分析获取接口</li><li><a href="http://www.thinktrader.net/">迅投QMT</a>：A股量化框架下单、MiniQMT接口下单，详情：<a href="http://www.thinktrader.net/">http://www.thinktrader.net/</a></li><li><a href="https://www.isimu123.com/">恒生云纪PTrade</a>：A股量化框架下单，详情：<a href="https://www.isimu123.com/">https://www.isimu123.com/</a></li><li><a href="https://github.com/shidenggui/easytrader">同花顺EasyTrader</a>：A股模拟鼠标点击下单，详情：<a href="https://github.com/shidenggui/easytrader">https://github.com/shidenggui/easytrader</a></li><li><a href="https://growth.futuhainan.com/new-customer-2101/share?code=2f5f3867fbdacf7603f829448fdbf96c&global_content=%7B%22promote_id%22:10002,%22sub_promote_id%22:1,%22promote_type%22:1,%22promote_content%22:%225%22,%22promote_manager%22:0,%22sub_promote_manager%22:0,%22invite%22:0%7D&channel=1733&subchannel=1">富途OpenAPI</a>：提供港、美、A股通的API下单接口，部分行情需购买，佣金较贵，详情：<a href="https://openapi.futunn.com/futu-api-doc/">https://openapi.futunn.com/futu-api-doc/</a></li><li><a href="https://quant.itiger.com/">老虎量化</a>：提供港、美、A股通的API下单接口，部分行情需购买，佣金较贵，详情：<a href="https://quant.itiger.com/">https://quant.itiger.com/</a></li><li><a href="https://github.com/erdewit/ib_insync">盈透证券</a> :提供港、美、A股通(股票、权证、期货、期权)的API下单接口，佣金一般，详情：<a href="https://github.com/erdewit/ib_insync">https://github.com/erdewit/ib_insync</a></li><li><a href="https://open.longbridgeapp.com/">长桥量化</a>: 提供港、美、A股通的API下单接口，佣金一般，详情：<a href="https://open.longbridgeapp.com/">https://open.longbridgeapp.com/</a></li><li><a href="https://github.com/tedchou12/webull">微牛接口</a>: 提供港、美、A股通的API下单接口，美股和美国期权0佣金，整体佣金较低，详情：<a href="https://github.com/tedchou12/webull">https://github.com/tedchou12/webull</a></li><li><a href="http://opt.investassistant.com/miningopt/NewUserActivity/index?channelopen=YQAPP&share=266914&hmsr=wechat&hmpl=66673150d46089d8&hmcu=miningopt&hmkw=&hmci=&miningfrom=wechat&trader=mining_p">尊嘉量化</a>: 提供港、美、A股通的API下单接口，港股0佣金，整体佣金较低，详情：<a href="https://www.zvsts.com/OpenAPI">https://www.zvsts.com/OpenAPI</a></li></ul><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。</p><p><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>资源</tag>
      
      <tag>量化交易</tag>
      
      <tag>量化投研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于xtdata实时行情生成技术因子</title>
    <link href="/2022/09/11/%E5%9F%BA%E4%BA%8Extdata%E5%AE%9E%E6%97%B6%E8%A1%8C%E6%83%85%E7%94%9F%E6%88%90%E6%8A%80%E6%9C%AF%E5%9B%A0%E5%AD%90/"/>
    <url>/2022/09/11/%E5%9F%BA%E4%BA%8Extdata%E5%AE%9E%E6%97%B6%E8%A1%8C%E6%83%85%E7%94%9F%E6%88%90%E6%8A%80%E6%9C%AF%E5%9B%A0%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在上文实时行情服务的基础上，本文继续介绍如何将研究阶段的离线因子计算盘中实时化，以供策略使用。</p></blockquote><h2 id="一、行情数据缓存"><a href="#一、行情数据缓存" class="headerlink" title="一、行情数据缓存"></a>一、行情数据缓存</h2><h3 id="1-1-获取A股市场所有ticker"><a href="#1-1-获取A股市场所有ticker" class="headerlink" title="1.1 获取A股市场所有ticker"></a>1.1 获取A股市场所有ticker</h3><p>获取沪深指数、沪深A股、沪深债券、板块指数和沪深基金中的所有股票：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_all_a_tickers</span>():</span><br>    <span class="hljs-comment"># 沪深指数</span><br>    index_ticker = xtdata.get_stock_list_in_sector(<span class="hljs-string">&quot;沪深指数&quot;</span>)<br>    <span class="hljs-comment"># 沪深A股</span><br>    stock_ticker = xtdata.get_stock_list_in_sector(<span class="hljs-string">&quot;沪深A股&quot;</span>)<br>    <span class="hljs-comment"># 沪深债券</span><br>    bond_ticker = xtdata.get_stock_list_in_sector(<span class="hljs-string">&quot;沪深债券&quot;</span>)<br>    <span class="hljs-comment"># 板块指数</span><br>    sector_ticker = xtdata.get_stock_list_in_sector(<span class="hljs-string">&quot;板块指数&quot;</span>)<br>    <span class="hljs-comment"># 沪深基金</span><br>    fund_ticker = xtdata.get_stock_list_in_sector(<span class="hljs-string">&quot;沪深基金&quot;</span>)<br>    tickers = index_ticker + stock_ticker + bond_ticker + sector_ticker + fund_ticker<br>    <span class="hljs-keyword">return</span> tickers<br></code></pre></td></tr></table></figure><h3 id="1-2-封装下载接口"><a href="#1-2-封装下载接口" class="headerlink" title="1.2 封装下载接口"></a>1.2 封装下载接口</h3><p>下载时可选数据的起始时间，这里按日期输入，形式为’20220909000001’,意味着补充20220909日之后(包含当天)的历史1分钟K线。如果不想下载所有的股票，可替换下面代码中的<code>all_a_tickers</code>，比如沪深300(<code>hs300_component</code>)、中证500(<code>csi500_component</code>)、中证1000(<code>csi1000_component</code>)等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@api.route(<span class="hljs-params"><span class="hljs-string">&#x27;/download/kline/1m&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download_kline_1m</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    下载A股市场全部1分钟K线</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    start_time = request.args.get(<span class="hljs-string">&quot;start_time&quot;</span>, datetime.datetime.now().strftime(<span class="hljs-string">&quot;%Y%m%d000001&quot;</span>))<br>    <br>    <span class="hljs-keyword">for</span> ticker <span class="hljs-keyword">in</span> tqdm(all_a_tickers):<br>       xtdata.download_history_data(stock_code=ticker, period=<span class="hljs-string">&#x27;1m&#x27;</span>, start_time=start_time, end_time=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> response.json(&#123;<span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-built_in">len</span>(all_a_tickers)&#125;)<br></code></pre></td></tr></table></figure><h3 id="1-3-请求测试"><a href="#1-3-请求测试" class="headerlink" title="1.3 请求测试"></a>1.3 请求测试</h3><p>在浏览器中请求：<code>http://127.0.0.1:7800/api/xtdata/download/kline/1m?start_time=20160101000001</code>，便可下载2016年之后的所有数据(因请求所有数据，等待时间较长)，后面要更新的话，只需每天盘前请求一下，不需传入参数<code>start_time</code>。</p><h2 id="二、实时因子计算"><a href="#二、实时因子计算" class="headerlink" title="二、实时因子计算"></a>二、实时因子计算</h2><h3 id="2-1-获取昨日收盘价"><a href="#2-1-获取昨日收盘价" class="headerlink" title="2.1 获取昨日收盘价"></a>2.1 获取昨日收盘价</h3><p>由于盘中请求的数据不包含昨天的收盘价，因此需要每天提前获取昨天的价格，以便方便计算当日涨跌幅：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_last_day_price</span>(<span class="hljs-params">tickers=[<span class="hljs-string">&#x27;159919.SZ&#x27;</span>, <span class="hljs-string">&#x27;510050.SH&#x27;</span>, <span class="hljs-string">&#x27;000810.SZ&#x27;</span>], trade_day=datetime.date.today(<span class="hljs-params"></span>).strftime(<span class="hljs-params"><span class="hljs-string">&quot;%Y%m%d&quot;</span></span>)</span>):</span><br>    kline_data = xtdata.get_market_data(field_list=[<span class="hljs-string">&#x27;close&#x27;</span>], stock_list=tickers, period=<span class="hljs-string">&#x27;1m&#x27;</span>, start_time=<span class="hljs-string">&#x27;&#x27;</span>, end_time=trade_day + <span class="hljs-string">&#x27;080000&#x27;</span>, count=<span class="hljs-number">1</span>, dividend_type=<span class="hljs-string">&#x27;front&#x27;</span>, fill_data=<span class="hljs-literal">True</span>)<br>    result = &#123;&#125;<br>    <span class="hljs-keyword">for</span> ticker <span class="hljs-keyword">in</span> tickers:<br>        result[ticker] = kline_data[<span class="hljs-string">&#x27;close&#x27;</span>].loc[ticker].values[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><h3 id="2-2-日内实时特征计算"><a href="#2-2-日内实时特征计算" class="headerlink" title="2.2 日内实时特征计算"></a>2.2 日内实时特征计算</h3><p>我们将之前离线研究阶段的相关技术因子改用xtdata实时获取，考虑到特征数据的一致性，这里每次产生的因子都进行了放缩操作，在应用到模型中在进行逆操作，这里大家可以改成自己的实现方式。可传入多个ticker，用<code>,</code>将他们拼接到一起,如”159919.SZ,510050.SH,000810.SZ”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@api.route(<span class="hljs-params"><span class="hljs-string">&#x27;/feature/tech&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">feature_tech</span>(<span class="hljs-params">request, tickers=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    计算实时技术特征</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> tickers == <span class="hljs-string">&#x27;&#x27;</span>:<br>        tickers = request.args.get(<span class="hljs-string">&quot;tickers&quot;</span>, <span class="hljs-string">&quot;159919.SZ,510050.SH,000810.SZ&quot;</span>)<br>    stock_list = tickers.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>    start_time = request.args.get(<span class="hljs-string">&quot;start_time&quot;</span>, datetime.datetime.now().strftime(<span class="hljs-string">&quot;%Y%m%d000001&quot;</span>))<br>    end_time = request.args.get(<span class="hljs-string">&quot;end_time&quot;</span>, datetime.datetime.now().strftime(<span class="hljs-string">&quot;%Y%m%d%H%M%S&quot;</span>))<br><br>    kline_data = xtdata.get_market_data(field_list=[<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>], stock_list=stock_list, period=<span class="hljs-string">&#x27;1m&#x27;</span>, start_time=start_time, end_time=end_time)<br><br>    features = []<br>    <span class="hljs-keyword">for</span> stock <span class="hljs-keyword">in</span> stock_list:<br>        kline_df = pd.concat([kline_data[i].loc[stock].T <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>]], axis=<span class="hljs-number">1</span>)<br>        kline_df.columns = [<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>]<br>        kline_df[<span class="hljs-string">&#x27;trade_time&#x27;</span>] = kline_df[<span class="hljs-string">&#x27;time&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: datetime.datetime.fromtimestamp(x / <span class="hljs-number">1000.0</span>))<br>        ticker= stock.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>] + &#123;<span class="hljs-string">&#x27;SH&#x27;</span>: <span class="hljs-string">&#x27;.XSHG&#x27;</span>, <span class="hljs-string">&#x27;SZ&#x27;</span>: <span class="hljs-string">&#x27;.XSHE&#x27;</span>&#125;.get(stock.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>])<br>        trade_date = kline_df[<span class="hljs-string">&#x27;trade_time&#x27;</span>].iloc[<span class="hljs-number">0</span>].strftime(<span class="hljs-string">&quot;%Y-%m-%d&quot;</span>)<br>        trade_time = <span class="hljs-built_in">int</span>(kline_df[<span class="hljs-string">&#x27;time&#x27;</span>].iloc[-<span class="hljs-number">1</span>] // <span class="hljs-number">1000</span>)<br>        kline_df[<span class="hljs-string">&#x27;price_last&#x27;</span>] = last_day_price.get(stock, <span class="hljs-literal">None</span>)<br>        kline_df[<span class="hljs-string">&#x27;minute_avg&#x27;</span>] = (kline_df[<span class="hljs-string">&#x27;high&#x27;</span>] + kline_df[<span class="hljs-string">&#x27;low&#x27;</span>]) / <span class="hljs-number">2</span><br>        kline_df[<span class="hljs-string">&#x27;minutes_of_day&#x27;</span>] = kline_df.trade_time.dt.hour * <span class="hljs-number">60</span> + kline_df.trade_time.dt.minute<br><br>        kline_df[<span class="hljs-string">&#x27;price_open&#x27;</span>] = kline_df[<span class="hljs-string">&#x27;minute_avg&#x27;</span>].iloc[<span class="hljs-number">0</span>]<br>        kline_df[<span class="hljs-string">&#x27;pct_daily&#x27;</span>] = (kline_df[<span class="hljs-string">&#x27;close&#x27;</span>] - kline_df[<span class="hljs-string">&#x27;price_last&#x27;</span>]).div(kline_df[<span class="hljs-string">&#x27;price_last&#x27;</span>])<br>        kline_df[<span class="hljs-string">&#x27;pct_intraday&#x27;</span>] = (kline_df[<span class="hljs-string">&#x27;close&#x27;</span>] - kline_df[<span class="hljs-string">&#x27;price_open&#x27;</span>]).div(kline_df[<span class="hljs-string">&#x27;price_open&#x27;</span>])<br><br>        pct_daily = kline_df[<span class="hljs-string">&#x27;pct_daily&#x27;</span>].iloc[-<span class="hljs-number">1</span>]<br>        pct_intraday = kline_df[<span class="hljs-string">&#x27;pct_intraday&#x27;</span>].iloc[-<span class="hljs-number">1</span>]<br>        rsi_3 = (kline_df.ta.rsi(length=<span class="hljs-number">3</span>) / <span class="hljs-number">100</span>).fillna(<span class="hljs-number">0.5</span>).iloc[-<span class="hljs-number">1</span>]<br>        cmo_5 = (kline_df.ta.cmo(length=<span class="hljs-number">5</span>) / <span class="hljs-number">100</span>).fillna(<span class="hljs-number">0.</span>).iloc[-<span class="hljs-number">1</span>]<br>        cmo_8 = (kline_df.ta.cmo(length=<span class="hljs-number">8</span>) / <span class="hljs-number">100</span>).fillna(<span class="hljs-number">0.</span>).iloc[-<span class="hljs-number">1</span>]<br>        kdj_9_3 = (kline_df.ta.kdj(<span class="hljs-built_in">min</span>(<span class="hljs-number">9</span>, <span class="hljs-built_in">len</span>(kline_df)), <span class="hljs-number">3</span>) / <span class="hljs-number">100</span>).fillna(<span class="hljs-number">0.5</span>).iloc[-<span class="hljs-number">1</span>].tolist() <br>        willr_3 = (kline_df.ta.willr(length=<span class="hljs-number">3</span>) / <span class="hljs-number">100</span>).clip(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>).fillna(-<span class="hljs-number">0.5</span>).iloc[-<span class="hljs-number">1</span>]<br>        willr_5 = (kline_df.ta.willr(length=<span class="hljs-number">5</span>) / <span class="hljs-number">100</span>).clip(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>).fillna(-<span class="hljs-number">0.5</span>).iloc[-<span class="hljs-number">1</span>]<br>        willr_10 = (kline_df.ta.willr(length=<span class="hljs-built_in">min</span>(<span class="hljs-number">10</span>, <span class="hljs-built_in">len</span>(kline_df))) / <span class="hljs-number">100</span>).clip(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>).fillna(-<span class="hljs-number">0.5</span>).iloc[-<span class="hljs-number">1</span>]<br>        dpo_5 = (kline_df.ta.dpo(length=<span class="hljs-number">5</span>, lookahead=<span class="hljs-literal">False</span>) * <span class="hljs-number">10</span>).clip(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>).fillna(<span class="hljs-number">0.0</span>).iloc[-<span class="hljs-number">1</span>]<br>        log_return_10 = (kline_df.ta.log_return(length=<span class="hljs-number">10</span>) * <span class="hljs-number">10</span>).clip(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>).fillna(<span class="hljs-number">0.</span>).iloc[-<span class="hljs-number">1</span>]<br>        log_return_5 = (kline_df.ta.log_return(length=<span class="hljs-number">5</span>) * <span class="hljs-number">10</span>).clip(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>).fillna(<span class="hljs-number">0.</span>).iloc[-<span class="hljs-number">1</span>]<br>        log_return_3 = (kline_df.ta.log_return(length=<span class="hljs-number">3</span>) * <span class="hljs-number">10</span>).clip(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>).fillna(<span class="hljs-number">0.</span>).iloc[-<span class="hljs-number">1</span>]<br>        zscore_10 = (kline_df.ta.zscore(length=<span class="hljs-number">10</span>)).clip(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>).fillna(<span class="hljs-number">0.</span>).iloc[-<span class="hljs-number">1</span>]<br>        zscore_5 = (kline_df.ta.zscore(length=<span class="hljs-number">5</span>)).clip(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>).fillna(<span class="hljs-number">0.</span>).iloc[-<span class="hljs-number">1</span>]<br>        zscore_3 = (kline_df.ta.zscore(length=<span class="hljs-number">3</span>)).clip(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>).fillna(<span class="hljs-number">0.</span>).iloc[-<span class="hljs-number">1</span>]<br>        pct_volatility = (<span class="hljs-number">10</span> * (kline_df[<span class="hljs-string">&#x27;high&#x27;</span>] - kline_df[<span class="hljs-string">&#x27;low&#x27;</span>]).div(kline_df[<span class="hljs-string">&#x27;minute_avg&#x27;</span>])).clip(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>).fillna(<span class="hljs-number">0.</span>).iloc[-<span class="hljs-number">1</span>]<br>        rolling_pct_volatility_3 =  (<span class="hljs-number">20</span> * (kline_df[<span class="hljs-string">&#x27;high&#x27;</span>].rolling(<span class="hljs-number">3</span>, min_periods=<span class="hljs-number">1</span>).<span class="hljs-built_in">max</span>() - kline_df[<span class="hljs-string">&#x27;low&#x27;</span>].rolling(<span class="hljs-number">3</span>, min_periods=<span class="hljs-number">1</span>).<span class="hljs-built_in">min</span>()).div(kline_df[<span class="hljs-string">&#x27;minute_avg&#x27;</span>])).clip(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>).fillna(<span class="hljs-number">0.</span>).iloc[-<span class="hljs-number">1</span>]<br>        rolling_pct_volatility_5 =  (<span class="hljs-number">20</span> * (kline_df[<span class="hljs-string">&#x27;high&#x27;</span>].rolling(<span class="hljs-number">5</span>, min_periods=<span class="hljs-number">1</span>).<span class="hljs-built_in">max</span>() - kline_df[<span class="hljs-string">&#x27;low&#x27;</span>].rolling(<span class="hljs-number">5</span>, min_periods=<span class="hljs-number">1</span>).<span class="hljs-built_in">min</span>()).div(kline_df[<span class="hljs-string">&#x27;minute_avg&#x27;</span>])).clip(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>).fillna(<span class="hljs-number">0.</span>).iloc[-<span class="hljs-number">1</span>]<br>        rolling_pct_volatility_10 =  (<span class="hljs-number">20</span> * (kline_df[<span class="hljs-string">&#x27;high&#x27;</span>].rolling(<span class="hljs-number">10</span>, min_periods=<span class="hljs-number">1</span>).<span class="hljs-built_in">max</span>() - kline_df[<span class="hljs-string">&#x27;low&#x27;</span>].rolling(<span class="hljs-number">10</span>, min_periods=<span class="hljs-number">1</span>).<span class="hljs-built_in">min</span>()).div(kline_df[<span class="hljs-string">&#x27;minute_avg&#x27;</span>])).clip(-<span class="hljs-number">3.1</span>, <span class="hljs-number">3.1</span>).fillna(<span class="hljs-number">0.</span>).iloc[-<span class="hljs-number">1</span>]<br><br>        feature = [ticker, trade_date, trade_time] +  (np.array([pct_daily, pct_intraday, rsi_3 , cmo_5, cmo_8] + kdj_9_3 +[willr_3, willr_5, willr_10, dpo_5, log_return_3, log_return_5, log_return_10, zscore_3, zscore_5, zscore_10, pct_volatility, rolling_pct_volatility_3, rolling_pct_volatility_5, rolling_pct_volatility_10]) * <span class="hljs-number">10000</span>).clip(-<span class="hljs-number">2</span>**<span class="hljs-number">15</span>, <span class="hljs-number">2</span>**<span class="hljs-number">15</span>-<span class="hljs-number">1</span>).<span class="hljs-built_in">round</span>().tolist()<br>        features.append(feature)<br>    <span class="hljs-keyword">return</span> response.json(&#123;<span class="hljs-string">&quot;data&quot;</span>: features&#125;)<br><br></code></pre></td></tr></table></figure><h3 id="2-3-请求测试"><a href="#2-3-请求测试" class="headerlink" title="2.3 请求测试"></a>2.3 请求测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">data = requests.get(<span class="hljs-string">&#x27;http://127.0.0.1:7800/api/xtdata/feature/tech?start_time=20220908000001&amp;end_time=20220908143000&amp;tickers=000810.SZ&#x27;</span>)<br><span class="hljs-built_in">print</span>(data.json())<br><br>&#123;<span class="hljs-string">&#x27;data&#x27;</span>: [[<span class="hljs-string">&#x27;000810.XSHE&#x27;</span>, <span class="hljs-string">&#x27;2022-09-08&#x27;</span>, <span class="hljs-number">1662618600</span>, <span class="hljs-number">213.0</span>, -<span class="hljs-number">73.0</span>, <span class="hljs-number">7815.0</span>, <span class="hljs-number">2829.0</span>, <span class="hljs-number">1124.0</span>, <span class="hljs-number">5332.0</span>, <span class="hljs-number">3403.0</span>, <span class="hljs-number">9188.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, -<span class="hljs-number">2727.0</span>, <span class="hljs-number">4200.0</span>, <span class="hljs-number">237.0</span>, <span class="hljs-number">189.0</span>, -<span class="hljs-number">142.0</span>, <span class="hljs-number">8321.0</span>, <span class="hljs-number">13324.0</span>, <span class="hljs-number">15665.0</span>, <span class="hljs-number">95.0</span>, <span class="hljs-number">757.0</span>, <span class="hljs-number">757.0</span>, <span class="hljs-number">1041.0</span>]]&#125;<br></code></pre></td></tr></table></figure><hr><p>至此，我们完成了在实时行情的基础上提取实时的技术面特征，搭建实时量化交易系统。完整可运行程序请点击<a href="https://github.com/ai4trade/XtQuant/blob/main/src/app_xtdata.py">阅读原文</a>获取，一些细节问题，比如程序定时运行，定时爬取数据，后面有机会进一步完善。</p><p>PS：之前陆续收到不少小伙伴的私聊，为了方便大家交流，特意建了一个微信群，大家如有需要，可在公众号下方的菜单<code>交流群</code>获得入群方式。</p><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="https://mp.weixin.qq.com/s/1VZJXPG-o0LHTsnTeuQ49Q">基于xtdata搭建实时行情请求服务</a></li><li><a href="https://mp.weixin.qq.com/s/PPduk4xPcix9USW9HmUpHw">利用pandas_ta自动提取技术面特征</a></li></ul><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。</p><p><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>迅投QMT</tag>
      
      <tag>量化交易</tag>
      
      <tag>行情接口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于xtdata搭建实时行情请求服务</title>
    <link href="/2022/09/10/%E5%9F%BA%E4%BA%8Extdata%E6%90%AD%E5%BB%BA%E5%AE%9E%E6%97%B6%E8%A1%8C%E6%83%85%E8%AF%B7%E6%B1%82%E6%9C%8D%E5%8A%A1/"/>
    <url>/2022/09/10/%E5%9F%BA%E4%BA%8Extdata%E6%90%AD%E5%BB%BA%E5%AE%9E%E6%97%B6%E8%A1%8C%E6%83%85%E8%AF%B7%E6%B1%82%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍如何将xtquant的mini客户端的行情功能以Web服务的形式暴露出来供查询，并给出一个完整可运行的案例。</p></blockquote><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ul><li>开启客户端：XtMiniQmt.exe，可无需登录，可在云服务器中开启</li><li>安装python库<ul><li>xtquant: 拷贝至使用的Python库中</li><li>sanic, aiohttp: web服务框架</li><li>akshare: 数据源封装接口</li><li>pandas-market-calendars: 交易所日历</li><li>pandas: 数据分析工具</li></ul></li></ul><h2 id="二、程序启动"><a href="#二、程序启动" class="headerlink" title="二、程序启动"></a>二、程序启动</h2><p>在sanic中，我们可以建立一个监听器，在程序启动前执行一些全局化的操作, 这里我们可以将订阅全推市场行情放到这里，这样的话每次启动都会自动执行，订阅时返回一个订阅ID，为了避免内存泄漏，在程序结束时我们要记得使用unsubscribe_quote接口将这些订阅取消。</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@api.listener(<span class="hljs-params"><span class="hljs-string">&#x27;before_server_start&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">before_server_start</span>(<span class="hljs-params">app, loop</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;全局共享session&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">global</span> session, subscribe_ids, hs300_component, csi500_component, csi1000_component<br>    jar = aiohttp.CookieJar(unsafe=<span class="hljs-literal">True</span>)<br>    session = aiohttp.ClientSession(cookie_jar=jar, connector=aiohttp.TCPConnector(ssl=<span class="hljs-literal">False</span>))<br>    subscribe_ids = []<br>    subscribe_ids.append(xtdata.subscribe_whole_quote([<span class="hljs-string">&#x27;SH&#x27;</span>, <span class="hljs-string">&#x27;SZ&#x27;</span>, <span class="hljs-string">&#x27;SHO&#x27;</span>, <span class="hljs-string">&#x27;SZO&#x27;</span>, <span class="hljs-string">&#x27;HK&#x27;</span>, <span class="hljs-string">&#x27;IF&#x27;</span>, <span class="hljs-string">&#x27;ZF&#x27;</span>, <span class="hljs-string">&#x27;DF&#x27;</span>, <span class="hljs-string">&#x27;SF&#x27;</span>]))<br>    hs300_component, csi500_component, csi1000_component = get_a_index_component()<br><br><span class="hljs-meta">@api.listener(<span class="hljs-params"><span class="hljs-string">&#x27;after_server_stop&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">after_server_stop</span>(<span class="hljs-params">app, loop</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;关闭session&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> seq_num <span class="hljs-keyword">in</span> subscribe_ids:<br>        xtdata.unsubscribe_quote(seq_num)<br>    <span class="hljs-keyword">await</span> session.close()<br></code></pre></td></tr></table></figure><h2 id="三、关键功能"><a href="#三、关键功能" class="headerlink" title="三、关键功能"></a>三、关键功能</h2><h3 id="3-1-行情订阅"><a href="#3-1-行情订阅" class="headerlink" title="3.1 行情订阅"></a>3.1 行情订阅</h3><p>对单个标的，我们使用订阅的方式，可获取tick/kline行情：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@api.route(<span class="hljs-params"><span class="hljs-string">&#x27;/subscribe&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">subscribe</span>(<span class="hljs-params">request, ticker_input=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    订阅单股行情: 获得tick/kline行情</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> ticker_input == <span class="hljs-string">&#x27;&#x27;</span>:<br>        ticker = request.args.get(<span class="hljs-string">&quot;ticker&quot;</span>, <span class="hljs-string">&quot;000001.SH&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        ticker = ticker_input<br>    period = request.args.get(<span class="hljs-string">&quot;period&quot;</span>, <span class="hljs-string">&quot;1m&quot;</span>)<br>    start_time = request.args.get(<span class="hljs-string">&quot;start_time&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    end_time = request.args.get(<span class="hljs-string">&quot;end_time&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    subscribe_ids.append(xtdata.subscribe_quote(ticker, period, start_time=start_time, end_time=end_time, count=<span class="hljs-number">10</span>))<br>    <span class="hljs-keyword">if</span> ticker_input == <span class="hljs-string">&#x27;&#x27;</span>:<br>        <span class="hljs-keyword">return</span> response.json(&#123;<span class="hljs-string">&quot;data&quot;</span>: subscribe_ids[-<span class="hljs-number">1</span>]&#125;)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;data&quot;</span>: subscribe_ids[-<span class="hljs-number">1</span>]&#125;<br></code></pre></td></tr></table></figure><p>进一步的，我们可以传入预定义的股票池，如沪深300成分股，批量订阅：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@api.route(<span class="hljs-params"><span class="hljs-string">&#x27;/subscribe/kline/hs300&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quote_kline_hs300</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    订阅市场行情: 沪深300成分股1分钟K线行情</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    seq_ids = []<br>    <span class="hljs-keyword">for</span> ticker <span class="hljs-keyword">in</span> hs300_component:<br>       seq_id =  <span class="hljs-keyword">await</span> subscribe(request, ticker_input=ticker)<br>       seq_ids.append(seq_id.get(<span class="hljs-string">&#x27;data&#x27;</span>, -<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">return</span> response.json(&#123;<span class="hljs-string">&quot;data&quot;</span>: seq_ids&#125;)<br></code></pre></td></tr></table></figure><h3 id="3-2-K线行情查询"><a href="#3-2-K线行情查询" class="headerlink" title="3.2 K线行情查询"></a>3.2 K线行情查询</h3><p>利用<code>get_market_data</code>接口，我们读取价格和成交量等数据，然后对每个股票组装成一个DataFrame结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@api.route(<span class="hljs-params"><span class="hljs-string">&#x27;/quote/kline&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quote_kline</span>(<span class="hljs-params">request, tickers=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    查询市场行情: 获得kline数据</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> tickers == <span class="hljs-string">&#x27;&#x27;</span>:<br>        tickers = request.args.get(<span class="hljs-string">&quot;tickers&quot;</span>, <span class="hljs-string">&quot;IM00.IF,159919.SZ,00700.HK,10004407.SHO&quot;</span>)<br>    period = request.args.get(<span class="hljs-string">&quot;period&quot;</span>, <span class="hljs-string">&quot;1m&quot;</span>)<br>    start_time = request.args.get(<span class="hljs-string">&quot;start_time&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    end_time = request.args.get(<span class="hljs-string">&quot;end_time&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    count = request.args.get(<span class="hljs-string">&quot;count&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>)<br>    dividend_type = request.args.get(<span class="hljs-string">&quot;dividend_type&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>) <span class="hljs-comment"># none 不复权 front 前复权 back 后复权 front_ratio 等比前复权 back_ratio 等比后复权</span><br>    stock_list = tickers.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br><br>    kline_data = xtdata.get_market_data(field_list=[<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>], stock_list=stock_list, period=period, start_time=start_time, end_time=end_time, count=<span class="hljs-built_in">int</span>(count), dividend_type=dividend_type, fill_data=<span class="hljs-literal">True</span>)<br><br>    quote_data = &#123;&#125;<br>    <span class="hljs-keyword">for</span> stock <span class="hljs-keyword">in</span> stock_list:<br>        df = pd.concat([kline_data[i].loc[stock].T <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>]], axis=<span class="hljs-number">1</span>)<br>        df.columns = [<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>]<br>        df = df[df.volume !=<span class="hljs-number">0</span>]<br>        df[<span class="hljs-string">&#x27;time&#x27;</span>] = df[<span class="hljs-string">&#x27;time&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: datetime.datetime.fromtimestamp(x / <span class="hljs-number">1000.0</span>).strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))<br>        df[<span class="hljs-string">&#x27;ticker&#x27;</span>] = stock<br>        df = df[[<span class="hljs-string">&#x27;ticker&#x27;</span>, <span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>]].values.tolist() <br>        quote_data[stock] = df<br><br>    <span class="hljs-keyword">return</span> response.json(&#123;<span class="hljs-string">&quot;data&quot;</span>: quote_data&#125;)<br></code></pre></td></tr></table></figure><p>基于上面的实现，我们可以直接将沪深300股票的查询做进一步封装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@api.route(<span class="hljs-params"><span class="hljs-string">&#x27;/quote/kline/hs300&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quote_kline_hs300</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    查询市场行情: 沪深300成分股1分钟K线行情</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> quote_kline(request, <span class="hljs-string">&#x27;,&#x27;</span>.join(<span class="hljs-built_in">list</span>(hs300_component)))<br></code></pre></td></tr></table></figure><h3 id="3-3-Tick行情查询"><a href="#3-3-Tick行情查询" class="headerlink" title="3.3 Tick行情查询"></a>3.3 Tick行情查询</h3><p>由于订阅了全推行情，因此获取tick数据可直接使用<code>get_full_tick</code>接口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@api.route(<span class="hljs-params"><span class="hljs-string">&#x27;/quote/tick&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quote_tick</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    查询市场行情: 获得tick数据</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    tickers = request.args.get(<span class="hljs-string">&quot;tickers&quot;</span>, <span class="hljs-string">&quot;159919.SZ,00700.HK&quot;</span>)<br>    stock_list = tickers.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>    data = xtdata.get_full_tick(stock_list)<br>    <span class="hljs-keyword">return</span> response.json(&#123;<span class="hljs-string">&quot;data&quot;</span>: data&#125;)<br><br></code></pre></td></tr></table></figure><h2 id="四、功能测试"><a href="#四、功能测试" class="headerlink" title="四、功能测试"></a>四、功能测试</h2><p>启动程序，即运行<code>python app_xtdata.py</code>后，我们便可以使用<code>requests</code>库或浏览器访问数据了,<br>base_url = ‘<a href="http://172.16.0.4:7800/api/xtdata&#39;">http://172.16.0.4:7800/api/xtdata&#39;</a></p><ul><li>订阅沪深300： base_url + /subscribe/kline/hs300</li><li>查询沪深300成份股实时行情：base_url + /quote/kline/hs300<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">data = requests.get(base_url + <span class="hljs-string">&#x27;/quote/kline/hs300&#x27;</span>).json()<br><span class="hljs-built_in">print</span>(data[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;600941.SH&#x27;</span>])<br>[[<span class="hljs-string">&#x27;600941.SH&#x27;</span>, <span class="hljs-string">&#x27;2022-09-09 15:00:00&#x27;</span>, <span class="hljs-number">65.31</span>, <span class="hljs-number">65.37</span>, <span class="hljs-number">65.31</span>, <span class="hljs-number">65.37</span>, <span class="hljs-number">192</span>, <span class="hljs-number">1255104.0</span>]]<br></code></pre></td></tr></table></figure></li><li>查询tick快照行情：base_url + /quote/tick?tickers=159919.SZ,510050.SH</li><li>查询合约基础信息：base_url + /quote/instrument/detail?ticker=510300.SH<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<span class="hljs-string">&#x27;data&#x27;</span>: &#123;<span class="hljs-string">&#x27;ExchangeID&#x27;</span>: <span class="hljs-string">&#x27;SH&#x27;</span>,<br><span class="hljs-string">&#x27;InstrumentID&#x27;</span>: <span class="hljs-string">&#x27;510300&#x27;</span>,<br><span class="hljs-string">&#x27;InstrumentName&#x27;</span>: <span class="hljs-string">&#x27;沪深300ETF&#x27;</span>,<br><span class="hljs-string">&#x27;ProductID&#x27;</span>: <span class="hljs-literal">None</span>,<br><span class="hljs-string">&#x27;ProductName&#x27;</span>: <span class="hljs-literal">None</span>,<br><span class="hljs-string">&#x27;CreateDate&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br><span class="hljs-string">&#x27;OpenDate&#x27;</span>: <span class="hljs-string">&#x27;20120528&#x27;</span>,<br><span class="hljs-string">&#x27;ExpireDate&#x27;</span>: <span class="hljs-number">99999999</span>,<br><span class="hljs-string">&#x27;PreClose&#x27;</span>: <span class="hljs-number">4.101</span>,<br><span class="hljs-string">&#x27;SettlementPrice&#x27;</span>: <span class="hljs-number">4.101</span>,<br><span class="hljs-string">&#x27;UpStopPrice&#x27;</span>: <span class="hljs-number">4.511</span>,<br><span class="hljs-string">&#x27;DownStopPrice&#x27;</span>: <span class="hljs-number">3.691</span>,<br><span class="hljs-string">&#x27;FloatVolume&#x27;</span>: <span class="hljs-number">10836487700.0</span>,<br><span class="hljs-string">&#x27;TotalVolume&#x27;</span>: <span class="hljs-number">10836487700.0</span>,<br><span class="hljs-string">&#x27;LongMarginRatio&#x27;</span>: <span class="hljs-literal">None</span>,<br><span class="hljs-string">&#x27;ShortMarginRatio&#x27;</span>: <span class="hljs-literal">None</span>,<br><span class="hljs-string">&#x27;PriceTick&#x27;</span>: <span class="hljs-number">0.001</span>,<br><span class="hljs-string">&#x27;VolumeMultiple&#x27;</span>: <span class="hljs-number">1</span>,<br><span class="hljs-string">&#x27;MainContract&#x27;</span>: <span class="hljs-literal">None</span>,<br><span class="hljs-string">&#x27;LastVolume&#x27;</span>: <span class="hljs-literal">None</span>,<br><span class="hljs-string">&#x27;InstrumentStatus&#x27;</span>: <span class="hljs-number">0</span>,<br><span class="hljs-string">&#x27;IsTrading&#x27;</span>: <span class="hljs-literal">None</span>,<br><span class="hljs-string">&#x27;IsRecent&#x27;</span>: <span class="hljs-literal">None</span>&#125;&#125;<br></code></pre></td></tr></table></figure></li></ul><p>至此，我们完成了行情服务的Web封装，下篇将继续介绍如何在实时行情的基础上提取实时的技术面特征，搭建实时量化交易系统。完整可运行程序请点击阅读原文获取。</p><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="https://mp.weixin.qq.com/s/cWYXulT-daBgrDtr36CHAA">迅投QMT实时行情接口接入</a></li></ul><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。</p><p><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>迅投QMT</tag>
      
      <tag>量化交易</tag>
      
      <tag>行情接口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指数中高频行情预测和可靠性评估</title>
    <link href="/2022/08/18/%E6%8C%87%E6%95%B0%E8%A1%8C%E6%83%85%E4%B8%AD%E9%AB%98%E9%A2%91%E9%A2%84%E6%B5%8B%E5%92%8C%E5%8F%AF%E9%9D%A0%E6%80%A7%E8%AF%84%E4%BC%B0/"/>
    <url>/2022/08/18/%E6%8C%87%E6%95%B0%E8%A1%8C%E6%83%85%E4%B8%AD%E9%AB%98%E9%A2%91%E9%A2%84%E6%B5%8B%E5%92%8C%E5%8F%AF%E9%9D%A0%E6%80%A7%E8%AF%84%E4%BC%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>国内主要指数(上证50、沪深300、中证500、中证1000)均有相应的期货/期权衍生品交易品种，为高频日内交易提供了可能。本文探索利用机器学习技术预测中短期行情(10分钟以内)走势的可能性，并在验证集上评估预测效果。总体来看，短期预测的结果与真实情况具有较强的相关性，在进一步加工处理后，可作为策略信号指导期货/期权交易。</p></blockquote><h2 id="一、数据"><a href="#一、数据" class="headerlink" title="一、数据"></a>一、数据</h2><p>数据分为两类，一类是行情数据，另一类是标签数据，本节介绍这两类数据的一个基本处理情况。</p><h3 id="1-1-行情数据处理"><a href="#1-1-行情数据处理" class="headerlink" title="1.1 行情数据处理"></a>1.1 行情数据处理</h3><p>行情数据又可分为日内行情和日间行情，以及A股和美股市场，根据不同粒度抽取不同的特征。</p><h4 id="1-1-1-市场"><a href="#1-1-1-市场" class="headerlink" title="1.1.1 市场"></a>1.1.1 市场</h4><ul><li>A股市场<ul><li>主要指数:上证50、沪深300、中证500、中证1000</li><li>成分股:沪深300+中证500+中证1000，共1800支股票</li><li>ETF: 主要行业ETF以及宽基ETF</li></ul></li><li>美国市场：<ul><li>成分股: 标普500大盘股+标普400中盘股+ARK基金成分股+主流中概股，约1200只股票</li><li>ETF: 主要行业ETF以及宽基ETF</li></ul></li></ul><h4 id="1-1-2-日内和日间技术特征提取"><a href="#1-1-2-日内和日间技术特征提取" class="headerlink" title="1.1.2 日内和日间技术特征提取"></a>1.1.2 日内和日间技术特征提取</h4><p>主要使用pandas-ta提取RSI、KDJ、Willr等技术因子，以及日内涨跌速度、涨跌幅等统计因子。相关实现见文后往期文章。</p><h4 id="1-1-3-日间财务特征提取"><a href="#1-1-3-日间财务特征提取" class="headerlink" title="1.1.3 日间财务特征提取"></a>1.1.3 日间财务特征提取</h4><p>目前使用<a href="https://www.ricequant.com/doc/rqdata/python/fundamentals-dictionary.html#%E4%BC%B0%E5%80%BC%E6%9C%89%E5%85%B3%E6%8C%87%E6%A0%87">财务数据-估值有关指标</a>，进行必要的放缩处理后供机器学习模型使用。</p><p>一个小技巧是，使用log变换可将数据有效平滑，例如下面的市盈率因子：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs python">df[<span class="hljs-string">&#x27;pe_ratio_lyr_clip&#x27;</span>] = (np.sign(df[<span class="hljs-string">&#x27;pe_ratio_lyr&#x27;</span>]) * np.log1p(df[<span class="hljs-string">&#x27;pe_ratio_lyr&#x27;</span>].<span class="hljs-built_in">abs</span>()) / <span class="hljs-number">10</span>).clip(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h4 id="1-1-4-数据存储"><a href="#1-1-4-数据存储" class="headerlink" title="1.1.4 数据存储"></a>1.1.4 数据存储</h4><p>这里将行情数据进行上述加工后，存储到数据库clickhouse中，需要注意的是，使用默认的Float32格式存储，会消耗相当大的空间，尤其是分钟级的日内因子特征。因此，这里处理的技巧是将数据放缩到Short类型(-2^15 ~ 2^15 -1)，使用Int16类型节省一半空间。</p><h3 id="1-2-标签数据处理"><a href="#1-2-标签数据处理" class="headerlink" title="1.2 标签数据处理"></a>1.2 标签数据处理</h3><p>为了同时预测上证50、沪深300、中证500、中证1000在3分钟、5分钟、10分钟内1/4分位、2/4分位、3/4分位的平均收益，我们需要生成36个标签。</p><p>由于使用未来的数据进行统计，因此对每只股票、每天的日内情况，先逆序，然后移动一位排除自身，最后通过rolling滑窗的方式统计区间内的四分为值(1/4、2/4、3/4)，最后再逆序回来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data[<span class="hljs-string">&#x27;pct_rolling_3_25&#x27;</span>] = ((data_grouped[<span class="hljs-string">&#x27;minute_avg&#x27;</span>].transform(<span class="hljs-keyword">lambda</span> row: row[::-<span class="hljs-number">1</span>].shift(<span class="hljs-number">1</span>).rolling(<span class="hljs-number">3</span>, min_periods=<span class="hljs-number">1</span>).quantile(<span class="hljs-number">0.25</span>)[::-<span class="hljs-number">1</span>]) - data[<span class="hljs-string">&#x27;minute_avg&#x27;</span>]).div(data[<span class="hljs-string">&#x27;minute_avg&#x27;</span>]) * <span class="hljs-number">100000</span>).clip(-<span class="hljs-number">2</span>**<span class="hljs-number">15</span>, <span class="hljs-number">2</span>**<span class="hljs-number">15</span>-<span class="hljs-number">1</span>).<span class="hljs-built_in">round</span>()<br></code></pre></td></tr></table></figure><h2 id="二、模型"><a href="#二、模型" class="headerlink" title="二、模型"></a>二、模型</h2><p>基于上述数据，我们构建一个多标签的深度回归模型，将日内技术特征、时间特征、国内市场日间特征、美国市场日间特征、国内市场股票估值特征等因子联合建模，希望学到他们之间复杂的关系。主体的代码框架如下，其中<code>TickerEncoder</code>是一个Embedding模块，负责将所有涉及到的股票ticker编码然后映射成一个向量，<code>TimeEncoder</code>负责将时间编码成一个向量，<code>FeatureEncoder</code>则将输入的特征数据进行加工后进行池化降维，然后统一拼接到一起，通过分类器预测出36个类别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeepPredictor</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, ticker_dim=<span class="hljs-number">16</span>, depth=<span class="hljs-number">1</span>, output_dim=<span class="hljs-number">32</span>, class_num=<span class="hljs-number">36</span></span>):</span><br>        <span class="hljs-built_in">super</span>(DeepPredictor, self).__init__()<br>        self.ticker_encoder = TickerEncoder(dim=ticker_dim)<br>        self.time_encoder = TimeEncoder(dim=<span class="hljs-number">4</span>, out_dim=output_dim)<br>        self.intraday_tech_encoder = FeatureEncoder(self.ticker_encoder, tech_dim=<span class="hljs-number">18</span>, ticker_dim=ticker_dim, output_dim=output_dim, depth=depth)<br>        self.daily_tech_cn_encoder = FeatureEncoder(self.ticker_encoder, tech_dim=<span class="hljs-number">23</span>, ticker_dim=ticker_dim, output_dim=output_dim, depth=depth)<br>        self.daily_tech_us_encoder = FeatureEncoder(self.ticker_encoder, tech_dim=<span class="hljs-number">23</span>, ticker_dim=ticker_dim, output_dim=output_dim, depth=depth)<br>        self.daily_fin_cn_encoder = FeatureEncoder(self.ticker_encoder, tech_dim=<span class="hljs-number">23</span>, ticker_dim=ticker_dim, output_dim=output_dim, depth=depth)<br>        self.pooling = nn.AdaptiveAvgPool1d(<span class="hljs-number">1</span>)<br>        self.pooling2 = nn.AdaptiveMaxPool1d(<span class="hljs-number">1</span>)<br>        self.classifier = nn.Linear(in_features=output_dim * <span class="hljs-number">6</span>, out_features=class_num)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, timestamp, intraday_tech_fea, intraday_tech_ticker, daily_tech_fea_cn, daily_tech_ticker_cn, daily_fin_fea_cn, daily_fin_ticker_cn, daily_tech_fea_us, daily_tech_ticker_us</span>):</span><br>        time_out = self.time_encoder(timestamp.squeeze(<span class="hljs-number">0</span>)) <span class="hljs-comment"># seq_len * dim</span><br>        intraday_tech_out = self.intraday_tech_encoder(intraday_tech_fea.squeeze(<span class="hljs-number">0</span>), intraday_tech_ticker.squeeze(<span class="hljs-number">0</span>)) <span class="hljs-comment"># seq_len * ticker_len * dim</span><br>        intraday_tech_out1 = self.pooling(intraday_tech_out.transpose(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)).squeeze(<span class="hljs-number">2</span>) <span class="hljs-comment"># seq_len * dim</span><br>        intraday_tech_out2 = self.pooling2(intraday_tech_out.transpose(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)).squeeze(<span class="hljs-number">2</span>) <span class="hljs-comment"># seq_len * dim</span><br>        seq_len = intraday_tech_out.shape[<span class="hljs-number">0</span>]<br><br>        daily_tech_cn_out = self.daily_tech_cn_encoder(daily_tech_fea_cn, daily_tech_ticker_cn) <span class="hljs-comment"># seq_len * ticker_len * dim</span><br>        daily_tech_cn_out = self.pooling(daily_tech_cn_out.transpose(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)).squeeze(<span class="hljs-number">2</span>).repeat(seq_len, <span class="hljs-number">1</span>) <span class="hljs-comment"># seq_len * dim</span><br><br>        daily_fin_cn_out = self.daily_fin_cn_encoder(daily_fin_fea_cn, daily_fin_ticker_cn) <span class="hljs-comment"># seq_len * ticker_len * dim</span><br>        daily_fin_cn_out =  self.pooling(daily_fin_cn_out.transpose(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)).squeeze(<span class="hljs-number">2</span>).repeat(seq_len, <span class="hljs-number">1</span>) <span class="hljs-comment"># seq_len * dim</span><br><br>        daily_tech_us_out = self.daily_tech_us_encoder(daily_tech_fea_us, daily_tech_ticker_us) <span class="hljs-comment"># seq_len * ticker_len * dim</span><br>        daily_tech_us_out =  self.pooling(daily_tech_us_out.transpose(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)).squeeze(<span class="hljs-number">2</span>).repeat(seq_len, <span class="hljs-number">1</span>) <span class="hljs-comment"># seq_len * dim</span><br><br>        feature = torch.cat([time_out, intraday_tech_out1, intraday_tech_out2, daily_tech_cn_out, daily_fin_cn_out, daily_tech_us_out], dim=<span class="hljs-number">1</span>) <span class="hljs-comment"># seq_len * (dim * 6)</span><br><br>        output = self.classifier(feature)  <span class="hljs-comment"># seq_len * class_num</span><br>        <span class="hljs-keyword">return</span> output<br><br></code></pre></td></tr></table></figure><p>在训练时，我们将2016-01-05～2022-08-12间的数据进行划分，保留25天的数据作为验证集不参与训练，仅用来评估模型的实际效果。</p><h2 id="三、评估"><a href="#三、评估" class="headerlink" title="三、评估"></a>三、评估</h2><h3 id="3-1-相关性评估"><a href="#3-1-相关性评估" class="headerlink" title="3.1 相关性评估"></a>3.1 相关性评估</h3><p>计算预测结果和真实结果的皮尔逊相关系数，得到如下结果：</p><ul><li>整体相关性: 0.4319</li><li>上证50: 0.3456</li><li>沪深300: 0.4019</li><li>中证500: 0.4439</li><li>中证1000: 0.5015</li></ul><p>通常来说，相关系数的分级如下：</p><ul><li>极强相关: 0.8-1.0 </li><li>中等程度相关: 0.4-0.6</li><li>弱相关: 0.2-0.4</li><li>极弱相关或无相关: 0.0-0.2</li></ul><p>因此，从预测难易的程度上看，随着股票规模的增大，预测难度是越来越小的，中证1000指数已经具备中等程度的可预测性！</p><h3 id="3-2-具体案例分析"><a href="#3-2-具体案例分析" class="headerlink" title="3.2 具体案例分析"></a>3.2 具体案例分析</h3><p>我们以2022-08-12日当天，中证1000指数(000852.SH)的预测情况来分析，过滤出预测值大于1(涨幅大于千分之1)的记录，可以发现预测出的涨幅拐点有<code>2022-08-12 09:33:00</code>、<code>2022-08-12 10:14:00 </code>、<code>2022-08-12 10:27:00 </code>、<code>2022-08-12 10:34:00 </code>、<code>2022-08-12 11:16:00 </code>、<code>2022-08-12 13:12:00 </code>、<code>2022-08-12 13:18:00</code>、<code>2022-08-12 13:26:00</code>、<code>2022-08-12 13:48:00</code>、<code>2022-08-12 14:04:00</code>约10个，其中正向收益的有7个，因此，预测结果具有一定的利用价值。</p><table><thead><tr><th align="left">datetime</th><th align="left">metric</th><th align="right">label</th><th align="right">prediction</th></tr></thead><tbody><tr><td align="left">2022-08-12 09:33:00</td><td align="left">rolling_3_75</td><td align="right">0.64</td><td align="right">1.0458</td></tr><tr><td align="left">2022-08-12 09:33:00</td><td align="left">rolling_5_75</td><td align="right">2.14</td><td align="right">1.2227</td></tr><tr><td align="left">2022-08-12 09:33:00</td><td align="left">rolling_10_75</td><td align="right">2.1</td><td align="right">1.4303</td></tr><tr><td align="left">2022-08-12 09:44:00</td><td align="left">rolling_5_75</td><td align="right">0.4</td><td align="right">1.1881</td></tr><tr><td align="left">2022-08-12 09:44:00</td><td align="left">rolling_10_75</td><td align="right">1.02</td><td align="right">1.3878</td></tr><tr><td align="left">2022-08-12 10:14:00</td><td align="left">rolling_3_75</td><td align="right">0.53</td><td align="right">1.0332</td></tr><tr><td align="left">2022-08-12 10:14:00</td><td align="left">rolling_5_75</td><td align="right">0.48</td><td align="right">1.1049</td></tr><tr><td align="left">2022-08-12 10:14:00</td><td align="left">rolling_10_75</td><td align="right">0.24</td><td align="right">1.204</td></tr><tr><td align="left">2022-08-12 10:27:00</td><td align="left">rolling_3_75</td><td align="right">0.53</td><td align="right">1.0847</td></tr><tr><td align="left">2022-08-12 10:27:00</td><td align="left">rolling_5_50</td><td align="right">-0.01</td><td align="right">1.0816</td></tr><tr><td align="left">2022-08-12 10:27:00</td><td align="left">rolling_5_75</td><td align="right">0.5</td><td align="right">1.198</td></tr><tr><td align="left">2022-08-12 10:27:00</td><td align="left">rolling_10_75</td><td align="right">1.57</td><td align="right">1.3889</td></tr><tr><td align="left">2022-08-12 10:34:00</td><td align="left">rolling_3_50</td><td align="right">1.15</td><td align="right">1.0736</td></tr><tr><td align="left">2022-08-12 10:34:00</td><td align="left">rolling_3_75</td><td align="right">1.2</td><td align="right">1.2097</td></tr><tr><td align="left">2022-08-12 10:34:00</td><td align="left">rolling_5_50</td><td align="right">0.81</td><td align="right">1.1209</td></tr><tr><td align="left">2022-08-12 10:34:00</td><td align="left">rolling_5_75</td><td align="right">1.15</td><td align="right">1.2745</td></tr><tr><td align="left">2022-08-12 10:34:00</td><td align="left">rolling_10_50</td><td align="right">0.42</td><td align="right">1.0476</td></tr><tr><td align="left">2022-08-12 10:34:00</td><td align="left">rolling_10_75</td><td align="right">0.8</td><td align="right">1.3831</td></tr><tr><td align="left">2022-08-12 10:35:00</td><td align="left">rolling_5_75</td><td align="right">0.34</td><td align="right">1.0499</td></tr><tr><td align="left">2022-08-12 10:35:00</td><td align="left">rolling_10_75</td><td align="right">-0.1</td><td align="right">1.1661</td></tr><tr><td align="left">2022-08-12 10:51:00</td><td align="left">rolling_10_75</td><td align="right">0.36</td><td align="right">1.1327</td></tr><tr><td align="left">2022-08-12 11:16:00</td><td align="left">rolling_3_75</td><td align="right">0.45</td><td align="right">1.0056</td></tr><tr><td align="left">2022-08-12 11:16:00</td><td align="left">rolling_5_75</td><td align="right">0.45</td><td align="right">1.1815</td></tr><tr><td align="left">2022-08-12 11:16:00</td><td align="left">rolling_10_75</td><td align="right">0.41</td><td align="right">1.363</td></tr><tr><td align="left">2022-08-12 11:17:00</td><td align="left">rolling_10_75</td><td align="right">0</td><td align="right">1.055</td></tr><tr><td align="left">2022-08-12 13:12:00</td><td align="left">rolling_5_50</td><td align="right">-0.68</td><td align="right">1.0252</td></tr><tr><td align="left">2022-08-12 13:12:00</td><td align="left">rolling_5_75</td><td align="right">-0.46</td><td align="right">1.1361</td></tr><tr><td align="left">2022-08-12 13:12:00</td><td align="left">rolling_10_75</td><td align="right">0.23</td><td align="right">1.2038</td></tr><tr><td align="left">2022-08-12 13:18:00</td><td align="left">rolling_5_75</td><td align="right">0.31</td><td align="right">1.1185</td></tr><tr><td align="left">2022-08-12 13:18:00</td><td align="left">rolling_10_75</td><td align="right">1.42</td><td align="right">1.1614</td></tr><tr><td align="left">2022-08-12 13:26:00</td><td align="left">rolling_3_75</td><td align="right">0.22</td><td align="right">1.1489</td></tr><tr><td align="left">2022-08-12 13:26:00</td><td align="left">rolling_5_50</td><td align="right">-0.02</td><td align="right">1.0274</td></tr><tr><td align="left">2022-08-12 13:26:00</td><td align="left">rolling_5_75</td><td align="right">0.19</td><td align="right">1.233</td></tr><tr><td align="left">2022-08-12 13:26:00</td><td align="left">rolling_10_75</td><td align="right">-0.1</td><td align="right">1.2839</td></tr><tr><td align="left">2022-08-12 13:33:00</td><td align="left">rolling_10_75</td><td align="right">0.52</td><td align="right">1.0791</td></tr><tr><td align="left">2022-08-12 13:48:00</td><td align="left">rolling_3_75</td><td align="right">0.66</td><td align="right">1.0106</td></tr><tr><td align="left">2022-08-12 13:48:00</td><td align="left">rolling_5_50</td><td align="right">0.79</td><td align="right">1.0117</td></tr><tr><td align="left">2022-08-12 13:48:00</td><td align="left">rolling_5_75</td><td align="right">0.91</td><td align="right">1.1305</td></tr><tr><td align="left">2022-08-12 13:48:00</td><td align="left">rolling_10_75</td><td align="right">0.79</td><td align="right">1.3026</td></tr><tr><td align="left">2022-08-12 14:04:00</td><td align="left">rolling_3_25</td><td align="right">1.01</td><td align="right">1.1566</td></tr><tr><td align="left">2022-08-12 14:04:00</td><td align="left">rolling_3_50</td><td align="right">1.13</td><td align="right">1.3214</td></tr><tr><td align="left">2022-08-12 14:04:00</td><td align="left">rolling_3_75</td><td align="right">1.24</td><td align="right">1.5201</td></tr><tr><td align="left">2022-08-12 14:04:00</td><td align="left">rolling_5_25</td><td align="right">0.93</td><td align="right">1.2081</td></tr><tr><td align="left">2022-08-12 14:04:00</td><td align="left">rolling_5_50</td><td align="right">1.1</td><td align="right">1.4657</td></tr><tr><td align="left">2022-08-12 14:04:00</td><td align="left">rolling_5_75</td><td align="right">1.13</td><td align="right">1.5158</td></tr><tr><td align="left">2022-08-12 14:04:00</td><td align="left">rolling_10_25</td><td align="right">0.2</td><td align="right">1.0725</td></tr><tr><td align="left">2022-08-12 14:04:00</td><td align="left">rolling_10_50</td><td align="right">0.84</td><td align="right">1.3458</td></tr><tr><td align="left">2022-08-12 14:04:00</td><td align="left">rolling_10_75</td><td align="right">1.06</td><td align="right">1.6887</td></tr><tr><td align="left">2022-08-12 14:05:00</td><td align="left">rolling_10_75</td><td align="right">0.17</td><td align="right">1.1434</td></tr></tbody></table><h2 id="四、结论"><a href="#四、结论" class="headerlink" title="四、结论"></a>四、结论</h2><p>从预测结果来看，AI模型能够提供指数中高频的短期趋势指导，这为我们进一步优化模型提供了信心来源！在实战上，还需要解决实时性以及信号转化下单工作。大家如有观点看法，欢迎后台留言讨论！</p><hr><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="https://mp.weixin.qq.com/s/PPduk4xPcix9USW9HmUpHw">利用pandas_ta自动提取技术面特征</a></li><li><a href="https://mp.weixin.qq.com/s/4d6ihxZ7V73iSWUfyaz7tg">跨市场联动:基于美股隔日行情预测A股行业涨跌</a></li></ul><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。<br><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>量化交易</tag>
      
      <tag>深度学习</tag>
      
      <tag>行情预测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迅投QMT实时行情接口接入</title>
    <link href="/2022/08/02/%E8%BF%85%E6%8A%95QMT%E5%AE%9E%E6%97%B6%E8%A1%8C%E6%83%85%E6%8E%A5%E5%8F%A3%E6%8E%A5%E5%85%A5/"/>
    <url>/2022/08/02/%E8%BF%85%E6%8A%95QMT%E5%AE%9E%E6%97%B6%E8%A1%8C%E6%83%85%E6%8E%A5%E5%8F%A3%E6%8E%A5%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>迅投QMT量化平台的xtquant库提供了python操作API，我们利用其提供的全推行情能力封装成独立的实时行情服务，实现tick、1Min等粒度的行情加工，为后续实时因子和交易信号生成提供基础保障。</p></blockquote><h2 id="一、标的监控"><a href="#一、标的监控" class="headerlink" title="一、标的监控"></a>一、标的监控</h2><p>QMT支持的市场有A股股票、指数、ETF、上证50/沪深300ETF期权、国内期货、国内期货期权、香港股票等，这里先设置好待监控标的，并定期更新。</p><h3 id="1-1-A股股票指数以及ETF"><a href="#1-1-A股股票指数以及ETF" class="headerlink" title="1.1 A股股票指数以及ETF"></a>1.1 A股股票指数以及ETF</h3><p>获取 上证指数、深证成指、创业板指、科创50、上证50、沪深300、中证500、中证1000等主要指数ticker，以及活跃ETFticker</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_a_index_etf</span>():</span><br>    indexes = [<span class="hljs-string">&#x27;000001.SH&#x27;</span>, <span class="hljs-string">&#x27;399001.SZ&#x27;</span>, <span class="hljs-string">&#x27;399006.SZ&#x27;</span>, <span class="hljs-string">&#x27;000688.SH&#x27;</span>, <span class="hljs-string">&#x27;000016.SH&#x27;</span>, <span class="hljs-string">&#x27;000300.SH&#x27;</span>, <span class="hljs-string">&#x27;000905.SH&#x27;</span>, <span class="hljs-string">&#x27;000852.SH&#x27;</span>]<br>    etf = [<span class="hljs-string">&quot;512100.SH&quot;</span>, <span class="hljs-string">&quot;510050.SH&quot;</span>, <span class="hljs-string">&quot;510300.SH&quot;</span>, <span class="hljs-string">&quot;513050.SH&quot;</span>, <span class="hljs-string">&quot;515790.SH&quot;</span>, <span class="hljs-string">&quot;563000.SH&quot;</span>, <span class="hljs-string">&quot;588000.SH&quot;</span>, <span class="hljs-string">&quot;513180.SH&quot;</span>, <span class="hljs-string">&quot;513060.SH&quot;</span>, <span class="hljs-string">&quot;159915.SZ&quot;</span>, <span class="hljs-string">&quot;512880.SH&quot;</span>, <span class="hljs-string">&quot;512010.SH&quot;</span>, <span class="hljs-string">&quot;512660.SH&quot;</span>, <span class="hljs-string">&quot;159949.SZ&quot;</span>, <span class="hljs-string">&quot;510500.SH&quot;</span>, <span class="hljs-string">&quot;512690.SH&quot;</span>, <span class="hljs-string">&quot;518880.SH&quot;</span>, <span class="hljs-string">&quot;511260.SH&quot;</span>, <span class="hljs-string">&quot;512480.SH&quot;</span>, <span class="hljs-string">&quot;512200.SH&quot;</span>, <span class="hljs-string">&quot;515030.SH&quot;</span>, <span class="hljs-string">&quot;511380.SH&quot;</span>, <span class="hljs-string">&quot;512000.SH&quot;</span>, <span class="hljs-string">&quot;510330.SH&quot;</span>, <span class="hljs-string">&quot;513130.SH&quot;</span>, <span class="hljs-string">&quot;513500.SH&quot;</span>, <span class="hljs-string">&quot;513100.SH&quot;</span>, <span class="hljs-string">&quot;512800.SH&quot;</span>, <span class="hljs-string">&quot;512760.SH&quot;</span>, <span class="hljs-string">&quot;159920.SZ&quot;</span>, <span class="hljs-string">&quot;159605.SZ&quot;</span>, <span class="hljs-string">&quot;159941.SZ&quot;</span>, <span class="hljs-string">&quot;162411.SZ&quot;</span>, <span class="hljs-string">&quot;513330.SH&quot;</span>, <span class="hljs-string">&quot;510900.SH&quot;</span>, <span class="hljs-string">&quot;513090.SH&quot;</span>, <span class="hljs-string">&quot;513550.SH&quot;</span>]<br>    <span class="hljs-keyword">return</span> indexes + etf <br></code></pre></td></tr></table></figure><h3 id="1-2-A股重要指数成分股"><a href="#1-2-A股重要指数成分股" class="headerlink" title="1.2 A股重要指数成分股"></a>1.2 A股重要指数成分股</h3><p>获取沪深300(000300)、中证500(000905)、中证1000(000852)指数成分股</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> akshare<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_a_index_component</span>():</span><br>    hs300 = akshare.index_stock_cons_weight_csindex(symbol=<span class="hljs-string">&quot;000300&quot;</span>)<br>    hs300[<span class="hljs-string">&#x27;stock&#x27;</span>] = hs300.apply(<span class="hljs-keyword">lambda</span> row: row[<span class="hljs-string">&#x27;成分券代码&#x27;</span>] + <span class="hljs-string">&#x27;.&#x27;</span> + &#123;<span class="hljs-string">&#x27;上海证券交易所&#x27;</span> :<span class="hljs-string">&#x27;SH&#x27;</span>, <span class="hljs-string">&#x27;深圳证券交易所&#x27;</span>: <span class="hljs-string">&#x27;SZ&#x27;</span>&#125;.get(row[<span class="hljs-string">&#x27;交易所&#x27;</span>]), axis=<span class="hljs-number">1</span>)<br>    csi500 = akshare.index_stock_cons_weight_csindex(symbol=<span class="hljs-string">&quot;000905&quot;</span>)<br>    csi500[<span class="hljs-string">&#x27;stock&#x27;</span>] = csi500.apply(<span class="hljs-keyword">lambda</span> row: row[<span class="hljs-string">&#x27;成分券代码&#x27;</span>] + <span class="hljs-string">&#x27;.&#x27;</span> + &#123;<span class="hljs-string">&#x27;上海证券交易所&#x27;</span> :<span class="hljs-string">&#x27;SH&#x27;</span>, <span class="hljs-string">&#x27;深圳证券交易所&#x27;</span>: <span class="hljs-string">&#x27;SZ&#x27;</span>&#125;.get(row[<span class="hljs-string">&#x27;交易所&#x27;</span>]), axis=<span class="hljs-number">1</span>)<br>    csi1000 = akshare.index_stock_cons_weight_csindex(symbol=<span class="hljs-string">&quot;000852&quot;</span>)<br>    csi1000[<span class="hljs-string">&#x27;stock&#x27;</span>] = csi1000.apply(<span class="hljs-keyword">lambda</span> row: row[<span class="hljs-string">&#x27;成分券代码&#x27;</span>] + <span class="hljs-string">&#x27;.&#x27;</span> + &#123;<span class="hljs-string">&#x27;上海证券交易所&#x27;</span> :<span class="hljs-string">&#x27;SH&#x27;</span>, <span class="hljs-string">&#x27;深圳证券交易所&#x27;</span>: <span class="hljs-string">&#x27;SZ&#x27;</span>&#125;.get(row[<span class="hljs-string">&#x27;交易所&#x27;</span>]), axis=<span class="hljs-number">1</span>)<br><br>    hs300_component = hs300.set_index(<span class="hljs-string">&#x27;stock&#x27;</span>)[[<span class="hljs-string">&#x27;指数代码&#x27;</span>, <span class="hljs-string">&#x27;成分券名称&#x27;</span>, <span class="hljs-string">&#x27;权重&#x27;</span>]].to_dict(<span class="hljs-string">&#x27;index&#x27;</span>)<br>    csi500_component = csi500.set_index(<span class="hljs-string">&#x27;stock&#x27;</span>)[[<span class="hljs-string">&#x27;指数代码&#x27;</span>, <span class="hljs-string">&#x27;成分券名称&#x27;</span>, <span class="hljs-string">&#x27;权重&#x27;</span>]].to_dict(<span class="hljs-string">&#x27;index&#x27;</span>)<br>    csi1000_component = csi1000.set_index(<span class="hljs-string">&#x27;stock&#x27;</span>)[[<span class="hljs-string">&#x27;指数代码&#x27;</span>, <span class="hljs-string">&#x27;成分券名称&#x27;</span>, <span class="hljs-string">&#x27;权重&#x27;</span>]].to_dict(<span class="hljs-string">&#x27;index&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> &#123;**hs300_component, **csi500_component, **csi1000_component&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-ETF期权"><a href="#1-3-ETF期权" class="headerlink" title="1.3 ETF期权"></a>1.3 ETF期权</h3><p>获取50ETF、300ETF对应的当月/次月期权ticker</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re, math, datetime<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_etf_option</span>():</span><br>    select_option = &#123;&#125;<br><br>    etf_price = &#123;&#125;<br>    <span class="hljs-comment"># 获取ETF行情</span><br>    etf_tick = xtdata.get_full_tick([<span class="hljs-string">&#x27;510300.SH&#x27;</span>, <span class="hljs-string">&#x27;510050.SH&#x27;</span>, <span class="hljs-string">&#x27;159919.SZ&#x27;</span>])<br>    <span class="hljs-comment"># 取今日开盘价/昨日收盘价均值</span><br>    <span class="hljs-keyword">for</span> code <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;510300.SH&#x27;</span>, <span class="hljs-string">&#x27;510050.SH&#x27;</span>, <span class="hljs-string">&#x27;159919.SZ&#x27;</span>]:<br>        etf_price[code] = (etf_tick[code][<span class="hljs-string">&#x27;open&#x27;</span>] + etf_tick[code][<span class="hljs-string">&#x27;lastClose&#x27;</span>]) / <span class="hljs-number">2</span><br><br>    options = xtdata.get_stock_list_in_sector(<span class="hljs-string">&#x27;上证期权&#x27;</span>) + xtdata.get_stock_list_in_sector(<span class="hljs-string">&#x27;深证期权&#x27;</span>)<br>    <span class="hljs-comment"># 获取主力期权(标的价格附近上下5档,当月/次月)</span><br>    option_data = []<br>    <span class="hljs-keyword">for</span> code <span class="hljs-keyword">in</span> options:<br>        meta = xtdata.get_instrument_detail(code)<br>        <span class="hljs-comment"># 期权名称</span><br>        name = meta[<span class="hljs-string">&#x27;InstrumentName&#x27;</span>]<br>        <span class="hljs-comment"># 对应的ETF</span><br>        etf = re.findall(<span class="hljs-string">r&#x27;\((\d+)\)&#x27;</span>, meta[<span class="hljs-string">&#x27;ProductID&#x27;</span>])[<span class="hljs-number">0</span>] <br>        etf = &#123;<span class="hljs-string">&#x27;510300&#x27;</span>: <span class="hljs-string">&#x27;510300.SH&#x27;</span>, <span class="hljs-string">&#x27;510050&#x27;</span>: <span class="hljs-string">&#x27;510050.SH&#x27;</span>, <span class="hljs-string">&#x27;159919&#x27;</span>: <span class="hljs-string">&#x27;159919.SZ&#x27;</span>&#125;.get(etf)<br>        <span class="hljs-comment"># 剩余有效日</span><br>        days = (datetime.date(year=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(meta[<span class="hljs-string">&#x27;ExpireDate&#x27;</span>])[:<span class="hljs-number">4</span>]), month=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(meta[<span class="hljs-string">&#x27;ExpireDate&#x27;</span>])[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>]), day=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(meta[<span class="hljs-string">&#x27;ExpireDate&#x27;</span>])[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>])) - datetime.date.today()).days<br>        call_put = <span class="hljs-string">&#x27;call&#x27;</span> <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;购&#x27;</span> <span class="hljs-keyword">in</span> name <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;put&#x27;</span><br>        <span class="hljs-keyword">if</span> days &lt; <span class="hljs-number">32</span>:<br>            <span class="hljs-keyword">if</span> math.fabs(etf_price[etf] - <span class="hljs-built_in">int</span>(name[-<span class="hljs-number">4</span>:]) / <span class="hljs-number">1000.0</span>) &lt; <span class="hljs-number">0.2</span>:<br>                select_option[code] = [etf, call_put, <span class="hljs-built_in">int</span>(name[-<span class="hljs-number">4</span>:]), days]<br>        <span class="hljs-keyword">elif</span> days &lt; <span class="hljs-number">65</span>:<br>            <span class="hljs-keyword">if</span> math.fabs(etf_price[etf] - <span class="hljs-built_in">int</span>(name[-<span class="hljs-number">4</span>:]) / <span class="hljs-number">1000.0</span>) &lt; <span class="hljs-number">0.25</span>:<br>                select_option[code] = [etf, call_put, <span class="hljs-built_in">int</span>(name[-<span class="hljs-number">4</span>:]), days]<br><br>    <span class="hljs-keyword">return</span> select_option<br></code></pre></td></tr></table></figure><h3 id="1-4-期货合约"><a href="#1-4-期货合约" class="headerlink" title="1.4 期货合约"></a>1.4 期货合约</h3><p>获取中金所、大商所、郑商所、上期所的主要连续合约</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_main_contract</span>():</span><br>    contract = xtdata.get_stock_list_in_sector(<span class="hljs-string">&#x27;中金所&#x27;</span>) + xtdata.get_stock_list_in_sector(<span class="hljs-string">&#x27;大商所&#x27;</span>) + xtdata.get_stock_list_in_sector(<span class="hljs-string">&#x27;郑商所&#x27;</span>) + xtdata.get_stock_list_in_sector(<span class="hljs-string">&#x27;上期所&#x27;</span>) <br>    market_mapping = &#123;<span class="hljs-string">&#x27;CZCE&#x27;</span>: <span class="hljs-string">&#x27;ZF&#x27;</span>, <span class="hljs-string">&#x27;DCE&#x27;</span>: <span class="hljs-string">&#x27;DF&#x27;</span>, <span class="hljs-string">&#x27;CFFEX&#x27;</span>: <span class="hljs-string">&#x27;IF&#x27;</span>, <span class="hljs-string">&#x27;SHFE&#x27;</span>: <span class="hljs-string">&#x27;SF&#x27;</span>&#125;<br>    contract_main = [i.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;.&#x27;</span> + market_mapping.get(i.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> contract <span class="hljs-keyword">if</span> re.search(<span class="hljs-string">r&#x27;[A-Za-z]00\.[A-Z]&#x27;</span>, i)]<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;IM00.IF&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> contract_main:<br>        contract_main.append(<span class="hljs-string">&#x27;IM00.IF&#x27;</span>)<br>    <span class="hljs-keyword">return</span> contract_main<br></code></pre></td></tr></table></figure><h3 id="1-5-外盘期货"><a href="#1-5-外盘期货" class="headerlink" title="1.5 外盘期货"></a>1.5 外盘期货</h3><p>外盘期货市场主要标的，包含汇率、利率、商品以及股指</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_future_market_ticker</span>():</span><br>    forex = [<span class="hljs-string">&#x27;DXY.OTC&#x27;</span>, <span class="hljs-string">&#x27;EURUSD.OTC&#x27;</span>, <span class="hljs-string">&#x27;GBPUSD.OTC&#x27;</span>, <span class="hljs-string">&#x27;USDJPY.OTC&#x27;</span>, <span class="hljs-string">&#x27;USDRUB.OTC&#x27;</span>, <span class="hljs-string">&#x27;USDCNH.OTC&#x27;</span>, <span class="hljs-string">&#x27;USDHKD.OTC&#x27;</span>]<br>    interest = [<span class="hljs-string">&#x27;US10YR.OTC&#x27;</span>, <span class="hljs-string">&#x27;DE10YR.OTC&#x27;</span>, <span class="hljs-string">&#x27;UK10YR.OTC&#x27;</span>, <span class="hljs-string">&#x27;CN10YR.OTC&#x27;</span>, <span class="hljs-string">&#x27;JP10YR.OTC&#x27;</span>, <span class="hljs-string">&#x27;US5YR.OTC&#x27;</span>, <span class="hljs-string">&#x27;US2YR.OTC&#x27;</span>, <span class="hljs-string">&#x27;US1YR.OTC&#x27;</span>, <span class="hljs-string">&#x27;US30YR.OTC&#x27;</span>, <span class="hljs-string">&#x27;FR10YR.OTC&#x27;</span>, <span class="hljs-string">&#x27;CN5YR.OTC&#x27;</span>, <span class="hljs-string">&#x27;CN2YR.OTC&#x27;</span>, <span class="hljs-string">&#x27;CN1YR.OTC&#x27;</span>, <span class="hljs-string">&#x27;CN7YR.OTC&#x27;</span>]<br>    commodity = [<span class="hljs-string">&#x27;USHG.OTC&#x27;</span>, <span class="hljs-string">&#x27;UKAH.OTC&#x27;</span>, <span class="hljs-string">&#x27;UKCA.OTC&#x27;</span>, <span class="hljs-string">&#x27;UKNI.OTC&#x27;</span>, <span class="hljs-string">&#x27;UKPB.OTC&#x27;</span>, <span class="hljs-string">&#x27;UKZS.OTC&#x27;</span>, <span class="hljs-string">&#x27;UKSN.OTC&#x27;</span>, <span class="hljs-string">&#x27;USZC.OTC&#x27;</span>, <span class="hljs-string">&#x27;USZW.OTC&#x27;</span>, <span class="hljs-string">&#x27;USYO.OTC&#x27;</span>, <span class="hljs-string">&#x27;USZS.OTC&#x27;</span>, <span class="hljs-string">&#x27;USLHC.OTC&#x27;</span>, <span class="hljs-string">&#x27;UKOIL.OTC&#x27;</span>, <span class="hljs-string">&#x27;USCL.OTC&#x27;</span>, <span class="hljs-string">&#x27;USNG.OTC&#x27;</span>, <span class="hljs-string">&#x27;XAUUSD.OTC&#x27;</span>, <span class="hljs-string">&#x27;USGC.OTC&#x27;</span>, <span class="hljs-string">&#x27;XAGUSD.OTC&#x27;</span>, <span class="hljs-string">&#x27;USSI.OTC&#x27;</span>, <span class="hljs-string">&#x27;AUTD.SGE&#x27;</span>, <span class="hljs-string">&#x27;AGTD.SGE&#x27;</span>, <span class="hljs-string">&#x27;PT9995.SGE&#x27;</span>, <span class="hljs-string">&#x27;USPL.OTC&#x27;</span>, <span class="hljs-string">&#x27;USPA.OTC&#x27;</span>]<br>    index = [<span class="hljs-string">&quot;US500F.OTC&quot;</span>, <span class="hljs-string">&quot;VIXF.OTC&quot;</span>, <span class="hljs-string">&quot;US30F.OTC&quot;</span>, <span class="hljs-string">&quot;USTEC100F.OTC&quot;</span>, <span class="hljs-string">&quot;JP225F.OTC&quot;</span>, <span class="hljs-string">&quot;EU50F.OTC&quot;</span>, <span class="hljs-string">&quot;DE30F.OTC&quot;</span>, <span class="hljs-string">&quot;FR40F.OTC&quot;</span>, <span class="hljs-string">&quot;ES35F.OTC&quot;</span>, <span class="hljs-string">&quot;AU200F.OTC&quot;</span>, <span class="hljs-string">&quot;STOXX50F.OTC&quot;</span>]<br>    <span class="hljs-keyword">return</span> forex + interest + commodity + index<br></code></pre></td></tr></table></figure><h2 id="二、行情获取"><a href="#二、行情获取" class="headerlink" title="二、行情获取"></a>二、行情获取</h2><p>QMT的实时行情获取主要分为tick分笔数据和kline分钟数据，其中全推tick行情仅支持股票，其他tick/kline行情则需要通过订阅的方式获得。</p><h3 id="2-1-全推方式获得tick行情"><a href="#2-1-全推方式获得tick行情" class="headerlink" title="2.1 全推方式获得tick行情"></a>2.1 全推方式获得tick行情</h3><p>首先订阅全推行情：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a_index_etf = get_a_index_etf()<br>subscribe_id = xtdata.subscribe_whole_quote(a_index_etf)<br></code></pre></td></tr></table></figure><p>然后实时查询,整理成dataframe：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">data = xtdata.get_full_tick(a_index_etf)<br>df = pd.DataFrame(data)<br></code></pre></td></tr></table></figure><p>抽出几列数据，可看出指数无五档行情，一般股票则包含了实时请求的快照：</p><table><thead><tr><th align="left"></th><th align="left">000300.SH</th><th align="left">510300.SH</th><th align="left">159915.SZ</th></tr></thead><tbody><tr><td align="left">timetag</td><td align="left">20220802 14:57:07</td><td align="left">20220802 14:59:33</td><td align="left">20220802 14:59:33</td></tr><tr><td align="left">lastPrice</td><td align="left">4106.204</td><td align="left">4.167</td><td align="left">2.605</td></tr><tr><td align="left">open</td><td align="left">4144.377</td><td align="left">4.21</td><td align="left">2.627</td></tr><tr><td align="left">high</td><td align="left">4144.377</td><td align="left">4.21</td><td align="left">2.637</td></tr><tr><td align="left">low</td><td align="left">4071.431</td><td align="left">4.132</td><td align="left">2.575</td></tr><tr><td align="left">lastClose</td><td align="left">4188.678</td><td align="left">4.238</td><td align="left">2.657</td></tr><tr><td align="left">amount</td><td align="left">278109651400</td><td align="left">2262356300</td><td align="left">937252200</td></tr><tr><td align="left">volume</td><td align="left">140760397</td><td align="left">5434039</td><td align="left">3594548</td></tr><tr><td align="left">pvolume</td><td align="left">0</td><td align="left">0</td><td align="left">0</td></tr><tr><td align="left">stockStatus</td><td align="left">0</td><td align="left">0</td><td align="left">0</td></tr><tr><td align="left">openInt</td><td align="left">0</td><td align="left">13</td><td align="left">18</td></tr><tr><td align="left">settlementPrice</td><td align="left">0</td><td align="left">0</td><td align="left">0</td></tr><tr><td align="left">lastSettlementPrice</td><td align="left">0</td><td align="left">0</td><td align="left">0</td></tr><tr><td align="left">askPrice</td><td align="left">[0, 0, 0, 0, 0]</td><td align="left">[4.168, 4.169, 4.17, 4.171, 4.172]</td><td align="left">[2.605, 0, 0, 0, 0]</td></tr><tr><td align="left">bidPrice</td><td align="left">[0, 0, 0, 0, 0]</td><td align="left">[4.167, 4.166, 4.165, 4.164, 4.163]</td><td align="left">[2.605, 0, 0, 0, 0]</td></tr><tr><td align="left">askVol</td><td align="left">[0, 0, 0, 0, 0]</td><td align="left">[2715, 452, 824, 577, 322]</td><td align="left">[20672, 733, 0, 0, 0]</td></tr><tr><td align="left">bidVol</td><td align="left">[0, 0, 0, 0, 0]</td><td align="left">[1904, 11190, 4558, 2520, 3142]</td><td align="left">[20672, 0, 0, 0, 0]</td></tr></tbody></table><h3 id="2-2-订阅方式获得tick-kline行情"><a href="#2-2-订阅方式获得tick-kline行情" class="headerlink" title="2.2 订阅方式获得tick/kline行情"></a>2.2 订阅方式获得tick/kline行情</h3><p>首先订阅指定ticker，如有多个则依次订阅, count参数指定缓存数据量大小:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">contract = get_main_contract()<br>subscribe_ids = []<br><span class="hljs-keyword">for</span> ticker <span class="hljs-keyword">in</span> contract:<br>    subscribe_ids.append(xtdata.subscribe_quote(ticker, <span class="hljs-string">&#x27;tick&#x27;</span>, count=<span class="hljs-number">10</span>))<br>    subscribe_ids.append(xtdata.subscribe_quote(ticker, <span class="hljs-string">&#x27;1m&#x27;</span>, count=<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><p>查询tick行情：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tick_data = xtdata.get_market_data(stock_list=[<span class="hljs-string">&#x27;IC00.IF&#x27;</span>, <span class="hljs-string">&#x27;IM00.IF&#x27;</span>, <span class="hljs-string">&#x27;ag00.SF&#x27;</span>], period=<span class="hljs-string">&#x27;tick&#x27;</span>, count=<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(pd.DataFrame(tick_data[<span class="hljs-string">&#x27;IC00.IF&#x27;</span>]))<br></code></pre></td></tr></table></figure><p>可以看到，tick行情时间戳精确到毫秒，字段同全推行情。</p><p>查询Kline行情：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">kline_data =  xtdata.get_market_data(stock_list=[<span class="hljs-string">&#x27;90001156.SZO&#x27;</span>], period=<span class="hljs-string">&#x27;1m&#x27;</span>, count=<span class="hljs-number">10</span>)<br>df = pd.concat([kline_data[i].T <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>, <span class="hljs-string">&#x27;settelementPrice&#x27;</span>, <span class="hljs-string">&#x27;openInterest&#x27;</span>]], axis=<span class="hljs-number">1</span>)<br>df.columns = [<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>, <span class="hljs-string">&#x27;settelementPrice&#x27;</span>, <span class="hljs-string">&#x27;openInterest&#x27;</span>]<br>df = df[df.volume !=<span class="hljs-number">0</span>]<br>df[<span class="hljs-string">&#x27;time&#x27;</span>] = df[<span class="hljs-string">&#x27;time&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: datetime.datetime.fromtimestamp(x / <span class="hljs-number">1000.0</span>))<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">time</th><th align="right">open</th><th align="right">high</th><th align="right">low</th><th align="right">close</th><th align="right">volume</th><th align="right">amount</th><th align="right">settelementPrice</th><th align="right">openInterest</th></tr></thead><tbody><tr><td align="left">2022-08-02 14:56:00</td><td align="right">0.1728</td><td align="right">0.1739</td><td align="right">0.1728</td><td align="right">0.1739</td><td align="right">40</td><td align="right">69333</td><td align="right">0</td><td align="right">16019</td></tr><tr><td align="left">2022-08-02 14:57:00</td><td align="right">0.1739</td><td align="right">0.1741</td><td align="right">0.1729</td><td align="right">0.1741</td><td align="right">77</td><td align="right">133675</td><td align="right">0</td><td align="right">15959</td></tr><tr><td align="left">2022-08-02 15:00:00</td><td align="right">0.1741</td><td align="right">0.1741</td><td align="right">0.1731</td><td align="right">0.1731</td><td align="right">1</td><td align="right">1731</td><td align="right">0.1731</td><td align="right">15960</td></tr></tbody></table><p>​至此我们完成了行情获取的基本操作，下文将继续介绍如何在实时行情中提取技术因子，设计定时任务，构造机器学习工作流。</p><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="https://mp.weixin.qq.com/s/5XI09nyStjmD0faYs9UIlw">初探迅投QMT极简策略系统</a></li></ul><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。</p><p><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>迅投QMT</tag>
      
      <tag>量化交易</tag>
      
      <tag>行情接口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>跨市场联动:基于美股隔日行情预测A股行业涨跌</title>
    <link href="/2022/07/20/%E8%B7%A8%E5%B8%82%E5%9C%BA%E8%81%94%E5%8A%A8-%E7%BE%8E%E8%82%A1%E8%A1%8C%E6%83%85%E5%AF%B9A%E8%82%A1%E5%BD%B1%E5%93%8D%E9%A2%84%E6%B5%8B/"/>
    <url>/2022/07/20/%E8%B7%A8%E5%B8%82%E5%9C%BA%E8%81%94%E5%8A%A8-%E7%BE%8E%E8%82%A1%E8%A1%8C%E6%83%85%E5%AF%B9A%E8%82%A1%E5%BD%B1%E5%93%8D%E9%A2%84%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>随着A股北上资金的不断涌入，跨市场联动性也愈发显著，在内循环的同时也时刻受着外部重要市场行情波动的影响，美股作为全球市场，一丝风吹草动都对全球金融造成剧烈波动。本文将探索美股行情中的技术面因子对当天A股市场的行业影响，使用机器学习技术预测行业涨跌情况，并同基准沪深300指数作对比以说明实际效果。 </p></blockquote><h2 id="美股因子数据生成"><a href="#美股因子数据生成" class="headerlink" title="美股因子数据生成"></a>美股因子数据生成</h2><h3 id="美股标的选择"><a href="#美股标的选择" class="headerlink" title="美股标的选择"></a>美股标的选择</h3><p>美股市场总有有高达数万个股票、ETF标的，我们这里选择那些具有代表性的股票和ETF作为参考标的。</p><ul><li><a href="https://www.slickcharts.com/dowjones">道琼斯工业平均指数</a>成分股：是在美国证券交易所上市的30家著名公司的价格加权衡量股票市场指数。</li><li><a href="https://www.slickcharts.com/sp500">标普500指数</a>成分股：美国上市公司总市值Top500，其成分股由400种工业股票、20种运输业股票、40种公用事业股票和40种金融业股票组成。</li><li><a href="https://www.slickcharts.com/nasdaq100">纳斯达克100指数</a>成分股：是美国纳斯达克100支最大型本地及国际非金融类上市公司组成的股市指数，以市值作基础，并以一些规则平衡较大市值股份造成的影响。</li><li>大盘和行业指数ETF：<ul><li>大宗商品：白银(SLV)、黄金(GLD)、金矿(GDX)、天然气(UNG)、太阳能(TAN)、能源ETF(XLE)、商品指数(DBC)、油矿开采(XOP)、原油基金(USO)、油气服务(OIH)</li><li>大盘指数: 标普500(SPY)、道琼斯指数(DIA)、纳斯达克100(QQQ)、罗素2000(IWM)、恐慌指数(UVXY)、恐慌指数(VIXY)、价值股(VTV)、罗素1000成长(IWF) 中国大盘股(FXI)、中国海外互联网(KWEB)、日本ETF(EWJ)、台湾(EWT)、韩国(EWY)、澳大利亚(EWA)、香港(EWH)、沪深300(ASHR)、欧洲(VGK)、英国(EWU)、德国(EWG)、欧盟(EZU)、巴西(EWZ)</li><li>债券：20年国债(TLT)、全债(AGG)、市政债(MUB)、通胀债(TIP)、债券指数(HYG)、短期国债(SHV)、公司债(LQD)、高价值债(JNK)、短期公司债(VCSH)、中期公司债(VCIT)、1-3年国债(SHY)、新兴市场美元债(EMB)</li><li>行业：金融(XLF)、生物(XBI)、半导体(SMH)、非必须消费品(XLY)、高科技(XLK)、医疗保健(XLV)、日常消费(XLP)、公共事业(XLU)、工业指数(XLI)、房地产(IYR)、不动产(VNQ)、原料(XLB)、区域银行(KRE)、信息技术(VGT)、航空业ETF(JETS)、农产品(DBA)、零售(XRT)、金属矿业(XME)、房屋建筑(XHB)</li><li>汇率: 美元(UUP) </li></ul></li><li>中概股代表股：阿里巴巴(BABA)、台积电(TSM)、京东(JD)、拼多多(PDD)、网易(NTES)、百度(BIDU)、理想汽车(LI)、蔚来(NIO)、小鹏汽车(XPEV)、百胜中国(YUMC)、百济神州(BGNE)、贝壳(BEKE)、携程(TCOM)、陆金所(LU)、哔哩哗啦(BILI)、腾讯音乐(TME)、富途(FUTU)、万国数据(GDS)、微博(WB)、新东方(EDU)、爱奇艺(IQ)</li></ul><p>代码：爬取指数成分股</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re, requests<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_us_market_ticker</span>():</span><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;authority&#x27;</span>: <span class="hljs-string">&#x27;www.slickcharts.com&#x27;</span>,<br>        <span class="hljs-string">&#x27;cache-control&#x27;</span>: <span class="hljs-string">&#x27;max-age=0&#x27;</span>,<br>        <span class="hljs-string">&#x27;upgrade-insecure-requests&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>        <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36&#x27;</span>,<br>        <span class="hljs-string">&#x27;accept&#x27;</span>: <span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,<br>        <span class="hljs-string">&#x27;sec-fetch-site&#x27;</span>: <span class="hljs-string">&#x27;none&#x27;</span>,<br>        <span class="hljs-string">&#x27;sec-fetch-mode&#x27;</span>: <span class="hljs-string">&#x27;navigate&#x27;</span>,<br>        <span class="hljs-string">&#x27;sec-fetch-user&#x27;</span>: <span class="hljs-string">&#x27;?1&#x27;</span>,<br>        <span class="hljs-string">&#x27;sec-fetch-dest&#x27;</span>: <span class="hljs-string">&#x27;document&#x27;</span>,<br>        <span class="hljs-string">&#x27;referer&#x27;</span>: <span class="hljs-string">&#x27;https://www.google.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;accept-language&#x27;</span>: <span class="hljs-string">&#x27;zh-CN,zh;q=0.9,en;q=0.8,en-US;q=0.7&#x27;</span><br>    &#125;<br><br>    sp500= requests.get(<span class="hljs-string">&#x27;https://www.slickcharts.com/sp500&#x27;</span>, headers=headers)<br>    nasdaq100 = requests.get(<span class="hljs-string">&#x27;https://www.slickcharts.com/nasdaq100&#x27;</span>, headers=headers)<br>    dowjones30 = requests.get(<span class="hljs-string">&#x27;https://www.slickcharts.com/dowjones&#x27;</span>, headers=headers)<br>    <br>    component_ticker = <span class="hljs-built_in">set</span>(re.findall(<span class="hljs-string">r&quot;/symbol/([A-Za-z\.]+)&quot;</span>, sp500.text)) | <span class="hljs-built_in">set</span>(re.findall(<span class="hljs-string">r&quot;/symbol/([A-Za-z\.]+)&quot;</span>, nasdaq100.text)) | <span class="hljs-built_in">set</span>(re.findall(<span class="hljs-string">r&quot;/symbol/([A-Za-z\.]+)&quot;</span>, dowjones30.text))<br>    <br>    etf_ticker = <span class="hljs-built_in">set</span>([<span class="hljs-string">&#x27;SLV&#x27;</span>, <span class="hljs-string">&#x27;GLD&#x27;</span>, <span class="hljs-string">&#x27;GDX&#x27;</span>, <span class="hljs-string">&#x27;UNG&#x27;</span>, <span class="hljs-string">&#x27;TAN&#x27;</span>, <span class="hljs-string">&#x27;XLE&#x27;</span>, <span class="hljs-string">&#x27;DBC&#x27;</span>, <span class="hljs-string">&#x27;XOP&#x27;</span>, <span class="hljs-string">&#x27;USO&#x27;</span>, <span class="hljs-string">&#x27;OIH&#x27;</span>, <span class="hljs-string">&#x27;SPY&#x27;</span>, <span class="hljs-string">&#x27;DIA&#x27;</span>, <span class="hljs-string">&#x27;QQQ&#x27;</span>, <span class="hljs-string">&#x27;IWM&#x27;</span>, <span class="hljs-string">&#x27;UVXY&#x27;</span>, <span class="hljs-string">&#x27;VIXY&#x27;</span>, <span class="hljs-string">&#x27;VTV&#x27;</span>, <span class="hljs-string">&#x27;IWF&#x27;</span>, <span class="hljs-string">&#x27;FXI&#x27;</span>, <span class="hljs-string">&#x27;KWEB&#x27;</span>, <span class="hljs-string">&#x27;EWJ&#x27;</span>, <span class="hljs-string">&#x27;EWT&#x27;</span>, <span class="hljs-string">&#x27;EWY&#x27;</span>, <span class="hljs-string">&#x27;EWA&#x27;</span>, <span class="hljs-string">&#x27;EWH&#x27;</span>, <span class="hljs-string">&#x27;ASHR&#x27;</span>, <span class="hljs-string">&#x27;VGK&#x27;</span>, <span class="hljs-string">&#x27;EWU&#x27;</span>, <span class="hljs-string">&#x27;EWG&#x27;</span>, <span class="hljs-string">&#x27;EZU&#x27;</span>, <span class="hljs-string">&#x27;EWZ&#x27;</span>, <span class="hljs-string">&#x27;TLT&#x27;</span>, <span class="hljs-string">&#x27;AGG&#x27;</span>, <span class="hljs-string">&#x27;MUB&#x27;</span>, <span class="hljs-string">&#x27;TIP&#x27;</span>, <span class="hljs-string">&#x27;HYG&#x27;</span>, <span class="hljs-string">&#x27;SHV&#x27;</span>, <span class="hljs-string">&#x27;LQD&#x27;</span>, <span class="hljs-string">&#x27;JNK&#x27;</span>, <span class="hljs-string">&#x27;VCSH&#x27;</span>, <span class="hljs-string">&#x27;VCIT&#x27;</span>, <span class="hljs-string">&#x27;SHY&#x27;</span>, <span class="hljs-string">&#x27;EMB&#x27;</span>, <span class="hljs-string">&#x27;XLF&#x27;</span>, <span class="hljs-string">&#x27;XBI&#x27;</span>, <span class="hljs-string">&#x27;SMH&#x27;</span>, <span class="hljs-string">&#x27;XLY&#x27;</span>, <span class="hljs-string">&#x27;XLK&#x27;</span>, <span class="hljs-string">&#x27;XLV&#x27;</span>, <span class="hljs-string">&#x27;XLP&#x27;</span>, <span class="hljs-string">&#x27;XLU&#x27;</span>, <span class="hljs-string">&#x27;XLI&#x27;</span>, <span class="hljs-string">&#x27;IYR&#x27;</span>, <span class="hljs-string">&#x27;VNQ&#x27;</span>, <span class="hljs-string">&#x27;XLB&#x27;</span>, <span class="hljs-string">&#x27;KRE&#x27;</span>, <span class="hljs-string">&#x27;VGT&#x27;</span>, <span class="hljs-string">&#x27;JETS&#x27;</span>, <span class="hljs-string">&#x27;DBA&#x27;</span>, <span class="hljs-string">&#x27;XRT&#x27;</span>, <span class="hljs-string">&#x27;XME&#x27;</span>, <span class="hljs-string">&#x27;XHB&#x27;</span>, <span class="hljs-string">&#x27;UUP&#x27;</span>])<br>    <br>    cn_ticker = <span class="hljs-built_in">set</span>([<span class="hljs-string">&#x27;BABA&#x27;</span>, <span class="hljs-string">&#x27;TSM&#x27;</span>, <span class="hljs-string">&#x27;JD&#x27;</span>, <span class="hljs-string">&#x27;PDD&#x27;</span>, <span class="hljs-string">&#x27;NTES&#x27;</span>, <span class="hljs-string">&#x27;BIDU&#x27;</span>, <span class="hljs-string">&#x27;LI&#x27;</span>, <span class="hljs-string">&#x27;NIO&#x27;</span>, <span class="hljs-string">&#x27;XPEV&#x27;</span>, <span class="hljs-string">&#x27;YUMC&#x27;</span>, <span class="hljs-string">&#x27;BGNE&#x27;</span>, <span class="hljs-string">&#x27;BEKE&#x27;</span>, <span class="hljs-string">&#x27;TCOM&#x27;</span>, <span class="hljs-string">&#x27;LU&#x27;</span>, <span class="hljs-string">&#x27;BILI&#x27;</span>, <span class="hljs-string">&#x27;TME&#x27;</span>, <span class="hljs-string">&#x27;FUTU&#x27;</span>, <span class="hljs-string">&#x27;GDS&#x27;</span>, <span class="hljs-string">&#x27;WB&#x27;</span>, <span class="hljs-string">&#x27;EDU&#x27;</span>, <span class="hljs-string">&#x27;IQ&#x27;</span>])<br>    <br>    ticker = component_ticker | etf_ticker | cn_ticker<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(ticker)<br></code></pre></td></tr></table></figure><p>可以获得约600个待跟踪标的。</p><h3 id="技术因子生成"><a href="#技术因子生成" class="headerlink" title="技术因子生成"></a>技术因子生成</h3><p>生成日线级别的技术因子，基于上篇介绍的pandas_ta，这里直接给出相关代码，需要注意的是要对因子进行<code>标准化</code>，限制取值范围为<code>[-10, 10]</code>，避免极端值对后续模型的影响：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 技术指标: 日间</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_tech_feature_daily</span>(<span class="hljs-params">dayline_df, index_col=<span class="hljs-string">&#x27;trade_day&#x27;</span></span>):</span><br>    <span class="hljs-comment"># 特征</span><br>    <span class="hljs-keyword">if</span> dayline_df.index.name != index_col:<br>        dayline_df = dayline_df.set_index(index_col)<br>    df_len = <span class="hljs-built_in">len</span>(dayline_df)<br>    <span class="hljs-keyword">if</span> df_len &lt; <span class="hljs-number">2</span>:<br>        feature_df = pd.DataFrame(index=dayline_df.index, columns = [<span class="hljs-string">&#x27;ADX_2&#x27;</span>, <span class="hljs-string">&#x27;DMP_2&#x27;</span>, <span class="hljs-string">&#x27;DMN_2&#x27;</span>, <span class="hljs-string">&#x27;ADX_5&#x27;</span>, <span class="hljs-string">&#x27;DMP_5&#x27;</span>, <span class="hljs-string">&#x27;DMN_5&#x27;</span>, <span class="hljs-string">&#x27;ADX_22&#x27;</span>,<br>       <span class="hljs-string">&#x27;DMP_22&#x27;</span>, <span class="hljs-string">&#x27;DMN_22&#x27;</span>, <span class="hljs-string">&#x27;CCI_2&#x27;</span>, <span class="hljs-string">&#x27;CCI_5&#x27;</span>, <span class="hljs-string">&#x27;CCI_22&#x27;</span>, <span class="hljs-string">&#x27;CMO_2&#x27;</span>, <span class="hljs-string">&#x27;CMO_5&#x27;</span>,<br>       <span class="hljs-string">&#x27;CMO_22&#x27;</span>, <span class="hljs-string">&#x27;MACD_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;MACDh_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;MACDs_12_26_9&#x27;</span>,<br>       <span class="hljs-string">&#x27;MACD_6_30_9&#x27;</span>, <span class="hljs-string">&#x27;MACDh_6_30_9&#x27;</span>, <span class="hljs-string">&#x27;MACDs_6_30_9&#x27;</span>, <span class="hljs-string">&#x27;MACD_24_52_9&#x27;</span>,<br>       <span class="hljs-string">&#x27;MACDh_24_52_9&#x27;</span>, <span class="hljs-string">&#x27;MACDs_24_52_9&#x27;</span>, <span class="hljs-string">&#x27;PPO_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;PPOh_12_26_9&#x27;</span>,<br>       <span class="hljs-string">&#x27;PPOs_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;PPO_24_52_9&#x27;</span>, <span class="hljs-string">&#x27;PPOh_24_52_9&#x27;</span>, <span class="hljs-string">&#x27;PPOs_24_52_9&#x27;</span>,<br>       <span class="hljs-string">&#x27;PVO_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;PVOh_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;PVOs_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;PVO_24_52_9&#x27;</span>,<br>       <span class="hljs-string">&#x27;PVOh_24_52_9&#x27;</span>, <span class="hljs-string">&#x27;PVOs_24_52_9&#x27;</span>, <span class="hljs-string">&#x27;MFI_2&#x27;</span>, <span class="hljs-string">&#x27;MFI_5&#x27;</span>, <span class="hljs-string">&#x27;RSI_2&#x27;</span>, <span class="hljs-string">&#x27;RSI_5&#x27;</span>,<br>       <span class="hljs-string">&#x27;RSI_14&#x27;</span>, <span class="hljs-string">&#x27;UO_5_15_30&#x27;</span>, <span class="hljs-string">&#x27;WILLR_3&#x27;</span>, <span class="hljs-string">&#x27;WILLR_5&#x27;</span>, <span class="hljs-string">&#x27;WILLR_10&#x27;</span>, <span class="hljs-string">&#x27;WILLR_20&#x27;</span>, <span class="hljs-string">&#x27;K_9_3&#x27;</span>,<br>       <span class="hljs-string">&#x27;D_9_3&#x27;</span>, <span class="hljs-string">&#x27;J_9_3&#x27;</span>, <span class="hljs-string">&#x27;K_19_3&#x27;</span>, <span class="hljs-string">&#x27;D_19_3&#x27;</span>, <span class="hljs-string">&#x27;J_19_3&#x27;</span>, <span class="hljs-string">&#x27;NATR_3&#x27;</span>, <span class="hljs-string">&#x27;NATR_10&#x27;</span>, <span class="hljs-string">&#x27;LOGRET_10&#x27;</span>, <br>       <span class="hljs-string">&#x27;PCTRET_1&#x27;</span>, <span class="hljs-string">&#x27;PCTRET_2&#x27;</span>, <span class="hljs-string">&#x27;PCTRET_3&#x27;</span>, <span class="hljs-string">&#x27;PCTRET_4&#x27;</span>, <span class="hljs-string">&#x27;PCTRET_5&#x27;</span>, <span class="hljs-string">&#x27;ZS_5&#x27;</span>,<br>       <span class="hljs-string">&#x27;ZS_14&#x27;</span>, <span class="hljs-string">&#x27;RVI_5&#x27;</span>, <span class="hljs-string">&#x27;RVI_14&#x27;</span>, <span class="hljs-string">&#x27;rolling_money_3&#x27;</span>, <span class="hljs-string">&#x27;rolling_money_5&#x27;</span>, <span class="hljs-string">&#x27;rolling_money_10&#x27;</span>,<br>       <span class="hljs-string">&#x27;rolling_volume_3&#x27;</span>, <span class="hljs-string">&#x27;rolling_volume_5&#x27;</span>, <span class="hljs-string">&#x27;rolling_volume_10&#x27;</span>, <span class="hljs-string">&#x27;pct_volatility&#x27;</span>,<br>       <span class="hljs-string">&#x27;rolling_pct_volatility_3&#x27;</span>, <span class="hljs-string">&#x27;rolling_pct_volatility_5&#x27;</span>,<br>       <span class="hljs-string">&#x27;rolling_pct_volatility_10&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>        feature_df.columns = [<span class="hljs-string">&#x27;daily_%s&#x27;</span> % i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> feature_df.columns]<br><br>        feature_df[<span class="hljs-string">&#x27;code&#x27;</span>] = dayline_df[<span class="hljs-string">&#x27;code&#x27;</span>]<br>        feature_df = feature_df.reset_index().set_index(<span class="hljs-string">&#x27;code&#x27;</span>).reset_index()<br>        <span class="hljs-keyword">return</span> feature_df<br>    <br>    <span class="hljs-comment">## 平均趋向指数</span><br>    <span class="hljs-keyword">try</span>:<br>        adx_2 = (dayline_df.ta.adx(length=<span class="hljs-number">2</span>) / <span class="hljs-number">100</span>).fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span> adx_2.columns.tolist() == [<span class="hljs-string">&#x27;ADX_2&#x27;</span>, <span class="hljs-string">&#x27;DMP_2&#x27;</span>, <span class="hljs-string">&#x27;DMN_2&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        adx_2 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;ADX_2&#x27;</span>, <span class="hljs-string">&#x27;DMP_2&#x27;</span>, <span class="hljs-string">&#x27;DMN_2&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>    <span class="hljs-keyword">try</span>:<br>        adx_5 = (dayline_df.ta.adx(length=<span class="hljs-number">5</span>) / <span class="hljs-number">100</span>).fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span> adx_5.columns.tolist() == [<span class="hljs-string">&#x27;ADX_5&#x27;</span>, <span class="hljs-string">&#x27;DMP_5&#x27;</span>, <span class="hljs-string">&#x27;DMN_5&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        adx_5 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;ADX_5&#x27;</span>, <span class="hljs-string">&#x27;DMP_5&#x27;</span>, <span class="hljs-string">&#x27;DMN_5&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>    <span class="hljs-keyword">try</span>:<br>        adx_22 = (dayline_df.ta.adx(length=<span class="hljs-number">22</span>) / <span class="hljs-number">100</span>).fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span> adx_22.columns.tolist() == [<span class="hljs-string">&#x27;ADX_22&#x27;</span>, <span class="hljs-string">&#x27;DMP_22&#x27;</span>, <span class="hljs-string">&#x27;DMN_22&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        adx_22 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;ADX_22&#x27;</span>, <span class="hljs-string">&#x27;DMP_22&#x27;</span>, <span class="hljs-string">&#x27;DMN_22&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>    <br>    <span class="hljs-comment">## 顺势指标</span><br>    <span class="hljs-keyword">try</span>:<br>        cci_2 = (dayline_df.ta.cci(length=<span class="hljs-number">2</span>) / <span class="hljs-number">1000</span>).to_frame().fillna(<span class="hljs-number">0.0</span>).rename(columns=&#123;<span class="hljs-string">&quot;CCI_2_0.015&quot;</span>: <span class="hljs-string">&quot;CCI_2&quot;</span>&#125;)<br>        <span class="hljs-keyword">assert</span> cci_2.columns.tolist() == [<span class="hljs-string">&#x27;CCI_2&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        cci_2 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;CCI_2&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>    <span class="hljs-keyword">try</span>:<br>        cci_5 = (dayline_df.ta.cci(length=<span class="hljs-number">5</span>) / <span class="hljs-number">1000</span>).to_frame().fillna(<span class="hljs-number">0.0</span>).rename(columns=&#123;<span class="hljs-string">&quot;CCI_5_0.015&quot;</span>: <span class="hljs-string">&quot;CCI_5&quot;</span>&#125;)<br>        <span class="hljs-keyword">assert</span> cci_5.columns.tolist() == [<span class="hljs-string">&#x27;CCI_5&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        cci_5 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;CCI_5&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>    <span class="hljs-keyword">try</span>:<br>        cci_22 = (dayline_df.ta.cci(length=<span class="hljs-number">22</span>) / <span class="hljs-number">1000</span>).to_frame().fillna(<span class="hljs-number">0.0</span>).rename(columns=&#123;<span class="hljs-string">&quot;CCI_22_0.015&quot;</span>: <span class="hljs-string">&quot;CCI_22&quot;</span>&#125;)<br>        <span class="hljs-keyword">assert</span> cci_22.columns.tolist() == [<span class="hljs-string">&#x27;CCI_22&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        cci_22 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;CCI_22&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>        <br>    <span class="hljs-comment">## 钱德动量摆动指标</span><br>    <span class="hljs-keyword">try</span>:<br>        cmo_2 = (dayline_df.ta.cmo(length=<span class="hljs-number">2</span>) / <span class="hljs-number">100</span>).to_frame().fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span> cmo_2.columns.tolist() == [<span class="hljs-string">&#x27;CMO_2&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        cmo_2 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;CMO_2&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>    <span class="hljs-keyword">try</span>:<br>        cmo_5 = (dayline_df.ta.cmo(length=<span class="hljs-number">5</span>) / <span class="hljs-number">100</span>).to_frame().fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span> cmo_5.columns.tolist() == [<span class="hljs-string">&#x27;CMO_5&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        cmo_5 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;CMO_5&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>    <span class="hljs-keyword">try</span>:<br>        cmo_22 = (dayline_df.ta.cmo(length=<span class="hljs-number">22</span>) / <span class="hljs-number">100</span>).to_frame().fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span> cmo_22.columns.tolist() == [<span class="hljs-string">&#x27;CMO_22&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        cmo_22 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;CMO_22&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>        <br>    <span class="hljs-comment">## 指数平滑移动平均线 MACD</span><br>    <span class="hljs-keyword">try</span>:<br>        macd_12_26_9 = dayline_df.ta.macd(<span class="hljs-number">12</span>, <span class="hljs-number">26</span>, <span class="hljs-number">9</span>) <br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> macd_12_26_9:<br>            macd_12_26_9[k] = macd_12_26_9[k].div(dayline_df[<span class="hljs-string">&#x27;close&#x27;</span>].values) * <span class="hljs-number">10</span><br>        macd_12_26_9 = macd_12_26_9.fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span>  macd_12_26_9.columns.tolist() == [<span class="hljs-string">&#x27;MACD_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;MACDh_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;MACDs_12_26_9&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        macd_12_26_9 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;MACD_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;MACDh_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;MACDs_12_26_9&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>        <br>    <span class="hljs-keyword">try</span>:<br>        macd_6_30_9 = dayline_df.ta.macd(<span class="hljs-number">6</span>, <span class="hljs-number">30</span>, <span class="hljs-number">9</span>) <br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> macd_6_30_9:<br>            macd_6_30_9[k] = macd_6_30_9[k].div(dayline_df[<span class="hljs-string">&#x27;close&#x27;</span>].values) * <span class="hljs-number">10</span><br>        macd_6_30_9 = macd_6_30_9.fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span>  macd_6_30_9.columns.tolist() == [<span class="hljs-string">&#x27;MACD_6_30_9&#x27;</span>, <span class="hljs-string">&#x27;MACDh_6_30_9&#x27;</span>, <span class="hljs-string">&#x27;MACDs_6_30_9&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        macd_6_30_9 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;MACD_6_30_9&#x27;</span>, <span class="hljs-string">&#x27;MACDh_6_30_9&#x27;</span>, <span class="hljs-string">&#x27;MACDs_6_30_9&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>    <br>    <span class="hljs-keyword">try</span>:<br>        macd_24_52_9 = dayline_df.ta.macd(<span class="hljs-number">24</span>, <span class="hljs-number">52</span>, <span class="hljs-number">9</span>) <br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> macd_24_52_9:<br>            macd_24_52_9[k] = macd_24_52_9[k].div(dayline_df[<span class="hljs-string">&#x27;close&#x27;</span>].values) * <span class="hljs-number">10</span><br>        macd_24_52_9 = macd_24_52_9.fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span>  macd_24_52_9.columns.tolist() == [<span class="hljs-string">&#x27;MACD_24_52_9&#x27;</span>, <span class="hljs-string">&#x27;MACDh_24_52_9&#x27;</span>, <span class="hljs-string">&#x27;MACDs_24_52_9&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        macd_24_52_9 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;MACD_24_52_9&#x27;</span>, <span class="hljs-string">&#x27;MACDh_24_52_9&#x27;</span>, <span class="hljs-string">&#x27;MACDs_24_52_9&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>        <br>    <span class="hljs-comment">## 指数平滑移动平均线 PPO</span><br>    <span class="hljs-keyword">try</span>:<br>        ppo_12_26_9 = (dayline_df.ta.ppo(<span class="hljs-number">12</span>, <span class="hljs-number">26</span>, <span class="hljs-number">9</span>) / <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span> ppo_12_26_9.columns.tolist() == [<span class="hljs-string">&#x27;PPO_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;PPOh_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;PPOs_12_26_9&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        ppo_12_26_9 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;PPO_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;PPOh_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;PPOs_12_26_9&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>    <span class="hljs-keyword">try</span>:<br>        ppo_24_52_9 = (dayline_df.ta.ppo(<span class="hljs-number">24</span>, <span class="hljs-number">52</span>, <span class="hljs-number">9</span>) / <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span> ppo_24_52_9.columns.tolist() == [<span class="hljs-string">&#x27;PPO_24_52_9&#x27;</span>, <span class="hljs-string">&#x27;PPOh_24_52_9&#x27;</span>, <span class="hljs-string">&#x27;PPOs_24_52_9&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        ppo_24_52_9 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;PPO_24_52_9&#x27;</span>, <span class="hljs-string">&#x27;PPOh_24_52_9&#x27;</span>, <span class="hljs-string">&#x27;PPOs_24_52_9&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>        <br>    <span class="hljs-keyword">try</span>:<br>        pvo_12_26_9 = (dayline_df.ta.pvo(<span class="hljs-number">12</span>, <span class="hljs-number">26</span>, <span class="hljs-number">9</span>) / <span class="hljs-number">100</span>).fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span> pvo_12_26_9.columns.tolist() == [<span class="hljs-string">&#x27;PVO_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;PVOh_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;PVOs_12_26_9&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        pvo_12_26_9 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;PVO_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;PVOh_12_26_9&#x27;</span>, <span class="hljs-string">&#x27;PVOs_12_26_9&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>    <span class="hljs-keyword">try</span>:<br>        pvo_24_52_9 = (dayline_df.ta.pvo(<span class="hljs-number">24</span>, <span class="hljs-number">52</span>, <span class="hljs-number">9</span>) / <span class="hljs-number">100</span>).fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span> pvo_24_52_9.columns.tolist() == [<span class="hljs-string">&#x27;PVO_24_52_9&#x27;</span>, <span class="hljs-string">&#x27;PVOh_24_52_9&#x27;</span>, <span class="hljs-string">&#x27;PVOs_24_52_9&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        pvo_24_52_9 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;PVO_24_52_9&#x27;</span>, <span class="hljs-string">&#x27;PVOh_24_52_9&#x27;</span>, <span class="hljs-string">&#x27;PVOs_24_52_9&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>        <br>    <span class="hljs-keyword">try</span>:<br>        mfi_2 = (dayline_df.ta.mfi(length=<span class="hljs-number">2</span>) / <span class="hljs-number">100</span>).to_frame().fillna(<span class="hljs-number">0.5</span>)<br>        <span class="hljs-keyword">assert</span> mfi_2.columns.tolist() == [<span class="hljs-string">&#x27;MFI_2&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        mfi_2 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;MFI_2&#x27;</span>]).fillna(<span class="hljs-number">0.5</span>)<br>    <span class="hljs-keyword">try</span>:<br>        mfi_5 = (dayline_df.ta.mfi(length=<span class="hljs-number">5</span>) / <span class="hljs-number">100</span>).to_frame().fillna(<span class="hljs-number">0.5</span>)<br>        <span class="hljs-keyword">assert</span> mfi_5.columns.tolist() == [<span class="hljs-string">&#x27;MFI_5&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        mfi_5 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;MFI_5&#x27;</span>]).fillna(<span class="hljs-number">0.5</span>)    <br>    <br>    <span class="hljs-keyword">try</span>:<br>        rsi_2 = (dayline_df.ta.rsi(length=<span class="hljs-number">2</span>) / <span class="hljs-number">100</span>).to_frame().fillna(<span class="hljs-number">0.5</span>)<br>        <span class="hljs-keyword">assert</span> rsi_2.columns.tolist() == [<span class="hljs-string">&#x27;RSI_2&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        rsi_2 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;RSI_2&#x27;</span>]).fillna(<span class="hljs-number">0.5</span>) <br>    <span class="hljs-keyword">try</span>:<br>        rsi_5 = (dayline_df.ta.rsi(length=<span class="hljs-number">5</span>) / <span class="hljs-number">100</span>).to_frame().fillna(<span class="hljs-number">0.5</span>)<br>        <span class="hljs-keyword">assert</span> rsi_5.columns.tolist() == [<span class="hljs-string">&#x27;RSI_5&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        rsi_5 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;RSI_5&#x27;</span>]).fillna(<span class="hljs-number">0.5</span>) <br>    <span class="hljs-keyword">try</span>:<br>        rsi_14 = (dayline_df.ta.rsi(length=<span class="hljs-number">14</span>) / <span class="hljs-number">100</span>).to_frame().fillna(<span class="hljs-number">0.5</span>)<br>        <span class="hljs-keyword">assert</span> rsi_14.columns.tolist() == [<span class="hljs-string">&#x27;RSI_14&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        rsi_14 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;RSI_14&#x27;</span>]).fillna(<span class="hljs-number">0.5</span>) <br>   <br>    <span class="hljs-keyword">try</span>:<br>        uo_5_15_30 = (dayline_df.ta.uo(<span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">30</span>) / <span class="hljs-number">100</span>).to_frame().fillna(<span class="hljs-number">0.5</span>)<br>        <span class="hljs-keyword">assert</span> uo_5_15_30.columns.tolist() == [<span class="hljs-string">&#x27;UO_5_15_30&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        uo_5_15_30 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;UO_5_15_30&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>        <br>    <span class="hljs-keyword">try</span>:<br>        willr_3 = (dayline_df.ta.willr(length=<span class="hljs-number">3</span>) / <span class="hljs-number">100</span>).to_frame().fillna(-<span class="hljs-number">0.5</span>)<br>        <span class="hljs-keyword">assert</span> willr_3.columns.tolist() == [<span class="hljs-string">&#x27;WILLR_3&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        willr_3 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;WILLR_3&#x27;</span>]).fillna(-<span class="hljs-number">0.5</span>) <br>    <span class="hljs-keyword">try</span>:<br>        willr_5 = (dayline_df.ta.willr(length=<span class="hljs-number">5</span>) / <span class="hljs-number">100</span>).to_frame().fillna(-<span class="hljs-number">0.5</span>)<br>        <span class="hljs-keyword">assert</span> willr_5.columns.tolist() == [<span class="hljs-string">&#x27;WILLR_5&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        willr_5 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;WILLR_5&#x27;</span>]).fillna(-<span class="hljs-number">0.5</span>) <br>    <span class="hljs-keyword">try</span>:<br>        willr_10 = (dayline_df.ta.willr(length=<span class="hljs-number">10</span>) / <span class="hljs-number">100</span>).to_frame().fillna(-<span class="hljs-number">0.5</span>)<br>        <span class="hljs-keyword">assert</span> willr_10.columns.tolist() == [<span class="hljs-string">&#x27;WILLR_10&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        willr_10 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;WILLR_10&#x27;</span>]).fillna(-<span class="hljs-number">0.5</span>) <br>    <span class="hljs-keyword">try</span>:<br>        willr_20 = (dayline_df.ta.willr(length=<span class="hljs-number">20</span>) / <span class="hljs-number">100</span>).to_frame().fillna(-<span class="hljs-number">0.5</span>)<br>        <span class="hljs-keyword">assert</span> willr_20.columns.tolist() == [<span class="hljs-string">&#x27;WILLR_20&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        willr_20 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;WILLR_20&#x27;</span>]).fillna(-<span class="hljs-number">0.5</span>) <br>        <br>    <span class="hljs-keyword">try</span>:<br>        kdj_9_3 = (dayline_df.ta.kdj(<span class="hljs-number">9</span>, <span class="hljs-number">3</span>) / <span class="hljs-number">100</span>).fillna(<span class="hljs-number">0.5</span>)<br>        <span class="hljs-keyword">assert</span> kdj_9_3.columns.tolist() == [<span class="hljs-string">&#x27;K_9_3&#x27;</span>, <span class="hljs-string">&#x27;D_9_3&#x27;</span>, <span class="hljs-string">&#x27;J_9_3&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        kdj_9_3 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;K_9_3&#x27;</span>, <span class="hljs-string">&#x27;D_9_3&#x27;</span>, <span class="hljs-string">&#x27;J_9_3&#x27;</span>]).fillna(<span class="hljs-number">0.5</span>)<br>    <span class="hljs-keyword">try</span>:<br>        kdj_19_3 = (dayline_df.ta.kdj(<span class="hljs-number">19</span>, <span class="hljs-number">3</span>) / <span class="hljs-number">100</span>).fillna(<span class="hljs-number">0.5</span>)<br>        <span class="hljs-keyword">assert</span> kdj_19_3.columns.tolist() == [<span class="hljs-string">&#x27;K_19_3&#x27;</span>, <span class="hljs-string">&#x27;D_19_3&#x27;</span>, <span class="hljs-string">&#x27;J_19_3&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        kdj_19_3 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;K_19_3&#x27;</span>, <span class="hljs-string">&#x27;D_19_3&#x27;</span>, <span class="hljs-string">&#x27;J_19_3&#x27;</span>]).fillna(<span class="hljs-number">0.5</span>)<br>        <br>    <span class="hljs-keyword">try</span>:<br>        natr_3 = (dayline_df.ta.natr(length=<span class="hljs-number">3</span>) / <span class="hljs-number">10</span>).to_frame().fillna(<span class="hljs-number">0.5</span>)<br>        <span class="hljs-keyword">assert</span> natr_3.columns.tolist() == [<span class="hljs-string">&#x27;NATR_3&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        natr_3 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;NATR_3&#x27;</span>]).fillna(<span class="hljs-number">0.5</span>) <br>    <span class="hljs-keyword">try</span>:<br>        natr_10 = (dayline_df.ta.natr(length=<span class="hljs-number">10</span>) / <span class="hljs-number">10</span>).to_frame().fillna(<span class="hljs-number">0.5</span>)<br>        <span class="hljs-keyword">assert</span> natr_10.columns.tolist() == [<span class="hljs-string">&#x27;NATR_10&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        natr_10 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;NATR_10&#x27;</span>]).fillna(<span class="hljs-number">0.5</span>)<br>    <br>    <span class="hljs-keyword">try</span>:<br>        log_return_10 = (dayline_df.ta.log_return(length=<span class="hljs-number">10</span>) * <span class="hljs-number">10</span> ).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.0</span>).to_frame()<br>        <span class="hljs-keyword">assert</span> log_return_10.columns.tolist() == [<span class="hljs-string">&#x27;LOGRET_10&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        log_return_10 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;LOGRET_10&#x27;</span>]).fillna(<span class="hljs-number">0.</span>)<br>        <br>    <span class="hljs-keyword">try</span>:<br>        percent_return_1 = (dayline_df.ta.percent_return(length=<span class="hljs-number">1</span>)).to_frame().fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span> percent_return_1.columns.tolist() == [<span class="hljs-string">&#x27;PCTRET_1&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        percent_return_1 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;PCTRET_1&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>    <span class="hljs-keyword">try</span>:<br>        percent_return_2 = (dayline_df.ta.percent_return(length=<span class="hljs-number">2</span>)).to_frame().fillna(<span class="hljs-number">0.0</span>) <br>        <span class="hljs-keyword">assert</span> percent_return_2.columns.tolist() == [<span class="hljs-string">&#x27;PCTRET_2&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        percent_return_2 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;PCTRET_2&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>    <span class="hljs-keyword">try</span>:<br>        percent_return_3 = (dayline_df.ta.percent_return(length=<span class="hljs-number">3</span>)).to_frame().fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span> percent_return_3.columns.tolist() == [<span class="hljs-string">&#x27;PCTRET_3&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        percent_return_3 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;PCTRET_3&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>    <span class="hljs-keyword">try</span>:<br>        percent_return_4 = (dayline_df.ta.percent_return(length=<span class="hljs-number">4</span>)).to_frame().fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span> percent_return_4.columns.tolist() == [<span class="hljs-string">&#x27;PCTRET_4&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        percent_return_4 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;PCTRET_4&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>    <span class="hljs-keyword">try</span>:<br>        percent_return_5 = (dayline_df.ta.percent_return(length=<span class="hljs-number">5</span>)).to_frame().fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span> percent_return_5.columns.tolist() == [<span class="hljs-string">&#x27;PCTRET_5&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        percent_return_5 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;PCTRET_5&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br><br>    <span class="hljs-keyword">try</span>:<br>        zscore_5 = (dayline_df.ta.zscore(length=<span class="hljs-number">5</span>)).to_frame().fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span> zscore_5.columns.tolist() == [<span class="hljs-string">&#x27;ZS_5&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        zscore_5 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;ZS_5&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>    <span class="hljs-keyword">try</span>:<br>        zscore_14 = (dayline_df.ta.zscore(length=<span class="hljs-number">14</span>)).to_frame().fillna(<span class="hljs-number">0.0</span>)<br>        <span class="hljs-keyword">assert</span> zscore_14.columns.tolist() == [<span class="hljs-string">&#x27;ZS_14&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        zscore_14 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;ZS_14&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>    <br>    <span class="hljs-keyword">try</span>:<br>        rvi_5 =  (dayline_df.ta.rvi(length=<span class="hljs-number">5</span>) / <span class="hljs-number">100</span>).fillna(<span class="hljs-number">0.5</span>).to_frame()<br>        <span class="hljs-keyword">assert</span> rvi_5.columns.tolist() == [<span class="hljs-string">&#x27;RVI_5&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        rvi_5 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;RVI_5&#x27;</span>]).fillna(<span class="hljs-number">0.0</span>)<br>    <span class="hljs-keyword">try</span>:<br>        rvi_14 =  (dayline_df.ta.rvi(length=<span class="hljs-number">14</span>) / <span class="hljs-number">100</span>).fillna(<span class="hljs-number">0.5</span>).to_frame()<br>        <span class="hljs-keyword">assert</span> rvi_14.columns.tolist() == [<span class="hljs-string">&#x27;RVI_14&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        rvi_14 = pd.DataFrame(index=dayline_df.index, columns=[<span class="hljs-string">&#x27;RVI_14&#x27;</span>]).fillna(<span class="hljs-number">0.5</span>)<br>    <br>    rolling_money_3 = ((np.log1p((dayline_df[<span class="hljs-string">&#x27;money&#x27;</span>]).rolling(<span class="hljs-number">3</span>, min_periods=<span class="hljs-number">1</span>).mean()) - np.log1p((dayline_df[<span class="hljs-string">&#x27;money&#x27;</span>]))).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)).to_frame().rename(columns=&#123;<span class="hljs-string">&#x27;money&#x27;</span>: <span class="hljs-string">&#x27;rolling_money_3&#x27;</span>&#125;)<br>    rolling_money_5 = ((np.log1p((dayline_df[<span class="hljs-string">&#x27;money&#x27;</span>]).rolling(<span class="hljs-number">5</span>, min_periods=<span class="hljs-number">1</span>).mean()) - np.log1p((dayline_df[<span class="hljs-string">&#x27;money&#x27;</span>]))).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)).to_frame().rename(columns=&#123;<span class="hljs-string">&#x27;money&#x27;</span>: <span class="hljs-string">&#x27;rolling_money_5&#x27;</span>&#125;)<br>    rolling_money_10 = ((np.log1p((dayline_df[<span class="hljs-string">&#x27;money&#x27;</span>]).rolling(<span class="hljs-number">10</span>, min_periods=<span class="hljs-number">1</span>).mean()) - np.log1p((dayline_df[<span class="hljs-string">&#x27;money&#x27;</span>]))).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)).to_frame().rename(columns=&#123;<span class="hljs-string">&#x27;money&#x27;</span>: <span class="hljs-string">&#x27;rolling_money_10&#x27;</span>&#125;)<br>    rolling_volume_3 = ((np.log1p((dayline_df[<span class="hljs-string">&#x27;volume&#x27;</span>]).rolling(<span class="hljs-number">3</span>, min_periods=<span class="hljs-number">1</span>).mean()) - np.log1p((dayline_df[<span class="hljs-string">&#x27;volume&#x27;</span>]))).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)).to_frame().rename(columns=&#123;<span class="hljs-string">&#x27;volume&#x27;</span>: <span class="hljs-string">&#x27;rolling_volume_3&#x27;</span>&#125;)<br>    rolling_volume_5 = ((np.log1p((dayline_df[<span class="hljs-string">&#x27;volume&#x27;</span>]).rolling(<span class="hljs-number">5</span>, min_periods=<span class="hljs-number">1</span>).mean()) - np.log1p((dayline_df[<span class="hljs-string">&#x27;volume&#x27;</span>]))).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)).to_frame().rename(columns=&#123;<span class="hljs-string">&#x27;volume&#x27;</span>: <span class="hljs-string">&#x27;rolling_volume_5&#x27;</span>&#125;)<br>    rolling_volume_10 = ((np.log1p((dayline_df[<span class="hljs-string">&#x27;volume&#x27;</span>]).rolling(<span class="hljs-number">10</span>, min_periods=<span class="hljs-number">1</span>).mean()) - np.log1p((dayline_df[<span class="hljs-string">&#x27;volume&#x27;</span>]))).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)).to_frame().rename(columns=&#123;<span class="hljs-string">&#x27;volume&#x27;</span>: <span class="hljs-string">&#x27;rolling_volume_10&#x27;</span>&#125;)<br>    pct_volatility = ((dayline_df[<span class="hljs-string">&#x27;high&#x27;</span>] - dayline_df[<span class="hljs-string">&#x27;low&#x27;</span>])  / dayline_df[<span class="hljs-string">&#x27;close&#x27;</span>] * <span class="hljs-number">20</span>).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.0</span>).to_frame().rename(columns=&#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;pct_volatility&#x27;</span>&#125;)<br><br>    rolling_pct_volatility_3 = ((dayline_df[<span class="hljs-string">&#x27;high&#x27;</span>].rolling(<span class="hljs-number">3</span>, min_periods=<span class="hljs-number">1</span>).<span class="hljs-built_in">max</span>() - dayline_df[<span class="hljs-string">&#x27;low&#x27;</span>].rolling(<span class="hljs-number">3</span>, min_periods=<span class="hljs-number">1</span>).<span class="hljs-built_in">min</span>()) / dayline_df[<span class="hljs-string">&#x27;close&#x27;</span>]* <span class="hljs-number">20</span>).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.0</span>).to_frame().rename(columns=&#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;rolling_pct_volatility_3&#x27;</span>&#125;)<br>    rolling_pct_volatility_5 = ((dayline_df[<span class="hljs-string">&#x27;high&#x27;</span>].rolling(<span class="hljs-number">5</span>, min_periods=<span class="hljs-number">1</span>).<span class="hljs-built_in">max</span>() - dayline_df[<span class="hljs-string">&#x27;low&#x27;</span>].rolling(<span class="hljs-number">5</span>, min_periods=<span class="hljs-number">1</span>).<span class="hljs-built_in">min</span>()) / dayline_df[<span class="hljs-string">&#x27;close&#x27;</span>] * <span class="hljs-number">20</span>).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.0</span>).to_frame().rename(columns=&#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;rolling_pct_volatility_5&#x27;</span>&#125;)<br>    rolling_pct_volatility_10 = ((dayline_df[<span class="hljs-string">&#x27;high&#x27;</span>].rolling(<span class="hljs-number">10</span>, min_periods=<span class="hljs-number">1</span>).<span class="hljs-built_in">max</span>() - dayline_df[<span class="hljs-string">&#x27;low&#x27;</span>].rolling(<span class="hljs-number">10</span>, min_periods=<span class="hljs-number">1</span>).<span class="hljs-built_in">min</span>()) / dayline_df[<span class="hljs-string">&#x27;close&#x27;</span>] * <span class="hljs-number">20</span>).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.0</span>).to_frame().rename(columns=&#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;rolling_pct_volatility_10&#x27;</span>&#125;)<br><br>    <br>    feature_df = pd.concat([adx_2, adx_5, adx_22, cci_2, cci_5, cci_22, cmo_2, cmo_5, cmo_22, macd_12_26_9, macd_6_30_9, macd_24_52_9, ppo_12_26_9, ppo_24_52_9, pvo_12_26_9, pvo_24_52_9, mfi_2, mfi_5, rsi_2, rsi_5, rsi_14, uo_5_15_30, willr_3, willr_5, willr_10, willr_20, kdj_9_3, kdj_19_3, natr_3, natr_10, log_return_10, percent_return_1, percent_return_2, percent_return_3, percent_return_4, percent_return_5, zscore_5, zscore_14, rvi_5, rvi_14, rolling_money_3, rolling_money_5, rolling_money_10, rolling_volume_3, rolling_volume_5, rolling_volume_10, pct_volatility, rolling_pct_volatility_3, rolling_pct_volatility_5, rolling_pct_volatility_10], axis=<span class="hljs-number">1</span>)<br>    feature_df.columns = [<span class="hljs-string">&#x27;daily_%s&#x27;</span> % i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> feature_df.columns]<br><br>    feature_df[<span class="hljs-string">&#x27;code&#x27;</span>] = dayline_df[<span class="hljs-string">&#x27;code&#x27;</span>]<br>    feature_df = feature_df.reset_index().set_index(<span class="hljs-string">&#x27;code&#x27;</span>).reset_index()<br>    feature_df.iloc[:, <span class="hljs-number">2</span>:] = feature_df.iloc[:, <span class="hljs-number">2</span>:].clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).astype(np.float32)<br><br>    <span class="hljs-keyword">return</span> feature_df<br><br></code></pre></td></tr></table></figure><h2 id="A股因子数据和标签生成"><a href="#A股因子数据和标签生成" class="headerlink" title="A股因子数据和标签生成"></a>A股因子数据和标签生成</h2><h3 id="标签生成"><a href="#标签生成" class="headerlink" title="标签生成"></a>标签生成</h3><p>本次使用申万行业分类作为建模目标，预测当天及次日的开盘、平均、收盘收益，即：</p><ul><li>今开/昨收：今日开盘相对昨天收盘的涨跌百分比(动量效应)</li><li>今收/昨收：今日收盘相对昨天收盘的涨跌百分比(轮动效应)</li><li>今均/昨收：今日平均价格相对昨天收盘的涨跌百分比(轮动效应)</li><li>今收/今开：今日收盘相对今日开盘的涨跌百分比(日内趋势)</li><li>今均/今开：今日平均价格相对今日开盘的涨跌百分比(日内趋势)</li><li>明开/今开：明日开盘价格相对于今日开盘的涨跌百分比(短线效应)</li><li>明收/今开：明日收盘价格相对于今日开盘的涨跌百分比(短线轮动)</li><li>明均/今开：明日平均价格相对于今日开盘的涨跌百分比(短线轮动)</li><li>明开/今均：明日开盘价格相对于今日平均的涨跌百分比(短线轮动)</li><li>明均/今均：明日平均价格相对于今日平均的涨跌百分比(短线轮动)</li></ul><p>标签生成的过程可参考上篇<code>利用pandas_ta自动提取技术面特征</code>,一个例子为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 日内：平均相对于昨收的涨跌百分比(开盘9:15时间截断)</span><br>sector_feature_intraday_avg_close = sector_feature_grouped.apply(<span class="hljs-keyword">lambda</span> row: ((row[<span class="hljs-string">&#x27;high&#x27;</span>] + row[<span class="hljs-string">&#x27;low&#x27;</span>]) / (<span class="hljs-number">2</span> * row.shift(<span class="hljs-number">1</span>)[<span class="hljs-string">&#x27;close&#x27;</span>]) - <span class="hljs-number">1</span>) * <span class="hljs-number">100</span>).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).reset_index().rename(columns=&#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;intraday_avg_close&#x27;</span>&#125;).set_index([<span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>])<br><br><span class="hljs-comment"># 日间：第二天收盘相对于前一天开盘的涨跌百分比(开盘9:15时间截断)</span><br>sector_feature_daily_close_open = sector_feature_grouped.apply(<span class="hljs-keyword">lambda</span> row: (row.shift(-<span class="hljs-number">1</span>)[<span class="hljs-string">&#x27;close&#x27;</span>] / row[<span class="hljs-string">&#x27;open&#x27;</span>] - <span class="hljs-number">1</span>) * <span class="hljs-number">100</span>).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).reset_index().rename(columns=&#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;daily_close_open&#x27;</span>&#125;).set_index([<span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>])<br></code></pre></td></tr></table></figure><p>最终，我们得到类似这样的标签数据：<br><img src="/img/trade_label.png"></p><h3 id="技术因子生成-1"><a href="#技术因子生成-1" class="headerlink" title="技术因子生成"></a>技术因子生成</h3><p>这里的技术因子同上美股市场，不再赘述。选择的标的为申万行业指数、沪深300成分股及其指数、中证500成分股及其指数，总共约1100多只。</p><p>提取完美股和A股的技术因子后，需要将两者(cn_trade_day、us_trade_day)合并，与标签(trade_label_df)一起形成一个数据集。合并的规则是，以A股标签为基准，选择最近一个日期的A/美因子数据，考虑到部分标的数据可能存在的停牌、未上市、退市等特殊情况，还需要对技术因子生成一个掩码，排除掉这些无效数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">data = [] <br>mask = []<br><span class="hljs-keyword">for</span> ind, row <span class="hljs-keyword">in</span> tqdm(trade_label_df.iterrows(), total=<span class="hljs-built_in">len</span>(trade_label_df)):<br>    fea_mask = [<span class="hljs-number">0</span>] * (<span class="hljs-number">1119</span> + <span class="hljs-number">607</span>)<br>    trade_day = datetime.date(ind // <span class="hljs-number">10000</span>, (ind % <span class="hljs-number">10000</span>) // <span class="hljs-number">100</span>, ind % <span class="hljs-number">100</span>)<br>    <br>    cn_last_day = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cn_trade_day <span class="hljs-keyword">if</span> i &lt; trade_day]<br>    cn_fea = cn_df[cn_df.trade_day == cn_last_day[-<span class="hljs-number">1</span>]]<br>    cn_fea[<span class="hljs-string">&#x27;code&#x27;</span>] = cn_fea[<span class="hljs-string">&#x27;code&#x27;</span>] - <span class="hljs-number">1</span><br>    cn_fea_data = [<span class="hljs-number">0</span> ] * <span class="hljs-number">74</span> * <span class="hljs-number">1119</span><br>    <span class="hljs-keyword">for</span> row2 <span class="hljs-keyword">in</span> cn_fea.values:<br>        cn_fea_data[<span class="hljs-number">74</span> * row2[<span class="hljs-number">0</span>]: <span class="hljs-number">74</span> * (row2[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>)] = row2[<span class="hljs-number">2</span>:]<br>        fea_mask[row2[<span class="hljs-number">0</span>]] = <span class="hljs-number">1</span><br>        <br>    us_last_day = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> us_trade_day <span class="hljs-keyword">if</span> i &lt; trade_day]<br>    us_fea = us_df[us_df.trade_day == us_last_day[-<span class="hljs-number">1</span>]]<br>    us_fea[<span class="hljs-string">&#x27;code&#x27;</span>] = us_fea[<span class="hljs-string">&#x27;code&#x27;</span>] - <span class="hljs-number">1300</span><br>    us_fea_data = [<span class="hljs-number">0</span> ] * <span class="hljs-number">74</span> * <span class="hljs-number">607</span><br>    <span class="hljs-keyword">for</span> row2 <span class="hljs-keyword">in</span> us_fea.values:<br>        us_fea_data[<span class="hljs-number">74</span> * row2[<span class="hljs-number">0</span>]: <span class="hljs-number">74</span> * (row2[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>)] = row2[<span class="hljs-number">2</span>:]<br>        fea_mask[row2[<span class="hljs-number">0</span>] + <span class="hljs-number">1119</span>] = <span class="hljs-number">1</span><br>    data.append(cn_fea_data + us_fea_data)<br>    mask.append(fea_mask)<br><br>X = np.array(data, dtype=np.float32)<br>mask = np.array(mask, dtype=np.int32)<br></code></pre></td></tr></table></figure><h2 id="AI建模"><a href="#AI建模" class="headerlink" title="AI建模"></a>AI建模</h2><p>训练集为20220624之前的因子数据及其标签，验证集为20220624之后的15天数据，评估模型的实战效果。</p><h3 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h3><p>使用Pytorch的Dataset读取提取的因子数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TechDataset</span>(<span class="hljs-params">Dataset</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, label=<span class="hljs-literal">None</span>, mask=<span class="hljs-literal">None</span>, feature=<span class="hljs-literal">None</span>, seq_len=<span class="hljs-number">1726</span>, output_size=<span class="hljs-number">223</span></span>):</span><br>        self.label = label<br>        self.mask = mask<br>        self.feature = feature<br>        self.seq_len = seq_len<br>        self.output_size = output_size<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.label)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getitem__</span>(<span class="hljs-params">self, idx</span>):</span><br>        label = torch.tensor(self.label[idx].reshape((self.output_size, <span class="hljs-number">10</span>)), dtype=torch.float32)<br>        input_mask = torch.tensor(self.mask[idx], dtype=torch.<span class="hljs-built_in">bool</span>)<br>        input_techs = torch.tensor(self.feature[idx].reshape((self.seq_len, <span class="hljs-number">74</span>)), dtype=torch.float32)<br>        <br>        <span class="hljs-keyword">return</span> label, input_mask, input_techs<br>    <br>X = np.load(<span class="hljs-string">&#x27;trade_X.npy&#x27;</span>)<br>y =  np.load(<span class="hljs-string">&#x27;trade_y.npy&#x27;</span>)<br>mask = np.load(<span class="hljs-string">&#x27;trade_y_mask.npy&#x27;</span>)<br><br>train_X, valid_X, train_y, valid_y, train_mask_X, valid_mask_X = X[:-<span class="hljs-number">15</span>], X[-<span class="hljs-number">15</span>:], y[:-<span class="hljs-number">15</span>], y[-<span class="hljs-number">15</span>:], mask[:-<span class="hljs-number">15</span>], mask[-<span class="hljs-number">15</span>:]<br>    <br>train_dataset = TechDataset(seq_len=<span class="hljs-number">1726</span>, output_size=<span class="hljs-number">223</span>, label=train_y, mask=train_mask_X, feature=train_X)<br>train_dataloader = DataLoader(train_dataset, batch_size=<span class="hljs-number">16</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">4</span>)<br>    <br>valid_dataset = TechDataset(seq_len=<span class="hljs-number">1726</span>, output_size=<span class="hljs-number">223</span>, label=valid_y, mask=valid_mask_X, feature=valid_X)<br>valid_dataloader = DataLoader(valid_dataset, batch_size=<span class="hljs-number">15</span>, shuffle=<span class="hljs-literal">False</span>, num_workers=<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><h3 id="结构设计"><a href="#结构设计" class="headerlink" title="结构设计"></a>结构设计</h3><p>首先通过一个GLU单元将技术因子数据维度标准到64维，然后使用Transformer对因子数据建模，输出一个<code>Batch * Seq_len * Dim</code>的向量，然后通过<code>TechPredictor</code>部分进行池化、分类，最终得到<code>Batch * 223 * 10</code>的结果，223为标签种类，10为每类收益指标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GatedLinearUnit</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, input_size,</span></span><br><span class="hljs-params"><span class="hljs-function">                 hidden_layer_size,</span></span><br><span class="hljs-params"><span class="hljs-function">                 dropout_rate=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                 activation = <span class="hljs-literal">None</span></span>):</span><br>        <br>        <span class="hljs-built_in">super</span>(GatedLinearUnit, self).__init__()<br><br>        self.input_size = input_size<br>        self.hidden_layer_size = hidden_layer_size<br>        self.dropout_rate = dropout_rate<br>        self.activation_name = activation<br>        <br>        <span class="hljs-keyword">if</span> self.dropout_rate:<br>            self.dropout = nn.Dropout(p=self.dropout_rate)<br>            <br>        self.W4 = nn.Linear(self.input_size, self.hidden_layer_size)<br>        self.W5 = nn.Linear(self.input_size, self.hidden_layer_size)<br>        <br>        <span class="hljs-keyword">if</span> self.activation_name:<br>            self.activation = <span class="hljs-built_in">getattr</span>(nn, self.activation_name)()<br>            <br>        self.sigmoid = nn.Sigmoid()<br>            <br>        self.init_weights()<br>            <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init_weights</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">for</span> n, p <span class="hljs-keyword">in</span> self.named_parameters():<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;bias&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> n:<br>                torch.nn.init.xavier_uniform_(p)<br>            <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;bias&#x27;</span> <span class="hljs-keyword">in</span> n:<br>                torch.nn.init.zeros_(p)<br>            <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, x</span>):</span><br>        <span class="hljs-keyword">if</span> self.dropout_rate:<br>            x = self.dropout(x)<br>      <br>        <span class="hljs-keyword">if</span> self.activation_name:<br>            output = self.sigmoid(self.W4(x)) * self.activation(self.W5(x))<br>        <span class="hljs-keyword">else</span>:<br>            output = self.sigmoid(self.W4(x)) * self.W5(x)<br>            <br>        <span class="hljs-keyword">return</span> output<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TechEncoder</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, depth=<span class="hljs-number">1</span>, dim=<span class="hljs-number">64</span>, group_size=<span class="hljs-number">64</span>, query_key_dim=<span class="hljs-number">32</span>, attn_dropout=<span class="hljs-number">0.2</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.dim = dim<br>        self.tech_emb = GatedLinearUnit(<span class="hljs-number">74</span>, dim)<br>        self.transformer_layers = nn.ModuleList([FLASH(dim=dim, group_size=group_size, query_key_dim=query_key_dim, causal=<span class="hljs-literal">False</span>, dropout=attn_dropout) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(depth)])<br>        self.norm = nn.LayerNorm(dim)<br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, input_techs, attention_mask</span>):</span><br>        input_feature = self.tech_emb(input_techs) <span class="hljs-comment"># Batch * seq_len  * dim</span><br>        <span class="hljs-keyword">for</span> flash <span class="hljs-keyword">in</span> self.transformer_layers:<br>            input_feature = flash(input_feature, mask=attention_mask)<br>        output = self.norm(input_feature) <span class="hljs-comment"># Batch  * seq_len * dim</span><br>        <br>        <span class="hljs-keyword">return</span> output, attention_mask<br>    <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TechPredictor</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, depth=<span class="hljs-number">1</span>, dim=<span class="hljs-number">64</span>, seq_len=<span class="hljs-number">1726</span>, output_size=<span class="hljs-number">223</span>, class_num=<span class="hljs-number">10</span></span>):</span><br>        <span class="hljs-built_in">super</span>(TechPredictor, self).__init__()<br>        self.tech_encoder = TechEncoder(depth=depth, dim=dim)<br>        stride = np.floor(seq_len / output_size).astype(<span class="hljs-built_in">int</span>)<br>        kernel_size =  seq_len - (output_size - <span class="hljs-number">1</span>) * stride<br>        self.max_pooling = nn.MaxPool1d(kernel_size=kernel_size, stride=stride)<br>        self.classifier = nn.Linear(in_features=dim, out_features=class_num)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, input_techs, attention_mask</span>):</span><br>        tech_feature, attention_mask = self.tech_encoder(input_techs, attention_mask) <br>        tech_feature = tech_feature * attention_mask.unsqueeze(-<span class="hljs-number">1</span>)<br>        output = self.max_pooling(tech_feature.transpose(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>).contiguous()).transpose(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>).contiguous() <span class="hljs-comment"># Batch  * 223 * 128</span><br>        output = self.classifier(output)  <span class="hljs-comment"># Batch  * 223 * 10</span><br>        <span class="hljs-keyword">return</span> output<br><br></code></pre></td></tr></table></figure><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>直接使用均方误差损失函数优化模型，同时也计算出pearson相关系数供参考：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calc_loss</span>(<span class="hljs-params">y_true, y_pred</span>):</span><br>    y_true = y_true.reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br>    y_pred = y_pred.reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br>    y_true_label = y_true - y_true.mean(dim=<span class="hljs-number">0</span>, keepdim=<span class="hljs-literal">True</span>)<br>    y_pred_label =  y_pred - y_pred.mean(dim=<span class="hljs-number">0</span>, keepdim=<span class="hljs-literal">True</span>)<br>    loss = F.mse_loss(y_pred, y_true)<br>    pearson = torch.cosine_similarity(y_true_label ,y_pred_label, dim=<span class="hljs-number">0</span>, eps=<span class="hljs-number">1e-6</span>)<br>    <span class="hljs-keyword">return</span> loss, pearson<br></code></pre></td></tr></table></figure><h3 id="训练主流程"><a href="#训练主流程" class="headerlink" title="训练主流程"></a>训练主流程</h3><p>迭代30次，每次训练完后评估效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python">model = TechPredictor(depth=<span class="hljs-number">1</span>, dim=<span class="hljs-number">128</span>, seq_len=<span class="hljs-number">1726</span>, output_size=<span class="hljs-number">223</span>, class_num=<span class="hljs-number">10</span>)<br><br>model = model.to(device)<br>opt = optim.AdamW(model.parameters(), lr=<span class="hljs-number">2e-5</span>)<br>step = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>):<br>    model.train()<br>    <span class="hljs-keyword">for</span> ind, batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_dataloader):<br>        label, input_mask, input_techs = batch<br>        logit = model(input_techs.to(device), input_mask.to(device))<br>        loss, pearson = calc_loss(label.to(device), logit)<br>              <br>        writer.add_scalars(<span class="hljs-string">&#x27;train&#x27;</span>, &#123;<span class="hljs-string">&#x27;loss&#x27;</span>:loss.item()&#125;, step)<br>        <br>        loss.backward()<br>        opt.step()<br>        opt.zero_grad()<br>        <br>        step += <span class="hljs-number">1</span><br>    model.<span class="hljs-built_in">eval</span>()<br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        loss_valid = &#123;<span class="hljs-number">0</span>: [], <span class="hljs-number">1</span>:[], <span class="hljs-number">2</span>:[], <span class="hljs-number">3</span>:[], <span class="hljs-number">4</span>:[], <span class="hljs-number">5</span>:[], <span class="hljs-number">6</span>:[], <span class="hljs-number">7</span>:[], <span class="hljs-number">8</span>:[], <span class="hljs-number">9</span>:[]&#125;<br>        loss_mean = []<br>        <span class="hljs-keyword">for</span> ind, batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(valid_dataloader):<br>            label, input_mask, input_techs = batch<br>            logit = model(input_techs.to(device), input_mask.to(device))<br>            loss, pearson = calc_loss(label.to(device), logit)<br>            <span class="hljs-keyword">for</span> ind, v <span class="hljs-keyword">in</span>  <span class="hljs-built_in">enumerate</span>(pearson.cpu().tolist()):<br>                loss_valid[ind].append(v)<br>            loss_mean.append(loss.item())         <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Epoch: %d, loss: %.4f&quot;</span> % (epoch, np.mean(loss_mean)))<br>    torch.save(model.state_dict(), model_dir + <span class="hljs-string">&quot;/tech_model/TechPredictor2_%d.torch&quot;</span> % epoch)      <br></code></pre></td></tr></table></figure><h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><p>将验证集上的预测结果取出，基准数据沪深300、中证500、创业板指的指标均取<code>明均/今均</code>,预测指标限定在次日收益(‘明均/今均’, ‘明均/今开’, ‘明收/今均’, ‘明开/今开’, ‘明开/今均’)中，<code>Top5收益</code>表示取Top5的预测行业对应的平均收益，<code>Top5预估值</code>表示AI模型预测的均值，Top10类似。</p><table><thead><tr><th align="right">日期</th><th align="right">沪深300</th><th align="right">中证500</th><th align="right">创业板指</th><th align="right">Top5收益</th><th align="right">Top5预估值</th><th align="right">Top10收益</th><th align="right">Top10预估值</th></tr></thead><tbody><tr><td align="right">20220624</td><td align="right">1.603</td><td align="right">1.238</td><td align="right">1.737</td><td align="right">4.416</td><td align="right">0.578</td><td align="right">2.686</td><td align="right">0.568</td></tr><tr><td align="right">20220627</td><td align="right">0.205</td><td align="right">0.461</td><td align="right">-1.069</td><td align="right">2.752</td><td align="right">0.515</td><td align="right">1.88</td><td align="right">0.5</td></tr><tr><td align="right">20220628</td><td align="right">0.133</td><td align="right">-0.212</td><td align="right">-0.22</td><td align="right">1.277</td><td align="right">0.614</td><td align="right">0.479</td><td align="right">0.601</td></tr><tr><td align="right">20220629</td><td align="right">0.179</td><td align="right">0.054</td><td align="right">-0.046</td><td align="right">0.406</td><td align="right">0.526</td><td align="right">0.19</td><td align="right">0.521</td></tr><tr><td align="right">20220630</td><td align="right">0.193</td><td align="right">0.207</td><td align="right">-0.285</td><td align="right">1.504</td><td align="right">0.632</td><td align="right">1.074</td><td align="right">0.612</td></tr><tr><td align="right">20220701</td><td align="right">-0.295</td><td align="right">0.191</td><td align="right">-0.151</td><td align="right">-0.218</td><td align="right">0.858</td><td align="right">0.207</td><td align="right">0.817</td></tr><tr><td align="right">20220704</td><td align="right">0.515</td><td align="right">0.42</td><td align="right">1.164</td><td align="right">1.628</td><td align="right">0.485</td><td align="right">2.107</td><td align="right">0.472</td></tr><tr><td align="right">20220705</td><td align="right">-1.026</td><td align="right">-0.983</td><td align="right">-0.231</td><td align="right">0.218</td><td align="right">0.485</td><td align="right">-0.1</td><td align="right">0.472</td></tr><tr><td align="right">20220706</td><td align="right">-0.329</td><td align="right">0.048</td><td align="right">0.182</td><td align="right">-0.496</td><td align="right">0.53</td><td align="right">-0.755</td><td align="right">0.515</td></tr><tr><td align="right">20220707</td><td align="right">0.654</td><td align="right">0.247</td><td align="right">0.946</td><td align="right">0.906</td><td align="right">0.471</td><td align="right">1.522</td><td align="right">0.45</td></tr><tr><td align="right">20220708</td><td align="right">-1.905</td><td align="right">-1.8</td><td align="right">-2.652</td><td align="right">-1.338</td><td align="right">0.228</td><td align="right">-1.445</td><td align="right">0.22</td></tr><tr><td align="right">20220711</td><td align="right">-0.799</td><td align="right">-0.609</td><td align="right">-1.36</td><td align="right">-0.425</td><td align="right">0.327</td><td align="right">-0.922</td><td align="right">0.31</td></tr><tr><td align="right">20220712</td><td align="right">-0.468</td><td align="right">-0.713</td><td align="right">-0.636</td><td align="right">-1.397</td><td align="right">0.494</td><td align="right">-1.267</td><td align="right">0.456</td></tr><tr><td align="right">20220713</td><td align="right">0.214</td><td align="right">0.79</td><td align="right">2.588</td><td align="right">0.666</td><td align="right">0.583</td><td align="right">1.286</td><td align="right">0.57</td></tr><tr><td align="right">20220714</td><td align="right">-0.595</td><td align="right">-0.586</td><td align="right">0.319</td><td align="right">-1.321</td><td align="right">0.421</td><td align="right">-1.239</td><td align="right">0.414</td></tr></tbody></table><p>从结果上看<code>Top5收益</code>整体是优于基准指数的，平均收益达到0.5以上，如果做一次过滤，取预估值大于0.5，那么平均收益可达1.2以上，可以起到一定的择时、选股效果。</p><p>以6月24号为例，AI模型选择出的Top5行业以及买卖时间策略，收益高达4个点以上：</p><table><thead><tr><th align="right">trade_day</th><th align="left">sector</th><th align="left">metric</th><th align="right">actual</th><th align="right">prediction</th></tr></thead><tbody><tr><td align="right">20220624</td><td align="left">申万多业态零售</td><td align="left">明均/今开</td><td align="right">1.6</td><td align="right">0.586</td></tr><tr><td align="right">20220624</td><td align="left">申万酒店</td><td align="left">明均/今开</td><td align="right">7.362</td><td align="right">0.584</td></tr><tr><td align="right">20220624</td><td align="left">申万旅游综合</td><td align="left">明均/今开</td><td align="right">8.8</td><td align="right">0.576</td></tr><tr><td align="right">20220624</td><td align="left">申万百货</td><td align="left">明均/今开</td><td align="right">1.812</td><td align="right">0.573</td></tr><tr><td align="right">20220624</td><td align="left">申万超市</td><td align="left">明均/今开</td><td align="right">2.508</td><td align="right">0.572</td></tr></tbody></table><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="https://mp.weixin.qq.com/s/PPduk4xPcix9USW9HmUpHw">利用pandas_ta自动提取技术面特征</a></li><li><a href="https://mp.weixin.qq.com/s/CJxhVB6m2-DINp1mGNL4Bw">基于新闻事件Bert序列建模的行业涨跌预测</a></li></ul><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。</p><p><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pandas_ta</tag>
      
      <tag>技术分析</tag>
      
      <tag>跨市场联动</tag>
      
      <tag>美股</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迅投QMT量化平台交易接口封装</title>
    <link href="/2022/07/10/%E8%BF%85%E6%8A%95QMT%E8%82%A1%E7%A5%A8%E4%BA%A4%E6%98%93%E6%8E%A5%E5%8F%A3%E5%B0%81%E8%A3%85/"/>
    <url>/2022/07/10/%E8%BF%85%E6%8A%95QMT%E8%82%A1%E7%A5%A8%E4%BA%A4%E6%98%93%E6%8E%A5%E5%8F%A3%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<blockquote><p>迅投QMT量化平台提供了极简客户端，可直接使用Python调用其提供的交易功能。本文使用Python中的Sanic异步框架将交易接口进一步封装成HTTP访问接口，方便从远程Linux主机调用。</p></blockquote><h2 id="定义全局环境"><a href="#定义全局环境" class="headerlink" title="定义全局环境"></a>定义全局环境</h2><p>导入xtquant库、aiohttp库、sanic库,设置访问路由为<code>/xtquant/trade</code>，运行的http端口为7800：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> xtquant <span class="hljs-keyword">import</span> xtdata, xttrader, xtconstant<br><span class="hljs-keyword">from</span> xtquant.xttrader <span class="hljs-keyword">import</span> XtQuantTrader, XtQuantTraderCallback<br><span class="hljs-keyword">from</span> xtquant.xttype <span class="hljs-keyword">import</span> StockAccount<br><span class="hljs-keyword">import</span> aiohttp, random<br><span class="hljs-keyword">from</span> sanic <span class="hljs-keyword">import</span> Sanic, Blueprint, response<br><br>api = Blueprint(<span class="hljs-string">&#x27;xtquant&#x27;</span>, url_prefix=<span class="hljs-string">&#x27;/xtquant/trade&#x27;</span>)<br><br><span class="hljs-meta">@api.listener(<span class="hljs-params"><span class="hljs-string">&#x27;before_server_start&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">before_server_start</span>(<span class="hljs-params">app, loop</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;全局共享session&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">global</span> session, trader<br>    jar = aiohttp.CookieJar(unsafe=<span class="hljs-literal">True</span>)<br>    session = aiohttp.ClientSession(cookie_jar=jar, connector=aiohttp.TCPConnector(ssl=<span class="hljs-literal">False</span>))<br>    trader = Trader()<br><br><span class="hljs-meta">@api.listener(<span class="hljs-params"><span class="hljs-string">&#x27;after_server_stop&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">after_server_stop</span>(<span class="hljs-params">app, loop</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;关闭session&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">await</span> session.close()<br><br><br>order_status = &#123;<br>    xtconstant.ORDER_UNREPORTED: <span class="hljs-string">&#x27;未报&#x27;</span>,<br>    xtconstant.ORDER_WAIT_REPORTING: <span class="hljs-string">&#x27;待报&#x27;</span>,<br>    xtconstant.ORDER_REPORTED: <span class="hljs-string">&#x27;已报&#x27;</span>,<br>    xtconstant.ORDER_REPORTED_CANCEL: <span class="hljs-string">&#x27;已报待撤&#x27;</span>,<br>    xtconstant.ORDER_PARTSUCC_CANCEL: <span class="hljs-string">&#x27;部成待撤&#x27;</span>,<br>    xtconstant.ORDER_PART_CANCEL: <span class="hljs-string">&#x27;部撤&#x27;</span>,<br>    xtconstant.ORDER_CANCELED: <span class="hljs-string">&#x27;已撤&#x27;</span>,<br>    xtconstant.ORDER_PART_SUCC: <span class="hljs-string">&#x27;部成&#x27;</span>,<br>    xtconstant.ORDER_SUCCEEDED: <span class="hljs-string">&#x27;已成&#x27;</span>,<br>    xtconstant.ORDER_JUNK: <span class="hljs-string">&#x27;废单&#x27;</span>,<br>    xtconstant.ORDER_UNKNOWN: <span class="hljs-string">&#x27;未知&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app = Sanic(name=<span class="hljs-string">&#x27;xtquant&#x27;</span>)<br>    app.config.RESPONSE_TIMEOUT = <span class="hljs-number">600000</span><br>    app.config.REQUEST_TIMEOUT = <span class="hljs-number">600000</span><br>    app.config.KEEP_ALIVE_TIMEOUT = <span class="hljs-number">600</span><br>    app.blueprint(api)<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">7800</span>, workers=<span class="hljs-number">1</span>, auto_reload=<span class="hljs-literal">True</span>, debug=<span class="hljs-literal">False</span>)<br><br><br></code></pre></td></tr></table></figure><h2 id="定义交易账户全局信息类"><a href="#定义交易账户全局信息类" class="headerlink" title="定义交易账户全局信息类"></a>定义交易账户全局信息类</h2><p>这里使用单例模式，确保Trader中的RPC实例和账户信息唯一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    _instance = <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__new__</span>(<span class="hljs-params">class_, *args, **kwargs</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(class_._instance, class_):<br>            class_._instance = <span class="hljs-built_in">object</span>.__new__(class_, *args, **kwargs)<br>        <span class="hljs-keyword">return</span> class_._instance<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Trader</span>(<span class="hljs-params">Singleton</span>):</span><br>    xt_trader = <span class="hljs-literal">None</span><br>    account = <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_trader</span>(<span class="hljs-params">self, qmt_dir, session_id</span>):</span><br>        self.xt_trader = XtQuantTrader(qmt_dir, session_id)<br>        <span class="hljs-comment"># 启动交易线程</span><br>        self.xt_trader.start()<br>        <span class="hljs-comment"># 建立交易连接，返回0表示连接成功</span><br>        connect_result = self.xt_trader.connect()<br>        <span class="hljs-keyword">return</span> connect_result<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_account</span>(<span class="hljs-params">self, account_id, account_type</span>):</span><br>        self.account = StockAccount(account_id, account_type=account_type)<br>        <span class="hljs-keyword">return</span> self.account<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_account</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.account<br>    <br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_trader</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.xt_trader<br></code></pre></td></tr></table></figure><h2 id="账号登录"><a href="#账号登录" class="headerlink" title="账号登录"></a>账号登录</h2><p>随机设置一个session_id值，并传入极简客户端用户目录和账号ID、类型，连接客户端：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-meta">@api.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    账号登录</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    session_id = <span class="hljs-built_in">int</span>(request.args.get(<span class="hljs-string">&quot;session_id&quot;</span>, random.randint(<span class="hljs-number">20000</span>, <span class="hljs-number">60000</span>)))<br>    qmt_dir = request.args.get(<span class="hljs-string">&quot;qmt_dir&quot;</span>, <span class="hljs-string">&#x27;C:\\gszq\\qmt\\userdata_mini&#x27;</span>)<br>    account_id = request.args.get(<span class="hljs-string">&quot;account_id&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    account_type = request.args.get(<span class="hljs-string">&quot;account_type&quot;</span>, <span class="hljs-string">&#x27;STOCK&#x27;</span>) <span class="hljs-comment"># 账号类型，可选STOCK、CREDIT</span><br><br>    connect_result = trader.set_trader(qmt_dir, session_id)<br>    trader.set_account(account_id, account_type=account_type)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;交易连接成功！&quot;</span>) <span class="hljs-keyword">if</span> connect_result == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;交易连接失败！&quot;</span>)<br>    <span class="hljs-keyword">return</span> response.json(&#123;<span class="hljs-string">&quot;status&quot;</span>: connect_result&#125;)<br><br></code></pre></td></tr></table></figure><h2 id="查询功能封装"><a href="#查询功能封装" class="headerlink" title="查询功能封装"></a>查询功能封装</h2><p>查询资产、当前持仓、当日成交、当日委托等：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@api.route(<span class="hljs-params"><span class="hljs-string">&#x27;/query/assets&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query_assets</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    查询总资产</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    asset = trader.xt_trader.query_stock_asset(trader.account)<br>    <span class="hljs-keyword">return</span> response.json(&#123;<span class="hljs-string">&quot;总资产&quot;</span>: asset.total_asset, <span class="hljs-string">&quot;现金&quot;</span>: asset.cash, <span class="hljs-string">&quot;持仓市值&quot;</span>: asset.market_value, <span class="hljs-string">&quot;冻结金额&quot;</span>: asset.frozen_cash&#125;)<br><br><span class="hljs-meta">@api.route(<span class="hljs-params"><span class="hljs-string">&#x27;/query/holding&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query_holding</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    查询当前持仓</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    holding = []<br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> trader.xt_trader.query_stock_positions(trader.account):<br>        holding.append([&#123;<span class="hljs-string">&#x27;股票代码&#x27;</span>: p.stock_code, <span class="hljs-string">&#x27;持仓&#x27;</span>: p.volume, <span class="hljs-string">&#x27;可用持仓&#x27;</span>: p.can_use_volume, <span class="hljs-string">&#x27;成本&#x27;</span>: p.open_price, <span class="hljs-string">&#x27;持仓市值&#x27;</span>: p.market_value&#125;])<br>    <span class="hljs-keyword">return</span> response.json(holding, ensure_ascii=<span class="hljs-literal">False</span>)<br><br><span class="hljs-meta">@api.route(<span class="hljs-params"><span class="hljs-string">&#x27;/query/trade&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query_trade</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    查询当日成交</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    trades = trader.xt_trader.query_stock_trades(trader.account)<br><br>    result = []<br>    <span class="hljs-keyword">for</span> trade <span class="hljs-keyword">in</span> trades:<br>        result.append(&#123;<span class="hljs-string">&#x27;股票代码&#x27;</span>: trade.stock_code, <span class="hljs-string">&#x27;委托类型&#x27;</span>: trade.order_type, <span class="hljs-string">&#x27;成交数量&#x27;</span>: trade.traded_volume, <span class="hljs-string">&#x27;成交均价&#x27;</span>: trade.traded_price, <span class="hljs-string">&#x27;成交金额&#x27;</span>: trade.traded_amount, <span class="hljs-string">&#x27;成交时间&#x27;</span>: trade.traded_time, <span class="hljs-string">&quot;成交编号&quot;</span>: trade.traded_id, <span class="hljs-string">&quot;柜台合同编号&quot;</span>: trade.order_sysid&#125;)<br>    <span class="hljs-keyword">return</span> response.json(result, ensure_ascii=<span class="hljs-literal">False</span>)<br><br><span class="hljs-meta">@api.route(<span class="hljs-params"><span class="hljs-string">&#x27;/query/order&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query_order</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    查询当日委托</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    order_id = request.args.get(<span class="hljs-string">&#x27;order_id&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> order_id == <span class="hljs-string">&#x27;&#x27;</span>:<br>        orders = trader.xt_trader.query_stock_orders(trader.account)<br>    <span class="hljs-keyword">else</span>:<br>        orders = trader.xt_trader.query_stock_order(trader.account, <span class="hljs-built_in">int</span>(order_id))<br>        <span class="hljs-comment"># 订单不存在，下单失败</span><br>        <span class="hljs-keyword">if</span> orders <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> response.json([], ensure_ascii=<span class="hljs-literal">False</span>)<br>        orders = [orders]<br>    result = []<br>    <span class="hljs-keyword">for</span> order <span class="hljs-keyword">in</span> orders:<br>        result.append(&#123;<span class="hljs-string">&#x27;股票代码&#x27;</span>: order.stock_code, <span class="hljs-string">&#x27;委托数量&#x27;</span>: order.order_volume, <span class="hljs-string">&#x27;成交数量&#x27;</span>: order.traded_volume, <span class="hljs-string">&#x27;委托价格&#x27;</span>: order.price, <span class="hljs-string">&#x27;委托类型&#x27;</span>: order.order_type, <span class="hljs-string">&#x27;委托状态&#x27;</span>: order_status.get(order.order_status), <span class="hljs-string">&quot;订单编号&quot;</span>: order.order_id, <span class="hljs-string">&quot;柜台合同编号&quot;</span>: order.order_sysid, <span class="hljs-string">&quot;报单时间&quot;</span>: order.order_time&#125;)<br>    <span class="hljs-keyword">return</span> response.json(result, ensure_ascii=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><h2 id="交易功能封装"><a href="#交易功能封装" class="headerlink" title="交易功能封装"></a>交易功能封装</h2><p>包含下单和撤单两类，下单成功会返回一个大于0的订单号，撤单只需传入这个订单号即可，撤单成功返回0。</p><p> <code>注意</code>：有时会存在下单失败的情况，因此最好下单后使用<strong>查询当日委托</strong>接口查询订单是否真的传送到客户端，如果不存在则重新下单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@api.route(<span class="hljs-params"><span class="hljs-string">&#x27;/place_order&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">trade_place_order</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    下单</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    stock_code = request.args.get(<span class="hljs-string">&#x27;stock_code&#x27;</span>, <span class="hljs-string">&#x27;510300.SH&#x27;</span>)<br>    direction = xtconstant.STOCK_BUY <span class="hljs-keyword">if</span> request.args.get(<span class="hljs-string">&#x27;direction&#x27;</span>, <span class="hljs-string">&#x27;buy&#x27;</span>) == <span class="hljs-string">&#x27;buy&#x27;</span> <span class="hljs-keyword">else</span> xtconstant.STOCK_SELL<br>    volumn = <span class="hljs-built_in">int</span>(request.args.get(<span class="hljs-string">&#x27;volumn&#x27;</span>, <span class="hljs-string">&#x27;100&#x27;</span>))<br>    price = <span class="hljs-built_in">float</span>(request.args.get(<span class="hljs-string">&#x27;price&#x27;</span>, <span class="hljs-string">&#x27;4.4&#x27;</span>))<br>    order_id = trader.xt_trader.order_stock(trader.account, stock_code, direction, volumn, xtconstant.FIX_PRICE, price, <span class="hljs-string">&#x27;strategy_name&#x27;</span>, <span class="hljs-string">&#x27;remark&#x27;</span>)<br>    <span class="hljs-keyword">return</span> response.json(&#123;<span class="hljs-string">&#x27;order_id&#x27;</span>: order_id&#125;, ensure_ascii=<span class="hljs-literal">False</span>)<br><br><span class="hljs-meta">@api.route(<span class="hljs-params"><span class="hljs-string">&#x27;/cancel_order&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">trade_cancel_order</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    撤单</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    order_id = <span class="hljs-built_in">int</span>(request.args.get(<span class="hljs-string">&#x27;order_id&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>))<br>    cancel_order_result = trader.xt_trader.cancel_order_stock(trader.account, order_id)<br>    <span class="hljs-keyword">return</span> response.json(&#123;<span class="hljs-string">&#x27;cancel_order_result&#x27;</span>: cancel_order_result&#125;, ensure_ascii=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><p>0x00 启动服务器端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python trade_service.py<br></code></pre></td></tr></table></figure><p>0x01 登录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-built_in">print</span>(requests.get(<span class="hljs-string">&#x27;http://127.0.0.1:7800/xtquant/trade/login?account_id=******&#x27;</span>).json())<br><br>&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">0</span>&#125;<br></code></pre></td></tr></table></figure><p>0x02 下单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(requests.get(<span class="hljs-string">&#x27;http://127.0.0.1:7800/xtquant/trade/place_order?stock_code=113025.SH&amp;price=300&amp;volumn=10&#x27;</span>).json())<br><br>&#123;<span class="hljs-string">&#x27;order_id&#x27;</span>: <span class="hljs-number">403701775</span>&#125;<br></code></pre></td></tr></table></figure><p>0x03 撤单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(requests.get(<span class="hljs-string">&#x27;http://127.0.0.1:7800/xtquant/trade/cancel_order?order_id=403701775&#x27;</span>).json())<br><br>&#123;<span class="hljs-string">&#x27;cancel_order_result&#x27;</span>: <span class="hljs-number">0</span>&#125;<br></code></pre></td></tr></table></figure><p>0x04 查询订单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(requests.get(<span class="hljs-string">&#x27;http://127.0.0.1:7800/xtquant/trade/query/order?order_id=403701775&#x27;</span>).json())<br><br>[&#123;<span class="hljs-string">&#x27;股票代码&#x27;</span>: <span class="hljs-string">&#x27;113025.SH&#x27;</span>, <span class="hljs-string">&#x27;委托数量&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;成交数量&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;委托价格&#x27;</span>: <span class="hljs-number">300.0</span>, <span class="hljs-string">&#x27;委托类型&#x27;</span>: <span class="hljs-number">23</span>, <span class="hljs-string">&#x27;委托状态&#x27;</span>: <span class="hljs-string">&#x27;已撤&#x27;</span>, <span class="hljs-string">&#x27;订单编号&#x27;</span>: <span class="hljs-number">403701775</span>, <span class="hljs-string">&#x27;柜台合同编号&#x27;</span>: <span class="hljs-string">&#x27;131&#x27;</span>, <span class="hljs-string">&#x27;报单时间&#x27;</span>: <span class="hljs-number">165721</span>*****&#125;]<br></code></pre></td></tr></table></figure><p>注意：<font color='red'>仅供参考，使用后果自负，由此造成的损失概不负责。为保证安全请设置访问防火墙，禁止用于非法用途！</font></p><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="https://mp.weixin.qq.com/s/5XI09nyStjmD0faYs9UIlw">初探迅投QMT极简策略系统</a></li></ul><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。</p><p><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>迅投QMT</tag>
      
      <tag>量化交易</tag>
      
      <tag>交易接口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用pandas_ta自动提取技术面特征</title>
    <link href="/2022/07/09/%E5%88%A9%E7%94%A8pandas_ta%E8%87%AA%E5%8A%A8%E6%8F%90%E5%8F%96%E6%8A%80%E6%9C%AF%E9%9D%A2%E7%89%B9%E5%BE%81/"/>
    <url>/2022/07/09/%E5%88%A9%E7%94%A8pandas_ta%E8%87%AA%E5%8A%A8%E6%8F%90%E5%8F%96%E6%8A%80%E6%9C%AF%E9%9D%A2%E7%89%B9%E5%BE%81/</url>
    
    <content type="html"><![CDATA[<blockquote><p>TA-Lib是一个技术分析库，涵盖了150多种股票、期货交易软件中常用的技术分析指标，如MACD、RSI、KDJ、动量指标、布林带等等，而<code>pandas-ta</code>则是一个基于pandas和ta-lib的高级技术分析工具，具有​​130多个指标和实用功能以及60多个TA-Lib中包含的蜡烛模式。本章节记录如何利用<code>pandas-ta</code>快速提取技术面特征。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装<code>pandas-ta</code>本身非常简单，直接pip一下就可以，如果想用ta-lib的一些特性，则还需要安装<code>ta-lib</code>本身</p><ul><li>Anaconda：使用Anaconda集成环境，可直接<code>conda install -c conda-forge ta-lib</code></li><li>Windows: 直接在<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#ta-lib">https://www.lfd.uci.edu/~gohlke/pythonlibs/#ta-lib</a> 中下载离线包安装即可</li><li>Linux: 需要编译安装C++原始环境库(<a href="http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz">http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz</a>) ，然后pip安装<code>pip install TA-Lib</code></li></ul><p>pandas-ta提供的主要函数有：</p><ul><li>蜡烛图形态：Candles ，基于K线图的形态识别，如三只乌鸦等</li><li>周期特征：Cycles，如正弦波拟合等</li><li>动量特征：Momentum，如KDJ、RSI等</li><li>覆盖特征：Overlap，主要包含各种移动平均线系列，如EMA指数平滑</li><li>回报特征：Performance ，如百分比回报、log回报等</li><li>统计特征：Statistics，如熵、中位数、分位数、标准差等</li><li>趋势特征：Trend， 如阿隆指数等</li><li>波动率特征：Volatility，如布林带等 </li><li>成交量特征：Volume，如资金流指数等</li><li>其他特征：如神奇九转(td_seq)等</li></ul><h2 id="准备K线数据"><a href="#准备K线数据" class="headerlink" title="准备K线数据"></a>准备K线数据</h2><p>这里主要提取1min和1d两种粒度数据中的特征，日内1分钟数据未除权，日间1天数据使用后复权，保持序列的连贯性。</p><h3 id="读取日内K线数据-未复权"><a href="#读取日内K线数据-未复权" class="headerlink" title="读取日内K线数据(未复权)"></a>读取日内K线数据(未复权)</h3><p>这里以聚宽数据为例，读取指定时间区间中1min数据，并生成对应的日内收益标签，详细功能见代码中的注释。</p><p>主要的收益计算为日内指标，分为有两类：</p><ul><li>日内剩余时间段里的平均收益百分比</li><li>日内随后5min、10min的平均收益</li></ul><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 日内：聚宽</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_jqdata_kline</span>(<span class="hljs-params">code=<span class="hljs-string">&#x27;510050.SH&#x27;</span>, start_date=<span class="hljs-string">&#x27;2021-11-01&#x27;</span>, end_date=<span class="hljs-string">&#x27;2022-01-01&#x27;</span></span>):</span><br>    <span class="hljs-comment"># 代码转换</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> code.endswith((<span class="hljs-string">&#x27;.XSHG&#x27;</span>, <span class="hljs-string">&#x27;.XSHE&#x27;</span>)):<br>        ticker, exchange  = code.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>        code = ticker + <span class="hljs-string">&#x27;.&#x27;</span> + &#123;<span class="hljs-string">&#x27;SZ&#x27;</span>: <span class="hljs-string">&#x27;XSHE&#x27;</span>, <span class="hljs-string">&#x27;BJ&#x27;</span>: <span class="hljs-string">&#x27;XSHE&#x27;</span>, <span class="hljs-string">&#x27;SH&#x27;</span>: <span class="hljs-string">&#x27;XSHG&#x27;</span>&#125;.get(exchange.upper())<br>    <span class="hljs-comment"># 提取stock_kline中的1min数据</span><br>    query = <span class="hljs-string">&quot;select * from jqdata.stock_kline where code=&#x27;&#123;&#125;&#x27; and volume !=0.0  and trade_day &gt;=&#x27;&#123;&#125;&#x27; and trade_day &lt;&#x27;&#123;&#125;&#x27; and toDayOfWeek(trade_day) &lt; 6&quot;</span>.<span class="hljs-built_in">format</span>(code, start_date, end_date)<br>    data = client.execute(query)<br><br>    <span class="hljs-comment"># 提取stock_dayline中的1d数据,主要是复权因子</span><br>    day_query = <span class="hljs-string">&quot;select trade_day, pre_close, factor from jqdata.stock_dayline where code=&#x27;&#123;&#125;&#x27; and volume !=0.0  and trade_day &gt;=&#x27;&#123;&#125;&#x27; and trade_day &lt;&#x27;&#123;&#125;&#x27; and toDayOfWeek(trade_day) &lt; 6&quot;</span>.<span class="hljs-built_in">format</span>(code, start_date, end_date)<br>    day_data = client.execute(day_query)<br>    <span class="hljs-comment"># 获取复权后的昨收数据</span><br>    pre_close = &#123;i[<span class="hljs-number">0</span>]: np.<span class="hljs-built_in">round</span>(i[<span class="hljs-number">1</span>] / i[<span class="hljs-number">2</span>] , <span class="hljs-number">3</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span>  day_data&#125;<br><br>    df = pd.DataFrame(data, columns=[<span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;dtype&#x27;</span>, <span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;trade_time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;money&#x27;</span>, <span class="hljs-string">&#x27;avg&#x27;</span>])<br>    df = df.sort_values(by=<span class="hljs-string">&#x27;trade_time&#x27;</span>).drop_duplicates(subset=[<span class="hljs-string">&#x27;trade_time&#x27;</span>], keep=<span class="hljs-string">&#x27;first&#x27;</span>).reset_index(drop=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 补充昨收数据</span><br>    df[<span class="hljs-string">&#x27;pre_close&#x27;</span>] = df[<span class="hljs-string">&#x27;trade_day&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: pre_close.get(x, <span class="hljs-number">0</span>))<br>    df[<span class="hljs-string">&#x27;trade_day&#x27;</span>] = df[<span class="hljs-string">&#x27;trade_day&#x27;</span>].astype(<span class="hljs-built_in">str</span>)<br><br>    <span class="hljs-comment"># 当天收盘相对于昨收的百分比</span><br>    df[<span class="hljs-string">&#x27;daily_percent&#x27;</span>] = (df[<span class="hljs-string">&#x27;close&#x27;</span>] - df[<span class="hljs-string">&#x27;pre_close&#x27;</span>]) / df[<span class="hljs-string">&#x27;pre_close&#x27;</span>]<br>    df[<span class="hljs-string">&#x27;minutes_of_day&#x27;</span>] = df.trade_time.dt.hour * <span class="hljs-number">60</span> + df.trade_time.dt.minute<br><br>    <span class="hljs-comment"># 过滤尾盘集合竞价数据    </span><br>    df = df[~df.minutes_of_day.isin([<span class="hljs-number">898</span>, <span class="hljs-number">899</span>])]<br><br>    <span class="hljs-comment"># 此刻买进，日内剩余时间段内的收益25%分位数</span><br>    df[<span class="hljs-string">&#x27;label_d0_25&#x27;</span>] = ((df.groupby([<span class="hljs-string">&#x27;trade_day&#x27;</span>])[<span class="hljs-string">&#x27;avg&#x27;</span>].transform(<span class="hljs-keyword">lambda</span> row: row[::-<span class="hljs-number">1</span>].shift(<span class="hljs-number">1</span>).expanding(min_periods=<span class="hljs-number">1</span>).quantile(<span class="hljs-number">0.25</span>)[::-<span class="hljs-number">1</span>]) - df[<span class="hljs-string">&#x27;avg&#x27;</span>]) * <span class="hljs-number">100</span>).div(df[<span class="hljs-string">&#x27;avg&#x27;</span>])<br>    <span class="hljs-comment"># 此刻买进，日内剩余时间段内的收益50%分位数</span><br>    df[<span class="hljs-string">&#x27;label_d0_50&#x27;</span>] = ((df.groupby([<span class="hljs-string">&#x27;trade_day&#x27;</span>])[<span class="hljs-string">&#x27;avg&#x27;</span>].transform(<span class="hljs-keyword">lambda</span> row: row[::-<span class="hljs-number">1</span>].shift(<span class="hljs-number">1</span>).expanding(min_periods=<span class="hljs-number">1</span>).quantile(<span class="hljs-number">0.5</span>)[::-<span class="hljs-number">1</span>]) - df[<span class="hljs-string">&#x27;avg&#x27;</span>]) * <span class="hljs-number">100</span>).div(df[<span class="hljs-string">&#x27;avg&#x27;</span>])<br>    <span class="hljs-comment"># 此刻买进，日内剩余时间段内的收益75%分位数</span><br>    df[<span class="hljs-string">&#x27;label_d0_75&#x27;</span>] = ((df.groupby([<span class="hljs-string">&#x27;trade_day&#x27;</span>])[<span class="hljs-string">&#x27;avg&#x27;</span>].transform(<span class="hljs-keyword">lambda</span> row: row[::-<span class="hljs-number">1</span>].shift(<span class="hljs-number">1</span>).expanding(min_periods=<span class="hljs-number">1</span>).quantile(<span class="hljs-number">0.75</span>)[::-<span class="hljs-number">1</span>]) - df[<span class="hljs-string">&#x27;avg&#x27;</span>]) * <span class="hljs-number">100</span>).div(df[<span class="hljs-string">&#x27;avg&#x27;</span>])<br><br>    <span class="hljs-comment"># 此刻买进，日内5分钟时间段内的收益50%分位具体值</span><br>    df[<span class="hljs-string">&#x27;label_rolling_5_50_bps&#x27;</span>] = (df.groupby([<span class="hljs-string">&#x27;trade_day&#x27;</span>])[<span class="hljs-string">&#x27;avg&#x27;</span>].transform(<span class="hljs-keyword">lambda</span> row: row[::-<span class="hljs-number">1</span>].shift(<span class="hljs-number">1</span>).rolling(<span class="hljs-number">5</span>, min_periods=<span class="hljs-number">1</span>).quantile(<span class="hljs-number">0.5</span>)[::-<span class="hljs-number">1</span>]) - df[<span class="hljs-string">&#x27;avg&#x27;</span>]) * <span class="hljs-number">100</span><br>    <span class="hljs-comment"># 此刻买进，日内5分钟时间段内的收益50%分位数</span><br>    df[<span class="hljs-string">&#x27;label_rolling_5_50&#x27;</span>] = df[<span class="hljs-string">&#x27;label_rolling_5_50_bps&#x27;</span>].div(df[<span class="hljs-string">&#x27;avg&#x27;</span>])<br>    <span class="hljs-comment"># 此刻买进，日内10分钟时间段内的收益50%分位具体值</span><br>    df[<span class="hljs-string">&#x27;label_rolling_10_50_bps&#x27;</span>] = df.groupby([<span class="hljs-string">&#x27;trade_day&#x27;</span>])[<span class="hljs-string">&#x27;avg&#x27;</span>].transform(<span class="hljs-keyword">lambda</span> row: row[::-<span class="hljs-number">1</span>].shift(<span class="hljs-number">1</span>).rolling(<span class="hljs-number">10</span>, min_periods=<span class="hljs-number">1</span>).quantile(<span class="hljs-number">0.5</span>)[::-<span class="hljs-number">1</span>]) - df[<span class="hljs-string">&#x27;avg&#x27;</span>]<br>    <span class="hljs-comment"># 此刻买进，日内10分钟时间段内的收益50%分位数</span><br>    df[<span class="hljs-string">&#x27;label_rolling_10_50&#x27;</span>] = df[<span class="hljs-string">&#x27;label_rolling_10_50_bps&#x27;</span>].div(df[<span class="hljs-string">&#x27;avg&#x27;</span>])<br><br>    <span class="hljs-keyword">return</span> df.reset_index(drop=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><h3 id="读取日间K线数据-后复权"><a href="#读取日间K线数据-后复权" class="headerlink" title="读取日间K线数据(后复权)"></a>读取日间K线数据(后复权)</h3><p>日线有两个，一个是聚宽数据，主要针对国内市场，还有一个是华盛通数据，针对香港和美国市场，都从clickhouse数据库中读取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 日线: 华盛通</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_hstong_dayline</span>(<span class="hljs-params">market=<span class="hljs-string">&#x27;cn&#x27;</span>, code=<span class="hljs-string">&#x27;300369.SZ&#x27;</span>, start_date=<span class="hljs-string">&#x27;2018-11-01&#x27;</span>, end_date=<span class="hljs-string">&#x27;2022-01-01&#x27;</span></span>):</span><br>    query = <span class="hljs-string">&quot;select code, data_date, price_open, price_close, price_low, price_high, price_last, volume, deal  from hstong.dayline_hfq_&#123;&#125; where code=&#x27;&#123;&#125;&#x27; and volume !=0.0  and data_date &gt;=&#x27;&#123;&#125;&#x27; and data_date &lt;=&#x27;&#123;&#125;&#x27; and toDayOfWeek(data_date) &lt; 6&quot;</span>.<span class="hljs-built_in">format</span>(market, code, start_date, end_date)<br>    data = client.execute(query)<br>    df = pd.DataFrame(data, columns=[<span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;pre_close&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;money&#x27;</span>])<br>    df = df.sort_values(by=<span class="hljs-string">&#x27;trade_day&#x27;</span>).drop_duplicates(subset=[<span class="hljs-string">&#x27;trade_day&#x27;</span>], keep=<span class="hljs-string">&#x27;first&#x27;</span>).reset_index(drop=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> df<br><br><span class="hljs-comment"># 日线：聚宽</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_jqdata_dayline</span>(<span class="hljs-params">code=<span class="hljs-string">&#x27;510050.SH&#x27;</span>, start_date=<span class="hljs-string">&#x27;2018-11-01&#x27;</span>, end_date=<span class="hljs-string">&#x27;2022-01-01&#x27;</span></span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> code.endswith((<span class="hljs-string">&#x27;.XSHG&#x27;</span>, <span class="hljs-string">&#x27;.XSHE&#x27;</span>)):<br>        ticker, exchange  = code.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>        code = ticker + <span class="hljs-string">&#x27;.&#x27;</span> + &#123;<span class="hljs-string">&#x27;SZ&#x27;</span>: <span class="hljs-string">&#x27;XSHE&#x27;</span>, <span class="hljs-string">&#x27;BJ&#x27;</span>: <span class="hljs-string">&#x27;XSHE&#x27;</span>, <span class="hljs-string">&#x27;SH&#x27;</span>: <span class="hljs-string">&#x27;XSHG&#x27;</span>&#125;.get(exchange.upper())<br>    query = <span class="hljs-string">&quot;select code, trade_day, open, close, low, high, pre_close, volume, money, factor  from jqdata.stock_dayline where code=&#x27;&#123;&#125;&#x27; and volume !=0.0  and trade_day &gt;=&#x27;&#123;&#125;&#x27; and trade_day &lt;&#x27;&#123;&#125;&#x27; and toDayOfWeek(trade_day) &lt; 6&quot;</span>.<span class="hljs-built_in">format</span>(code, start_date, end_date)<br>    data = client.execute(query)<br>    df = pd.DataFrame(data, columns=[<span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;pre_close&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;money&#x27;</span>, <span class="hljs-string">&#x27;factor&#x27;</span>])<br>    df = df.sort_values(by=<span class="hljs-string">&#x27;trade_day&#x27;</span>).drop_duplicates(subset=[<span class="hljs-string">&#x27;trade_day&#x27;</span>], keep=<span class="hljs-string">&#x27;first&#x27;</span>).reset_index(drop=<span class="hljs-literal">True</span>)<br>    df[<span class="hljs-string">&#x27;trade_day&#x27;</span>] = df[<span class="hljs-string">&#x27;trade_day&#x27;</span>].astype(<span class="hljs-built_in">str</span>)<br>    <span class="hljs-keyword">return</span> df<br></code></pre></td></tr></table></figure><p>我们以茅台(600519.SH)为例,读取’2020-01-01’至’2022-07-07’间的数据：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kline_df = load_jqdata_kline(<span class="hljs-attribute">code</span>=<span class="hljs-string">&#x27;600519.SH&#x27;</span>, <span class="hljs-attribute">start_date</span>=<span class="hljs-string">&#x27;2020-01-01&#x27;</span>, <span class="hljs-attribute">end_date</span>=<span class="hljs-string">&#x27;2022-07-07&#x27;</span>)<br><span class="hljs-builtin-name">print</span>(kline_df.iloc[-5:])<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">code</th><th align="left">dtype</th><th align="left">trade_day</th><th align="left">trade_time</th><th align="right">open</th><th align="right">close</th><th align="right">low</th><th align="right">high</th><th align="right">volume</th><th align="right">money</th><th align="right">avg</th><th align="right">pre_close</th><th align="right">daily_percent</th><th align="right">minutes_of_day</th><th align="right">label_d0_25</th><th align="right">label_d0_50</th><th align="right">label_d0_75</th><th align="right">label_rolling_5_50_bps</th><th align="right">label_rolling_5_50</th><th align="right">label_rolling_10_50_bps</th><th align="right">label_rolling_10_50</th></tr></thead><tbody><tr><td align="left">600519.XSHG</td><td align="left">STOCK</td><td align="left">2022-07-07</td><td align="left">2022-07-07 14:54:00+08:00</td><td align="right">1994.86</td><td align="right">1993.66</td><td align="right">1993.66</td><td align="right">1994.86</td><td align="right">10500</td><td align="right">2.09366e+07</td><td align="right">1993.99</td><td align="right">2002</td><td align="right">-0.00416583</td><td align="right">894</td><td align="right">-0.0850054</td><td align="right">-0.0308427</td><td align="right">-0.0132899</td><td align="right">-61.5</td><td align="right">-0.0308427</td><td align="right">-0.615</td><td align="right">-0.000308427</td></tr><tr><td align="left">600519.XSHG</td><td align="left">STOCK</td><td align="left">2022-07-07</td><td align="left">2022-07-07 14:55:00+08:00</td><td align="right">1993.58</td><td align="right">1994.04</td><td align="right">1993.57</td><td align="right">1994.5</td><td align="right">8900</td><td align="right">1.77452e+07</td><td align="right">1993.83</td><td align="right">2002</td><td align="right">-0.00397602</td><td align="right">895</td><td align="right">-0.115356</td><td align="right">-0.0386191</td><td align="right">-0.0228204</td><td align="right">-77</td><td align="right">-0.0386191</td><td align="right">-0.77</td><td align="right">-0.000386191</td></tr><tr><td align="left">600519.XSHG</td><td align="left">STOCK</td><td align="left">2022-07-07</td><td align="left">2022-07-07 14:56:00+08:00</td><td align="right">1993.99</td><td align="right">1993.68</td><td align="right">1993.51</td><td align="right">1993.99</td><td align="right">18700</td><td align="right">3.72816e+07</td><td align="right">1993.69</td><td align="right">2002</td><td align="right">-0.00415584</td><td align="right">896</td><td align="right">-0.146713</td><td align="right">-0.108342</td><td align="right">-0.0699708</td><td align="right">-216</td><td align="right">-0.108342</td><td align="right">-2.16</td><td align="right">-0.00108342</td></tr><tr><td align="left">600519.XSHG</td><td align="left">STOCK</td><td align="left">2022-07-07</td><td align="left">2022-07-07 14:57:00+08:00</td><td align="right">1993.29</td><td align="right">1993</td><td align="right">1993</td><td align="right">1993.29</td><td align="right">15900</td><td align="right">3.16902e+07</td><td align="right">1993.06</td><td align="right">2002</td><td align="right">-0.0044955</td><td align="right">897</td><td align="right">-0.153533</td><td align="right">-0.153533</td><td align="right">-0.153533</td><td align="right">-306</td><td align="right">-0.153533</td><td align="right">-3.06</td><td align="right">-0.00153533</td></tr><tr><td align="left">600519.XSHG</td><td align="left">STOCK</td><td align="left">2022-07-07</td><td align="left">2022-07-07 15:00:00+08:00</td><td align="right">1993.01</td><td align="right">1990</td><td align="right">1990</td><td align="right">1993.01</td><td align="right">47800</td><td align="right">9.51379e+07</td><td align="right">1990</td><td align="right">2002</td><td align="right">-0.00599401</td><td align="right">900</td><td align="right">nan</td><td align="right">nan</td><td align="right">nan</td><td align="right">nan</td><td align="right">nan</td><td align="right">nan</td><td align="right">nan</td></tr></tbody></table><h2 id="构建日内特征-分钟级"><a href="#构建日内特征-分钟级" class="headerlink" title="构建日内特征(分钟级)"></a>构建日内特征(分钟级)</h2><p>读取K线数据后，便进行最重要的特征提取工作，同时生成对应的标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_tech_feature_intraday_jqdata</span>(<span class="hljs-params">kline_df, index_col=<span class="hljs-string">&#x27;trade_time&#x27;</span></span>):</span><br>    df_grouped = kline_df.set_index(index_col).groupby(<span class="hljs-string">&#x27;trade_day&#x27;</span>, as_index=<span class="hljs-literal">False</span>)<br><br>    rsi_5 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.rsi(length=<span class="hljs-number">5</span>) / <span class="hljs-number">100</span>)).fillna(<span class="hljs-number">0.5</span>).to_frame().reset_index(drop=<span class="hljs-literal">True</span>)<br>    cmo_3 =  (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.cmo(length=<span class="hljs-number">3</span>) / <span class="hljs-number">100</span>)).fillna(<span class="hljs-number">0.0</span>).to_frame().reset_index(drop=<span class="hljs-literal">True</span>)<br>    natr_3 =  (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.natr(length=<span class="hljs-number">3</span>))).fillna(<span class="hljs-number">0.0</span>).to_frame().reset_index(drop=<span class="hljs-literal">True</span>)<br>    rvi_5 =  (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.rvi(length=<span class="hljs-number">5</span>) / <span class="hljs-number">100</span>)).fillna(<span class="hljs-number">0.5</span>).to_frame().reset_index(drop=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">try</span>:<br>        kdj_9_3 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.kdj(<span class="hljs-number">9</span>, <span class="hljs-number">3</span>) / <span class="hljs-number">100</span>)).fillna(<span class="hljs-number">0.5</span>).reset_index(drop=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">except</span>:<br>        kdj_9_3 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.kdj(<span class="hljs-built_in">min</span>(<span class="hljs-number">9</span>, <span class="hljs-built_in">len</span>(row)), <span class="hljs-number">3</span>).T.reset_index(drop=<span class="hljs-literal">True</span>).T / <span class="hljs-number">100</span>)).fillna(<span class="hljs-number">0.5</span>).reset_index(drop=<span class="hljs-literal">True</span>)<br>        kdj_9_3.columns = [<span class="hljs-string">&#x27;K_9_3&#x27;</span>, <span class="hljs-string">&#x27;D_9_3&#x27;</span>, <span class="hljs-string">&#x27;J_9_3&#x27;</span>]<br>    adx_5 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.adx(length=<span class="hljs-number">5</span>) / <span class="hljs-number">100</span>)).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.0</span>).reset_index(drop=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">try</span>:<br>        mfi_5 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.mfi(length=<span class="hljs-number">5</span>) / <span class="hljs-number">100</span>)).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.5</span>).to_frame().reset_index(drop=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">except</span>:<br>        mfi_5 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.mfi(length=<span class="hljs-built_in">min</span>(<span class="hljs-number">5</span>, <span class="hljs-built_in">len</span>(row))).rename(<span class="hljs-string">&#x27;MFI_5&#x27;</span>) / <span class="hljs-number">100</span>)).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.5</span>).to_frame().reset_index(drop=<span class="hljs-literal">True</span>)<br>    pvi_5 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.pvi(length=<span class="hljs-number">5</span>) / <span class="hljs-number">1000</span>)).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">1</span>).to_frame().reset_index(drop=<span class="hljs-literal">True</span>)<br>    nvi_5 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.nvi(length=<span class="hljs-number">5</span>) / <span class="hljs-number">1000</span>)).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">1</span>).to_frame().reset_index(drop=<span class="hljs-literal">True</span>)<br>    willr_5 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.willr(length=<span class="hljs-number">5</span>) / <span class="hljs-number">100</span>)).clip(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>).fillna(-<span class="hljs-number">0.5</span>).to_frame().reset_index(drop=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">try</span>:<br>        willr_10 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.willr(length=<span class="hljs-number">10</span>) / <span class="hljs-number">100</span>)).clip(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>).fillna(-<span class="hljs-number">0.5</span>).to_frame().reset_index(drop=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">except</span>:<br>        willr_10 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.willr(length=<span class="hljs-built_in">min</span>(<span class="hljs-number">10</span>, <span class="hljs-built_in">len</span>(row))).rename(<span class="hljs-string">&#x27;WILLR_10&#x27;</span>) / <span class="hljs-number">100</span>)).clip(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>).fillna(-<span class="hljs-number">0.5</span>).to_frame().reset_index(drop=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">try</span>:<br>        cmf_10 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.cmf(length=<span class="hljs-number">10</span>) )).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.0</span>).to_frame().reset_index(drop=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">except</span>:<br>        cmf_10 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.cmf(length=<span class="hljs-built_in">min</span>(<span class="hljs-number">10</span>, <span class="hljs-built_in">len</span>(row))).rename(<span class="hljs-string">&#x27;CMF_10&#x27;</span>) )).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.0</span>).to_frame().reset_index(drop=<span class="hljs-literal">True</span>)<br>    dpo_5 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.dpo(length=<span class="hljs-number">5</span>, lookahead=<span class="hljs-literal">False</span>) * <span class="hljs-number">10</span> )).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.0</span>).to_frame().reset_index(drop=<span class="hljs-literal">True</span>)<br>    log_return_5 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.log_return(length=<span class="hljs-number">5</span>) * <span class="hljs-number">50</span> )).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.0</span>).to_frame().reset_index(drop=<span class="hljs-literal">True</span>) <br>    zscore_5 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row.ta.zscore(length=<span class="hljs-number">5</span>) )).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.0</span>).to_frame().reset_index(drop=<span class="hljs-literal">True</span>) <br>    pct_change_3 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row[<span class="hljs-string">&#x27;avg&#x27;</span>].pct_change(periods=<span class="hljs-number">3</span>).fillna(<span class="hljs-number">0</span>) * <span class="hljs-number">50</span> / <span class="hljs-number">3</span>)).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).to_frame().rename(columns=&#123;<span class="hljs-string">&#x27;avg&#x27;</span>: <span class="hljs-string">&#x27;pct_change_3&#x27;</span>&#125;).reset_index(drop=<span class="hljs-literal">True</span>) <br>    pct_change_6 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row[<span class="hljs-string">&#x27;avg&#x27;</span>].pct_change(periods=<span class="hljs-number">6</span>).fillna(<span class="hljs-number">0</span>) * <span class="hljs-number">50</span> / <span class="hljs-number">6</span>)).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).to_frame().rename(columns=&#123;<span class="hljs-string">&#x27;avg&#x27;</span>: <span class="hljs-string">&#x27;pct_change_6&#x27;</span>&#125;).reset_index(drop=<span class="hljs-literal">True</span>) <br>    <br>    rolling_std_5 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: row[<span class="hljs-string">&#x27;avg&#x27;</span>].rolling(<span class="hljs-number">5</span>, min_periods=<span class="hljs-number">1</span>).std(ddof=<span class="hljs-number">0</span>))).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).to_frame().rename(columns=&#123;<span class="hljs-string">&#x27;avg&#x27;</span>: <span class="hljs-string">&#x27;rolling_std_5&#x27;</span>&#125;).reset_index(drop=<span class="hljs-literal">True</span>)<br>    rolling_money_5 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: np.log1p(row[<span class="hljs-string">&#x27;money&#x27;</span>].rolling(<span class="hljs-number">5</span>, min_periods=<span class="hljs-number">1</span>).mean()) - np.log1p(row[<span class="hljs-string">&#x27;money&#x27;</span>]) ) / <span class="hljs-number">10.0</span>).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).to_frame().rename(columns=&#123;<span class="hljs-string">&#x27;money&#x27;</span>: <span class="hljs-string">&#x27;rolling_money_5&#x27;</span>&#125;).reset_index(drop=<span class="hljs-literal">True</span>)<br>    rolling_money_6_3 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: np.log1p(row[<span class="hljs-string">&#x27;money&#x27;</span>].rolling(<span class="hljs-number">6</span>, min_periods=<span class="hljs-number">1</span>).mean()) - np.log1p(row[<span class="hljs-string">&#x27;money&#x27;</span>].rolling(<span class="hljs-number">3</span>, min_periods=<span class="hljs-number">1</span>).mean()) ) / <span class="hljs-number">10.0</span> ).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).to_frame().rename(columns=&#123;<span class="hljs-string">&#x27;money&#x27;</span>: <span class="hljs-string">&#x27;rolling_money_6_3&#x27;</span>&#125;).reset_index(drop=<span class="hljs-literal">True</span>)<br>    rolling_volume_5 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: np.log1p(row[<span class="hljs-string">&#x27;volume&#x27;</span>].rolling(<span class="hljs-number">5</span>, min_periods=<span class="hljs-number">1</span>).mean()) - np.log1p(row[<span class="hljs-string">&#x27;volume&#x27;</span>]) )/ <span class="hljs-number">10.0</span>).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).to_frame().rename(columns=&#123;<span class="hljs-string">&#x27;volume&#x27;</span>: <span class="hljs-string">&#x27;rolling_volume_5&#x27;</span>&#125;).reset_index(drop=<span class="hljs-literal">True</span>)<br>    rolling_volume_6_3 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: np.log1p(row[<span class="hljs-string">&#x27;volume&#x27;</span>].rolling(<span class="hljs-number">6</span>, min_periods=<span class="hljs-number">1</span>).mean()) - np.log1p(row[<span class="hljs-string">&#x27;volume&#x27;</span>].rolling(<span class="hljs-number">3</span>, min_periods=<span class="hljs-number">1</span>).mean()) )/ <span class="hljs-number">10.0</span>).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).to_frame().rename(columns=&#123;<span class="hljs-string">&#x27;volume&#x27;</span>: <span class="hljs-string">&#x27;rolling_volume_6_3&#x27;</span>&#125;).reset_index(drop=<span class="hljs-literal">True</span>)<br>    pct_volatility = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: (row[<span class="hljs-string">&#x27;high&#x27;</span>] - row[<span class="hljs-string">&#x27;low&#x27;</span>]) * <span class="hljs-number">50</span> / row[<span class="hljs-string">&#x27;avg&#x27;</span>])).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.0</span>).to_frame().rename(columns=&#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;pct_volatility&#x27;</span>&#125;).reset_index(drop=<span class="hljs-literal">True</span>) <br>    rolling_pct_volatility_5 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: (row[<span class="hljs-string">&#x27;high&#x27;</span>].rolling(<span class="hljs-number">5</span>, min_periods=<span class="hljs-number">1</span>).<span class="hljs-built_in">max</span>() - row[<span class="hljs-string">&#x27;low&#x27;</span>].rolling(<span class="hljs-number">5</span>, min_periods=<span class="hljs-number">1</span>).<span class="hljs-built_in">min</span>())* <span class="hljs-number">20</span> / row[<span class="hljs-string">&#x27;avg&#x27;</span>])).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.0</span>).to_frame().rename(columns=&#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;rolling_pct_volatility_5&#x27;</span>&#125;).reset_index(drop=<span class="hljs-literal">True</span>) <br>    rolling_pct_volatility_10 = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: (row[<span class="hljs-string">&#x27;high&#x27;</span>].rolling(<span class="hljs-number">10</span>, min_periods=<span class="hljs-number">1</span>).<span class="hljs-built_in">max</span>() - row[<span class="hljs-string">&#x27;low&#x27;</span>].rolling(<span class="hljs-number">10</span>, min_periods=<span class="hljs-number">1</span>).<span class="hljs-built_in">min</span>()) * <span class="hljs-number">20</span> / row[<span class="hljs-string">&#x27;avg&#x27;</span>])).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.0</span>).to_frame().rename(columns=&#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;rolling_pct_volatility_10&#x27;</span>&#125;).reset_index(drop=<span class="hljs-literal">True</span>) <br>    pct_vwap_low = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: (row.ta.vwap() - row[<span class="hljs-string">&#x27;low&#x27;</span>]) * <span class="hljs-number">50</span> / row[<span class="hljs-string">&#x27;avg&#x27;</span>])).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.0</span>).to_frame().rename(columns=&#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;pct_vwap_low&#x27;</span>&#125;).reset_index(drop=<span class="hljs-literal">True</span>) <br>    pct_vwap_high = (df_grouped.apply(<span class="hljs-keyword">lambda</span> row: (row[<span class="hljs-string">&#x27;high&#x27;</span>] - row.ta.vwap()) * <span class="hljs-number">50</span> / row[<span class="hljs-string">&#x27;avg&#x27;</span>])).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).fillna(<span class="hljs-number">0.0</span>).to_frame().rename(columns=&#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;pct_vwap_high&#x27;</span>&#125;).reset_index(drop=<span class="hljs-literal">True</span>) <br>    <br>    feature = pd.concat([rsi_5, cmo_3, natr_3, rvi_5, kdj_9_3,  adx_5, mfi_5, pvi_5, nvi_5, willr_5, willr_10, cmf_10, dpo_5, log_return_5, zscore_5, pct_change_3, pct_change_6, rolling_std_5, rolling_money_5, rolling_money_6_3, rolling_volume_5, rolling_volume_6_3, pct_volatility, rolling_pct_volatility_5, rolling_pct_volatility_10, pct_vwap_low, pct_vwap_high, kline_df[[<span class="hljs-string">&#x27;daily_percent&#x27;</span>]] * <span class="hljs-number">50</span>], axis=<span class="hljs-number">1</span>) <br>    feature.columns = [<span class="hljs-string">&#x27;intraday_%s&#x27;</span> % i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> feature.columns]<br><br>    index = kline_df[index_col].apply(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">int</span>(x.timestamp()))<br>    <br>    introday_data = pd.concat([kline_df[[<span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;minutes_of_day&#x27;</span>]], feature], axis=<span class="hljs-number">1</span>)<br>    introday_data.index = index<br>    <br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;label_d0_25&#x27;</span> <span class="hljs-keyword">in</span> kline_df.columns:<br>        label_data = kline_df[[<span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;minutes_of_day&#x27;</span>, <span class="hljs-string">&#x27;label_d0_25&#x27;</span>, <span class="hljs-string">&#x27;label_d0_50&#x27;</span>, <span class="hljs-string">&#x27;label_d0_75&#x27;</span>,<br>           <span class="hljs-string">&#x27;label_rolling_5_50&#x27;</span>, <span class="hljs-string">&#x27;label_rolling_10_50&#x27;</span>, <span class="hljs-string">&#x27;label_rolling_5_50_bps&#x27;</span>, <span class="hljs-string">&#x27;label_rolling_10_50_bps&#x27;</span>]]<br>        label_data.index = index<br>    <span class="hljs-keyword">else</span>:<br>        label_data = []<br><br>    introday_data = introday_data[introday_data.minutes_of_day != <span class="hljs-number">900</span>]    <br>    label_data = label_data[label_data.minutes_of_day != <span class="hljs-number">900</span>]        <br>    <span class="hljs-keyword">return</span> introday_data.reset_index(), label_data.reset_index()<br></code></pre></td></tr></table></figure><p>同样的，我们展示上面茅台数据生成经过pandas-ta提取的特征：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">introday_data, label_data = make_tech_feature_intraday_jqdata(kline_df, index_col=<span class="hljs-string">&#x27;trade_time&#x27;</span>)<br><span class="hljs-built_in">print</span>(introday_data.iloc[-<span class="hljs-number">5</span>:])<br><span class="hljs-built_in">print</span>(label_data.iloc[-<span class="hljs-number">5</span>:])<br><br></code></pre></td></tr></table></figure><ul><li>日内数据特征：</li></ul><table><thead><tr><th align="right">trade_time</th><th align="left">code</th><th align="left">trade_day</th><th align="right">minutes_of_day</th><th align="right">intraday_RSI_5</th><th align="right">intraday_CMO_3</th><th align="right">intraday_NATR_3</th><th align="right">intraday_RVI_5</th><th align="right">intraday_K_9_3</th><th align="right">intraday_D_9_3</th><th align="right">intraday_J_9_3</th><th align="right">intraday_ADX_5</th><th align="right">intraday_DMP_5</th><th align="right">intraday_DMN_5</th><th align="right">intraday_MFI_5</th><th align="right">intraday_PVI_5</th><th align="right">intraday_NVI_5</th><th align="right">intraday_WILLR_5</th><th align="right">intraday_WILLR_10</th><th align="right">intraday_CMF_10</th><th align="right">intraday_DPO_5</th><th align="right">intraday_LOGRET_5</th><th align="right">intraday_ZS_5</th><th align="right">intraday_pct_change_3</th><th align="right">intraday_pct_change_6</th><th align="right">intraday_rolling_std_5</th><th align="right">intraday_rolling_money_5</th><th align="right">intraday_rolling_money_6_3</th><th align="right">intraday_rolling_volume_5</th><th align="right">intraday_rolling_volume_6_3</th><th align="right">intraday_pct_volatility</th><th align="right">intraday_rolling_pct_volatility_5</th><th align="right">intraday_rolling_pct_volatility_10</th><th align="right">intraday_pct_vwap_low</th><th align="right">intraday_pct_vwap_high</th><th align="right">intraday_daily_percent</th></tr></thead><tbody><tr><td align="right">1657176780</td><td align="left">600519.XSHG</td><td align="left">2022-07-07</td><td align="right">893</td><td align="right">0.4868</td><td align="right">-0.064103</td><td align="right">0.077846</td><td align="right">0.472697</td><td align="right">0.536684</td><td align="right">0.41818</td><td align="right">0.773693</td><td align="right">0.404289</td><td align="right">0.170589</td><td align="right">0.053766</td><td align="right">0.589231</td><td align="right">0.999701</td><td align="right">1.00016</td><td align="right">-0.377273</td><td align="right">-0.452</td><td align="right">0.197077</td><td align="right">4.1</td><td align="right">0.0310894</td><td align="right">-0.381427</td><td align="right">0.00802214</td><td align="right">0.00689641</td><td align="right">0.613697</td><td align="right">-0.010953</td><td align="right">-0.0104473</td><td align="right">-0.011178</td><td align="right">-0.0104575</td><td align="right">0.03508</td><td align="right">0.0220503</td><td align="right">0.0250571</td><td align="right">0.0622761</td><td align="right">-0.0271961</td><td align="right">-0.178072</td></tr><tr><td align="right">1657176840</td><td align="left">600519.XSHG</td><td align="left">2022-07-07</td><td align="right">894</td><td align="right">0.377828</td><td align="right">-0.418172</td><td align="right">0.0721596</td><td align="right">0.306806</td><td align="right">0.382032</td><td align="right">0.406131</td><td align="right">0.333835</td><td align="right">0.33549</td><td align="right">0.144056</td><td align="right">0.127672</td><td align="right">0.353767</td><td align="right">0.999656</td><td align="right">1.00016</td><td align="right">-0.971429</td><td align="right">-0.931624</td><td align="right">-0.0242737</td><td align="right">-10</td><td align="right">-0.0225665</td><td align="right">-1.63965</td><td align="right">-0.00860476</td><td align="right">-0.00167135</td><td align="right">0.50677</td><td align="right">-0.0136592</td><td align="right">-0.006727</td><td align="right">-0.0136515</td><td align="right">-0.00678157</td><td align="right">0.0300904</td><td align="right">0.0210633</td><td align="right">0.0234705</td><td align="right">0.0780107</td><td align="right">-0.0479203</td><td align="right">-0.208292</td></tr><tr><td align="right">1657176900</td><td align="left">600519.XSHG</td><td align="left">2022-07-07</td><td align="right">895</td><td align="right">0.428086</td><td align="right">-0.203659</td><td align="right">0.0636436</td><td align="right">0.536757</td><td align="right">0.336506</td><td align="right">0.382923</td><td align="right">0.243674</td><td align="right">0.269736</td><td align="right">0.125327</td><td align="right">0.123655</td><td align="right">0.199639</td><td align="right">0.999656</td><td align="right">1.00009</td><td align="right">-0.779343</td><td align="right">-0.754545</td><td align="right">0.0696795</td><td align="right">-7.7</td><td align="right">-0.0391013</td><td align="right">-0.75092</td><td align="right">-0.0102754</td><td align="right">0.000668783</td><td align="right">0.638041</td><td align="right">0.00777374</td><td align="right">-0.00850169</td><td align="right">0.00777846</td><td align="right">-0.00857828</td><td align="right">0.0233219</td><td align="right">0.0213659</td><td align="right">0.0220681</td><td align="right">0.0799701</td><td align="right">-0.0566481</td><td align="right">-0.198801</td></tr><tr><td align="right">1657176960</td><td align="left">600519.XSHG</td><td align="left">2022-07-07</td><td align="right">896</td><td align="right">0.390711</td><td align="right">-0.344547</td><td align="right">0.051298</td><td align="right">0.344622</td><td align="right">0.25161</td><td align="right">0.339152</td><td align="right">0.0765271</td><td align="right">0.222581</td><td align="right">0.114705</td><td align="right">0.122769</td><td align="right">0.165302</td><td align="right">0.999611</td><td align="right">1.00009</td><td align="right">-0.922374</td><td align="right">-0.918182</td><td align="right">0.0739293</td><td align="right">-10</td><td align="right">-0.0223156</td><td align="right">-0.902093</td><td align="right">-0.0146167</td><td align="right">-0.00330078</td><td align="right">0.709123</td><td align="right">-0.0476034</td><td align="right">-0.0131696</td><td align="right">-0.0475763</td><td align="right">-0.0131647</td><td align="right">0.012038</td><td align="right">0.0219693</td><td align="right">0.0220696</td><td align="right">0.0807789</td><td align="right">-0.0687409</td><td align="right">-0.207792</td></tr><tr><td align="right">1657177020</td><td align="left">600519.XSHG</td><td align="left">2022-07-07</td><td align="right">897</td><td align="right">0.323935</td><td align="right">-0.563402</td><td align="right">0.0455835</td><td align="right">0.243084</td><td align="right">0.16774</td><td align="right">0.282015</td><td align="right">-0.0608087</td><td align="right">0.242891</td><td align="right">0.100978</td><td align="right">0.197831</td><td align="right">2.9012e-16</td><td align="right">0.999611</td><td align="right">0.999951</td><td align="right">-1</td><td align="right">-1</td><td align="right">-0.143719</td><td align="right">-10</td><td align="right">-0.0674407</td><td align="right">-1.39213</td><td align="right">-0.00777336</td><td align="right">-0.00818705</td><td align="right">0.785147</td><td align="right">-0.0210747</td><td align="right">-0.0162005</td><td align="right">-0.0210629</td><td align="right">-0.0161831</td><td align="right">0.00727525</td><td align="right">0.027094</td><td align="right">0.027094</td><td align="right">0.0928892</td><td align="right">-0.0856139</td><td align="right">-0.224775</td></tr></tbody></table><ul><li>日内标签数据</li></ul><table><thead><tr><th align="right">trade_time</th><th align="left">code</th><th align="left">trade_day</th><th align="right">minutes_of_day</th><th align="right">label_d0_25</th><th align="right">label_d0_50</th><th align="right">label_d0_75</th><th align="right">label_rolling_5_50</th><th align="right">label_rolling_10_50</th><th align="right">label_rolling_5_50_bps</th><th align="right">label_rolling_10_50_bps</th></tr></thead><tbody><tr><td align="right">1657176780</td><td align="left">600519.XSHG</td><td align="left">2022-07-07</td><td align="right">893</td><td align="right">-0.119272</td><td align="right">-0.0877</td><td align="right">-0.080684</td><td align="right">-0.0877</td><td align="right">-0.000877</td><td align="right">-175</td><td align="right">-1.75</td></tr><tr><td align="right">1657176840</td><td align="left">600519.XSHG</td><td align="left">2022-07-07</td><td align="right">894</td><td align="right">-0.0850054</td><td align="right">-0.0308427</td><td align="right">-0.0132899</td><td align="right">-0.0308427</td><td align="right">-0.000308427</td><td align="right">-61.5</td><td align="right">-0.615</td></tr><tr><td align="right">1657176900</td><td align="left">600519.XSHG</td><td align="left">2022-07-07</td><td align="right">895</td><td align="right">-0.115356</td><td align="right">-0.0386191</td><td align="right">-0.0228204</td><td align="right">-0.0386191</td><td align="right">-0.000386191</td><td align="right">-77</td><td align="right">-0.77</td></tr><tr><td align="right">1657176960</td><td align="left">600519.XSHG</td><td align="left">2022-07-07</td><td align="right">896</td><td align="right">-0.146713</td><td align="right">-0.108342</td><td align="right">-0.0699708</td><td align="right">-0.108342</td><td align="right">-0.00108342</td><td align="right">-216</td><td align="right">-2.16</td></tr><tr><td align="right">1657177020</td><td align="left">600519.XSHG</td><td align="left">2022-07-07</td><td align="right">897</td><td align="right">-0.153533</td><td align="right">-0.153533</td><td align="right">-0.153533</td><td align="right">-0.153533</td><td align="right">-0.00153533</td><td align="right">-306</td><td align="right">-3.06</td></tr></tbody></table><p>简单计算技术因子与日内收益的相关性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">corr_data = []<br><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> introday_data.columns.tolist()[<span class="hljs-number">4</span>:]:<br>    feature = introday_data[col]<br>    label_d0_50 = feature.corr(label_data[<span class="hljs-string">&#x27;label_d0_50&#x27;</span>])<br>    label_rolling_5_50 = feature.corr(label_data[<span class="hljs-string">&#x27;label_rolling_5_50&#x27;</span>])<br>    label_rolling_10_50 = feature.corr(label_data[<span class="hljs-string">&#x27;label_rolling_10_50&#x27;</span>])<br>    corr_data.append([col, label_d0_50, label_rolling_5_50, label_rolling_10_50])<br>corr_data = pd.DataFrame(corr_data, columns=[<span class="hljs-string">&#x27;feature&#x27;</span>, <span class="hljs-string">&#x27;d0_50&#x27;</span>, <span class="hljs-string">&#x27;rolling_5_50&#x27;</span>, <span class="hljs-string">&#x27;rolling_10_50&#x27;</span>])<br><span class="hljs-built_in">print</span>(corr_data)<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">feature</th><th align="right">d0_50</th><th align="right">rolling_5_50</th><th align="right">rolling_10_50</th></tr></thead><tbody><tr><td align="left">intraday_RSI_5</td><td align="right">0.0402828</td><td align="right">0.134321</td><td align="right">0.103664</td></tr><tr><td align="left">intraday_CMO_3</td><td align="right">0.0460717</td><td align="right">0.163593</td><td align="right">0.124605</td></tr><tr><td align="left">intraday_NATR_3</td><td align="right">-0.0044438</td><td align="right">0.0184311</td><td align="right">0.0159059</td></tr><tr><td align="left">intraday_RVI_5</td><td align="right">0.0384155</td><td align="right">0.139606</td><td align="right">0.106858</td></tr><tr><td align="left">intraday_K_9_3</td><td align="right">0.0281801</td><td align="right">0.0653667</td><td align="right">0.0561566</td></tr><tr><td align="left">intraday_D_9_3</td><td align="right">0.019375</td><td align="right">0.0322949</td><td align="right">0.0315525</td></tr><tr><td align="left">intraday_J_9_3</td><td align="right">0.0305751</td><td align="right">0.0899986</td><td align="right">0.0733925</td></tr><tr><td align="left">intraday_ADX_5</td><td align="right">0.00178353</td><td align="right">0.00119938</td><td align="right">-0.00362684</td></tr><tr><td align="left">intraday_DMP_5</td><td align="right">0.023113</td><td align="right">0.0693602</td><td align="right">0.0517322</td></tr><tr><td align="left">intraday_DMN_5</td><td align="right">-0.0211941</td><td align="right">-0.0660362</td><td align="right">-0.0478488</td></tr><tr><td align="left">intraday_MFI_5</td><td align="right">0.0187832</td><td align="right">0.0573829</td><td align="right">0.0454739</td></tr><tr><td align="left">intraday_PVI_5</td><td align="right">-0.00631178</td><td align="right">0.00495645</td><td align="right">0.0021088</td></tr><tr><td align="left">intraday_NVI_5</td><td align="right">-0.0138721</td><td align="right">0.0016334</td><td align="right">-0.00108481</td></tr><tr><td align="left">intraday_WILLR_5</td><td align="right">0.0508993</td><td align="right">0.174907</td><td align="right">0.135297</td></tr><tr><td align="left">intraday_WILLR_10</td><td align="right">0.0437711</td><td align="right">0.133309</td><td align="right">0.106649</td></tr><tr><td align="left">intraday_CMF_10</td><td align="right">0.0310067</td><td align="right">0.0720305</td><td align="right">0.060817</td></tr><tr><td align="left">intraday_DPO_5</td><td align="right">0.0322019</td><td align="right">0.101203</td><td align="right">0.0789424</td></tr><tr><td align="left">intraday_LOGRET_5</td><td align="right">0.0282654</td><td align="right">0.101385</td><td align="right">0.0758353</td></tr><tr><td align="left">intraday_ZS_5</td><td align="right">0.048193</td><td align="right">0.189238</td><td align="right">0.140897</td></tr><tr><td align="left">intraday_pct_change_3</td><td align="right">0.0111402</td><td align="right">0.0316397</td><td align="right">0.0211543</td></tr><tr><td align="left">intraday_pct_change_6</td><td align="right">0.00922718</td><td align="right">0.0199352</td><td align="right">0.0154407</td></tr><tr><td align="left">intraday_rolling_std_5</td><td align="right">-0.00929529</td><td align="right">0.0246064</td><td align="right">0.0264212</td></tr><tr><td align="left">intraday_rolling_money_5</td><td align="right">-0.00175834</td><td align="right">-0.0044877</td><td align="right">-0.00455773</td></tr><tr><td align="left">intraday_rolling_money_6_3</td><td align="right">-0.00369373</td><td align="right">-0.00865403</td><td align="right">-0.009164</td></tr><tr><td align="left">intraday_rolling_volume_5</td><td align="right">-0.00169721</td><td align="right">-0.00431745</td><td align="right">-0.00442322</td></tr><tr><td align="left">intraday_rolling_volume_6_3</td><td align="right">-0.00365949</td><td align="right">-0.00860967</td><td align="right">-0.00912756</td></tr><tr><td align="left">intraday_pct_volatility</td><td align="right">0.00960336</td><td align="right">0.0396089</td><td align="right">0.0383</td></tr><tr><td align="left">intraday_rolling_pct_volatility_5</td><td align="right">0.0118225</td><td align="right">0.0395367</td><td align="right">0.0425203</td></tr><tr><td align="left">intraday_rolling_pct_volatility_10</td><td align="right">0.00827556</td><td align="right">0.0335309</td><td align="right">0.0334182</td></tr><tr><td align="left">intraday_pct_vwap_low</td><td align="right">0.0097716</td><td align="right">-0.00987224</td><td align="right">-0.00514639</td></tr><tr><td align="left">intraday_pct_vwap_high</td><td align="right">-0.00828736</td><td align="right">0.015894</td><td align="right">0.0109779</td></tr><tr><td align="left">intraday_daily_percent</td><td align="right">0.0473394</td><td align="right">0.025758</td><td align="right">0.0216949</td></tr></tbody></table><p>可以发现，5min/10min的相关性还是有一些的，说明技术指标短期内可以起到一些预测作用，这也给我们做<strong>日内高频可转债</strong>提供了一个思路。</p><h2 id="特征转存数据库"><a href="#特征转存数据库" class="headerlink" title="特征转存数据库"></a>特征转存数据库</h2><p>这里以日内特征为例，构建数据表，应用上述特征抽取函数，提取技术面特征，然后存储到Clickhouse数据库中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> clickhouse_driver <span class="hljs-keyword">import</span> Client<br><br>storage_client = Client(<span class="hljs-string">&#x27;10.0.16.11&#x27;</span>, password=<span class="hljs-string">&#x27;******&#x27;</span>, settings=&#123;<span class="hljs-string">&#x27;use_numpy&#x27;</span>: <span class="hljs-literal">True</span>&#125;)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_cn_intraday_set</span>(<span class="hljs-params">start_date=<span class="hljs-string">&#x27;2018-01-01&#x27;</span>, end_date=<span class="hljs-string">&#x27;2022-07-01&#x27;</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    主要股票：日内特征</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    create_table_intraday_cn_data = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        create table if not exists feature.intraday_cn_data</span><br><span class="hljs-string">        (</span><br><span class="hljs-string">            trade_time DateTime(&#x27;Asia/Shanghai&#x27;), code String, trade_day Date, minutes_of_day Int16,</span><br><span class="hljs-string">            intraday_RSI_5 Float32, intraday_CMO_3 Float32, intraday_NATR_3 Float32, intraday_RVI_5 Float32, intraday_K_9_3 Float32, intraday_D_9_3 Float32, intraday_J_9_3 Float32, intraday_ADX_5 Float32, intraday_DMP_5 Float32, intraday_DMN_5 Float32, intraday_MFI_5 Float32, intraday_PVI_5 Float32, intraday_NVI_5 Float32, intraday_WILLR_5 Float32, intraday_WILLR_10 Float32, intraday_CMF_10 Float32, intraday_DPO_5 Float32, intraday_LOGRET_5 Float32, intraday_ZS_5 Float32, intraday_pct_change_3 Float32, intraday_pct_change_6 Float32, intraday_rolling_std_5 Float32, intraday_rolling_money_5 Float32, intraday_rolling_money_6_3 Float32, intraday_rolling_volume_5 Float32, intraday_rolling_volume_6_3 Float32, intraday_pct_volatility Float32, intraday_rolling_pct_volatility_5 Float32, intraday_rolling_pct_volatility_10 Float32, intraday_pct_vwap_low Float32, intraday_pct_vwap_high Float32, intraday_daily_percent Float32</span><br><span class="hljs-string">        )</span><br><span class="hljs-string">        ENGINE = ReplacingMergeTree()</span><br><span class="hljs-string">        ORDER BY (trade_day, trade_time, code)</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    storage_client.execute(create_table_intraday_cn_data)<br><br>    create_table_intraday_cn_label = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        create table if not exists feature.intraday_cn_label</span><br><span class="hljs-string">        (</span><br><span class="hljs-string">            trade_time DateTime(&#x27;Asia/Shanghai&#x27;), code String, trade_day Date, minutes_of_day Int16,</span><br><span class="hljs-string">            label_d0_25 Float32, label_d0_50 Float32, label_d0_75 Float32,  label_rolling_5_50 Float32,  label_rolling_10_50 Float32,  label_rolling_5_50_bps Float32,  label_rolling_10_50_bps Float32</span><br><span class="hljs-string">        )</span><br><span class="hljs-string">        ENGINE = ReplacingMergeTree()</span><br><span class="hljs-string">        ORDER BY (trade_day, trade_time, code)</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    storage_client.execute(create_table_intraday_cn_label)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make</span>(<span class="hljs-params">code</span>):</span><br>        <span class="hljs-comment"># 读取K线</span><br>        kline_df = load_jqdata_kline(code=code, start_date=start_date, end_date=end_date)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(kline_df) &lt; <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 生成特征和标签</span><br>        introday_data, label_data = make_tech_feature_intraday_jqdata(kline_df)<br>        <span class="hljs-comment"># 分批写入，降低性能压力</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(introday_data) &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(np.ceil(<span class="hljs-built_in">len</span>(introday_data) / <span class="hljs-number">2000</span>))):<br>                storage_client.insert_dataframe(<span class="hljs-string">&#x27;INSERT INTO feature.intraday_cn_data  VALUES&#x27;</span>, introday_data.iloc[i * <span class="hljs-number">2000</span>: (i+<span class="hljs-number">1</span>)*<span class="hljs-number">2000</span>])<br>                storage_client.insert_dataframe(<span class="hljs-string">&#x27;INSERT INTO feature.intraday_cn_label VALUES&#x27;</span>, label_data.iloc[i * <span class="hljs-number">2000</span>: (i+<span class="hljs-number">1</span>)*<span class="hljs-number">2000</span>])<br>    <br>    <span class="hljs-comment"># 获取指定的股票列表</span><br>    tickers = get_jq_ticker(start_date, end_date)<br><br>    <span class="hljs-comment"># 遍历股票，生成特征</span><br>    <span class="hljs-keyword">for</span> ticker <span class="hljs-keyword">in</span> tqdm(tickers): <br>            make(ticker)<br></code></pre></td></tr></table></figure><p>至此，我们完成了技术特征数据的提取、存储工作。</p><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。</p><p><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>talib</tag>
      
      <tag>pandas_ta</tag>
      
      <tag>技术分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于新闻事件Bert序列建模的行业涨跌预测</title>
    <link href="/2022/07/08/AI%E9%A2%84%E6%B5%8B%E8%82%A1%E7%A5%A8%E4%B9%8B%E6%96%B0%E9%97%BB%E4%BA%8B%E4%BB%B6%E6%95%B0%E6%8D%AE/"/>
    <url>/2022/07/08/AI%E9%A2%84%E6%B5%8B%E8%82%A1%E7%A5%A8%E4%B9%8B%E6%96%B0%E9%97%BB%E4%BA%8B%E4%BB%B6%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>俗话说”女怕嫁错郎，男怕入错行”，选择往往比努力更重要，在股票市场也不例外，一个好的标的往往能让我们瞬间躺赢，而一旦踩雷则万劫不复。金融市场从长期来看均是受经济增长因素驱动，短期走势则是受资金的流动影响，而新闻事件和各种消息对市场价格的影响非常快速，影响交易情绪。今天我们利用先进的深度学习技术单独分析新闻事件序列对行业指数的短期影响，和读者一起探讨利用AI做行业选股的可行性。</p></blockquote><h2 id="行业板块数据处理"><a href="#行业板块数据处理" class="headerlink" title="行业板块数据处理"></a>行业板块数据处理</h2><p>读取数据库中的行业板块日线数据，包含3类：</p><ul><li>大盘指数：上证指数、上证50、沪深300、中证500等</li><li>CSRC1行业分类：如CSRC1采矿业、CSRC1建筑业等</li><li>CSRC2行业分类：如CSRC2农副食品加工业、CSRC2开采辅助活动等</li></ul><p>上述行业板块数据合计108个，然后提取相关的指标：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取数据库中的数据</span><br>sector_data = client2.execute(<span class="hljs-string">&quot;select code, trade_day, sector_name, sector_type, open, close, high, low, volume, amount from xtquant.sector_1d&quot;</span>)<br><span class="hljs-comment"># 转换成DataFrame</span><br>sector_df = pd.DataFrame(sector_data, columns=[<span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;sector_name&#x27;</span>, <span class="hljs-string">&#x27;sector_type&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>])<br>sector_df = sector_df.drop_duplicates(subset=[<span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>])<br><br><span class="hljs-comment"># 每个指数分别处理</span><br>sector_feature_grouped = sector_df.sort_values(by=[<span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>]).set_index(<span class="hljs-string">&#x27;trade_day&#x27;</span>).groupby([<span class="hljs-string">&#x27;code&#x27;</span>])<br><br><span class="hljs-comment"># 日内： 开盘相对昨收的涨跌百分比(开盘9:15时间截断)</span><br>sector_feature_intraday_open_close = sector_feature_grouped.apply(<span class="hljs-keyword">lambda</span> row: (row[<span class="hljs-string">&#x27;open&#x27;</span>] / row.shift(<span class="hljs-number">1</span>)[<span class="hljs-string">&#x27;close&#x27;</span>] - <span class="hljs-number">1</span>) * <span class="hljs-number">100</span>).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).reset_index().rename(columns=&#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;intraday_open_close&#x27;</span>&#125;).set_index([<span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>])<br><br><span class="hljs-comment"># 日间：第二天开盘相对于前一天开盘的涨跌百分比(开盘9:15时间截断)</span><br>sector_feature_daily_open_open = sector_feature_grouped.apply(<span class="hljs-keyword">lambda</span> row: (row.shift(-<span class="hljs-number">1</span>)[<span class="hljs-string">&#x27;open&#x27;</span>] / row[<span class="hljs-string">&#x27;open&#x27;</span>] - <span class="hljs-number">1</span>) * <span class="hljs-number">100</span>).clip(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).reset_index().rename(columns=&#123;<span class="hljs-string">&#x27;open&#x27;</span>: <span class="hljs-string">&#x27;daily_open_open&#x27;</span>&#125;).set_index([<span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>])<br><br></code></pre></td></tr></table></figure><p>指标共10个，基准分为当天和第二天：</p><ul><li>intraday_open_close：开盘相对昨收的涨跌百分比</li><li>intraday_close_close：收盘相对昨收的涨跌百分比</li><li>intraday_avg_close：平均相对于昨收的涨跌百分比</li><li>intraday_close_open：收盘相对开盘的涨跌百分比</li><li>intraday_avg_open：平均相对于开盘的涨跌百分比</li><li>daily_open_open：第二天开盘相对于前一天开盘的涨跌百分比</li><li>daily_close_open：第二天收盘相对于前一天开盘的涨跌百分比</li><li>daily_avg_open：第二天平均相对于前一天开盘的涨跌百分比</li><li>daily_open_avg：第二天开盘相对于前一天平均价格的涨跌百分比</li><li>daily_avg_avg：第二天平均相对于前一天平均的涨跌百分比</li></ul><p>其中当天的指标主要优化模型的拟合能力，即过去发生的事对当前的影响，而第二天指标优化模型的预测能力，即过去发生的事对未来的影响。这里重点关注第二天指标，因为A股为T+1交易，这关系到能否利用已发生的事件赚取未来的收益。</p><p>数据样例如下, 时间戳为索引，列共<code>108*10 = 1080</code>个：</p><p><img src="/img/label_data.png"></p><h2 id="新闻数据采集和Bert微调"><a href="#新闻数据采集和Bert微调" class="headerlink" title="新闻数据采集和Bert微调"></a>新闻数据采集和Bert微调</h2><p>这里主要使用了两个数据集：财联社快讯和华盛通快讯的爬虫数据，时间维度从2016年至今，进行清洗后，按照时间排序。数据如下表所示：</p><table><thead><tr><th align="right">timestamp</th><th align="left">content</th></tr></thead><tbody><tr><td align="right">1460337101</td><td align="left">一季度新能源乘用车销量3.95万 同比翻番</td></tr><tr><td align="right">1515081541</td><td align="left">英国商务大臣克拉克：努力深化与欧盟27国的贸易联系。</td></tr><tr><td align="right">1535487757</td><td align="left">据外媒：美国参议院确定克拉里达成为美联储的副主席。</td></tr><tr><td align="right">1611292392</td><td align="left">吉林通化第二轮检测已检31.6万人 51例阳性</td></tr><tr><td align="right">1617094987</td><td align="left">洪汇新材：上调氯乙烯-醋酸乙烯共聚树脂二元系列产品的国内销售报价</td></tr><tr><td align="right">1617662023</td><td align="left">公募“大年”FOF大丰收 规模业绩实现双增长</td></tr><tr><td align="right">1628664753</td><td align="left">中兴通讯AH股走低，目前均跌近8%；其他电讯设备股中，国微控股跌超6%，京信通信跌1.5%。</td></tr><tr><td align="right">1629450813</td><td align="left">香港交易所计划推出全新MSCI中国A50互联互通指数期货合约。（港交所）</td></tr><tr><td align="right">1632368553</td><td align="left">韩媒：韩国预计在中秋假日后新冠感染病例将上升</td></tr><tr><td align="right">1633867053</td><td align="left">中工国际：前三季净利预增63.52%-86.88%</td></tr></tbody></table><p>由于BERT模型使用的数据与这里的数据有较大差异，因此可以使用掩码语言模型(MLM)进行进一步的微调，<a href="https://github.com/UKPLab/sentence-transformers/blob/master/examples/unsupervised_learning/MLM/train_mlm.py">sentence-bert</a>提供了一个训练脚本，这里可直接拿来使用，只需使用content行的文本即可，每行一个新闻，划分好开发集和测试集，便可进行微调改进。</p><h2 id="涨跌预测回归模型构建"><a href="#涨跌预测回归模型构建" class="headerlink" title="涨跌预测回归模型构建"></a>涨跌预测回归模型构建</h2><p>首先导入相关的包，定义相关的路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置使用的显卡</span><br><span class="hljs-keyword">import</span> os<br>os.environ[<span class="hljs-string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="hljs-string">&quot;0&quot;</span><br><br><span class="hljs-comment"># pytorch 程序包</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F <br><span class="hljs-keyword">import</span> torch.optim <span class="hljs-keyword">as</span> optim<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset, DataLoader<br><br><span class="hljs-comment"># transformers预训练模型包</span><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertModel, BertTokenizer, BertConfig<br><span class="hljs-comment"># 长序列建模包</span><br><span class="hljs-keyword">from</span> flash_pytorch <span class="hljs-keyword">import</span> FLASH<br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> datetime, json, random<br><span class="hljs-keyword">from</span> sklearn.utils <span class="hljs-keyword">import</span> shuffle<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> tensorboardX <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-comment"># 农历日期组件</span><br><span class="hljs-keyword">from</span> lunardate <span class="hljs-keyword">import</span> LunarDate<br><br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br><br><span class="hljs-comment"># 项目路径</span><br>base_dir = <span class="hljs-string">&#x27;path_to_your_bert&#x27;</span><br><span class="hljs-comment"># 模型存储路径</span><br>model_dir = base_dir + <span class="hljs-string">&#x27;model/&#x27;</span><br><span class="hljs-comment"># 预训练孟子模型</span><br>bert_dir = model_dir + <span class="hljs-string">&#x27;mengzi-bert-base-mlm/&#x27;</span><br><span class="hljs-comment"># 输入数据集</span><br>input_dir = base_dir + <span class="hljs-string">&#x27;input/&#x27;</span><br><span class="hljs-comment"># tensorboard日志路径</span><br>log_dir =  base_dir + <span class="hljs-string">&#x27;log/&#x27;</span><br><br></code></pre></td></tr></table></figure><h3 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h3><p>构造数据的主要思路是取当天交易日的9:15前的4096条新闻文本，经过Bert分词编码后，对对应的时间特征一起用来训练，标签及其未缺失的掩码用来优化指导AI模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewsDataset</span>(<span class="hljs-params">Dataset</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, seq_len=<span class="hljs-number">4096</span>, txt_len=<span class="hljs-number">64</span>, label_df=<span class="hljs-literal">None</span>, mask_df=<span class="hljs-literal">None</span>, news_df=<span class="hljs-literal">None</span>, tokenizer=<span class="hljs-literal">None</span></span>):</span><br>        self.label_df = label_df<br>        self.mask_df = mask_df<br>        self.news_df = news_df<br>        self.tokenizer = tokenizer<br>        self.seq_len = seq_len<br>        self.txt_len = txt_len <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.label_df)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_news_time</span>(<span class="hljs-params">self, x, base</span>):</span><br>        interval = <span class="hljs-built_in">int</span>(np.clip(np.log1p(base - x), <span class="hljs-number">0</span>, <span class="hljs-number">20</span>))<br>        ts = datetime.datetime.fromtimestamp(x)<br>        month = ts.month<br>        day = ts.day<br>        weekday = ts.weekday()<br>        luna_date = LunarDate.fromSolarDate(ts.year, month, day)<br>        luna_month = luna_date.month<br>        luna_day = luna_date.day<br>        <span class="hljs-keyword">return</span> [month, day, weekday, interval, luna_month, luna_day]<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getitem__</span>(<span class="hljs-params">self, idx</span>):</span><br>        ts = self.label_df.iloc[idx]<br>        label = torch.tensor(ts.tolist(), dtype=torch.float32).reshape((<span class="hljs-number">108</span>, <span class="hljs-number">10</span>))<br>        mask = torch.tensor(self.mask_df.iloc[idx].astype(<span class="hljs-built_in">int</span>).tolist(), dtype=torch.<span class="hljs-built_in">bool</span>)<br>        news = news_df[news_df.timestamp&lt;=ts.name].iloc[-(self.seq_len + <span class="hljs-number">1024</span>):].sort_values(by=[<span class="hljs-string">&#x27;timestamp&#x27;</span>], ascending=<span class="hljs-literal">False</span>)<br>        news = pd.concat([news.iloc[:<span class="hljs-number">1024</span>], news.iloc[<span class="hljs-number">1024</span>:].sample(self.seq_len - <span class="hljs-number">1024</span>).sort_values(by=[<span class="hljs-string">&#x27;timestamp&#x27;</span>], ascending=<span class="hljs-literal">False</span>)], axis=<span class="hljs-number">0</span>)<br>        input_ids = tokenizer(news[<span class="hljs-string">&#x27;content&#x27;</span>].tolist(), max_length=self.txt_len, truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)[<span class="hljs-string">&#x27;input_ids&#x27;</span>]<br>        input_times = news[<span class="hljs-string">&quot;timestamp&quot;</span>].apply(<span class="hljs-keyword">lambda</span> x: self.parse_news_time(x, ts.name)).tolist()<br>        input_times = torch.tensor(input_times, dtype=torch.long)<br>        <br>        <span class="hljs-keyword">return</span> label, mask, input_ids, input_times<br>    <br></code></pre></td></tr></table></figure><h3 id="时间特征编码"><a href="#时间特征编码" class="headerlink" title="时间特征编码"></a>时间特征编码</h3><p>这里对时间6个特征进行编码，然后合并到一起，组成和文本编码相同的维度(BERT的最后输出为768)，作为Transformer模型的位置编码特征。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeEncoder</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, dim=<span class="hljs-number">768</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.month_emb = nn.Embedding(<span class="hljs-number">13</span>, dim // <span class="hljs-number">8</span>)<br>        self.day_emb = nn.Embedding(<span class="hljs-number">32</span>, dim // <span class="hljs-number">8</span> )<br>        self.lunar_month_emb = nn.Embedding(<span class="hljs-number">13</span>, dim // <span class="hljs-number">8</span>)<br>        self.lunar_day_emb = nn.Embedding(<span class="hljs-number">32</span>, dim // <span class="hljs-number">8</span> )<br>        self.weekday_emb = nn.Embedding(<span class="hljs-number">8</span>, dim // <span class="hljs-number">4</span>)<br>        self.interval_emb = nn.Embedding(<span class="hljs-number">20</span>, dim // <span class="hljs-number">4</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, times</span>):</span><br>        month_emb = self.month_emb(times[:, <span class="hljs-number">0</span>])<br>        day_emb = self.day_emb(times[:, <span class="hljs-number">1</span>])<br>        weekday_emb = self.weekday_emb(times[:, <span class="hljs-number">2</span>])<br>        interval_emb = self.interval_emb(times[:, <span class="hljs-number">3</span>])<br>        lunar_month_emb = self.lunar_month_emb(times[:, <span class="hljs-number">4</span>])<br>        lunar_day_emb = self.lunar_day_emb(times[:, <span class="hljs-number">5</span>])<br>        time_embedding = torch.cat([month_emb, day_emb, weekday_emb, interval_emb, lunar_month_emb, lunar_day_emb], dim=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> time_embedding<br></code></pre></td></tr></table></figure><h3 id="新闻BERT编码"><a href="#新闻BERT编码" class="headerlink" title="新闻BERT编码"></a>新闻BERT编码</h3><p>这里使用了澜舟科技开源的<a href="https://github.com/Langboat/Mengzi">孟子预训练模型</a>对单个新闻文本进行编码，并使用了<code>MLM</code>任务进行了进一步的微调。最终可以得到一个<code>Batch  * Seq_len * Dim</code> 的文本向量表示。需要注意的是，我们对孟子模型的最后三层设置了可再训练，会消耗较大显存，如果资源不足，可设置不再优化。对于多个新闻序列，我们这里使用了<a href="https://github.com/lucidrains/FLASH-pytorch">Flash-Transformer</a>，一个长序列建模工具，最终得到新闻序列的向量表示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewsEncoder</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, depth=<span class="hljs-number">3</span>, dim=<span class="hljs-number">768</span>, seq_len=<span class="hljs-number">4096</span>, txt_len=<span class="hljs-number">64</span>, group_size=<span class="hljs-number">256</span>, query_key_dim=<span class="hljs-number">128</span>, attn_dropout=<span class="hljs-number">0.2</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.dim = dim<br>        self.seq_len = seq_len<br>        self.txt_len = txt_len<br>        <span class="hljs-keyword">if</span> os.path.exists(bert_dir):<br>            self.bert_encoder = BertModel.from_pretrained(bert_dir)<br>        <span class="hljs-keyword">else</span>:<br>            self.bert_encoder = BertModel(BertConfig.from_json_file(model_dir + <span class="hljs-string">&#x27;bert_config.json&#x27;</span>)) <br>        <span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> self.bert_encoder.named_parameters():<br>            param.requires_grad = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;layer.10&#x27;</span>, <span class="hljs-string">&#x27;layer.11&#x27;</span>, <span class="hljs-string">&#x27;pooler.dense&#x27;</span>]:<br>                <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> name:<br>                    param.requires_grad = <span class="hljs-literal">True</span><br>        self.time_encoder = TimeEncoder(dim=<span class="hljs-number">768</span>)<br>        self.transformer_layers = nn.ModuleList([FLASH(dim=dim, group_size = group_size, query_key_dim = query_key_dim, causal=<span class="hljs-literal">False</span>, dropout = attn_dropout) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(depth)])<br>        self.norm = nn.LayerNorm(dim)<br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, input_ids, input_times</span>):</span><br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        input_ids: [Batch * seq_len * txt_len]</span><br><span class="hljs-string">        input_times: [Batch * seq_len * time_len]</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        input_ids = input_ids.reshape((-<span class="hljs-number">1</span>, input_ids.shape[-<span class="hljs-number">1</span>])) <span class="hljs-comment"># (Batch * seq_len) * txt_len</span><br>        input_times = input_times.reshape((-<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)) <span class="hljs-comment"># (Batch * seq_len) * 6</span><br>        <br>        attention_mask = input_ids.ne(<span class="hljs-number">0</span>).long().to(input_ids)<br>        <br>        bert_output = self.bert_encoder(input_ids,  attention_mask=attention_mask)  <span class="hljs-comment"># (Batch * seq_len) * txt_len * dim</span><br>        time_output = self.time_encoder(input_times) <span class="hljs-comment"># (Batch * seq_len) * dim</span><br>        news_feature = time_output + bert_output.pooler_output <span class="hljs-comment"># (Batch * seq_len)  * dim</span><br>        news_feature = news_feature.reshape((-<span class="hljs-number">1</span>, self.seq_len, self.dim)) <span class="hljs-comment"># Batch  * seq_len * dim</span><br>        <br>        <span class="hljs-keyword">for</span> flash <span class="hljs-keyword">in</span> self.transformer_layers:<br>            news_feature = flash(news_feature)<br>        output = self.norm(news_feature) <span class="hljs-comment"># Batch  * seq_len * dim</span><br>        <br>        <span class="hljs-keyword">return</span> output<br>   <br></code></pre></td></tr></table></figure><h3 id="指标预测"><a href="#指标预测" class="headerlink" title="指标预测"></a>指标预测</h3><p>由于将一段时间内多个新闻汇集到一起进行预测，因此需要将上述新闻向量表示进行进一步地加工，首先进行平均池化操作，然后对接一个分类器，形成<code>Batch  * 108 * 10</code>维度的预测值，即代表着108个板块中，10个指标的预测情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndustryPredictor</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, depth=<span class="hljs-number">2</span>, dim=<span class="hljs-number">768</span>, seq_len=<span class="hljs-number">4096</span>, class_num=<span class="hljs-number">10</span></span>):</span><br>        <span class="hljs-built_in">super</span>(IndustryPredictor, self).__init__()<br>        self.news_encoder = NewsEncoder(depth=depth, dim=dim, seq_len=seq_len)<br>        self.avg_pooling = nn.AdaptiveAvgPool1d(<span class="hljs-number">108</span>)<br>        self.classifier = nn.Linear(in_features=dim, out_features=class_num)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, input_ids, input_times</span>):</span><br>        news_feature = self.news_encoder(input_ids, input_times) <br>        output = self.avg_pooling(news_feature.transpose(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>).contiguous()).transpose(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>).contiguous() <span class="hljs-comment"># Batch  * 108 * 768</span><br>        output = self.classifier(output)  <span class="hljs-comment"># Batch  * 108 * 10</span><br>        <span class="hljs-keyword">return</span> output<br><br></code></pre></td></tr></table></figure><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>虽然我们可以直接用MSE均方误差损失函数对预测结果进行梯度优化，但考虑到部分指标并不是一直存在的，例如科创50指数早期并不存在，也就没有group truth，会造成指标的不一致，因此，这里我们使用掩码的方式将标签和对应的预测值遮蔽，避免造成干扰。这里也同时计算了pearson相关系数指标，在验证的时候可以直观地看到预测值和真实值的相关程度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calc_loss</span>(<span class="hljs-params">y_true, y_pred, mask</span>):</span><br>    mask2 = mask.squeeze(<span class="hljs-number">0</span>).reshape((<span class="hljs-number">108</span>, <span class="hljs-number">1</span>)).repeat(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>).unsqueeze(<span class="hljs-number">0</span>)<br>    y_true = torch.masked_select(y_true.unsqueeze(<span class="hljs-number">0</span>), mask2).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br>    y_pred = torch.masked_select(y_pred.unsqueeze(<span class="hljs-number">0</span>), mask2).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br>    y_true_label = y_true - y_true.mean(dim=<span class="hljs-number">0</span>, keepdim=<span class="hljs-literal">True</span>)<br>    y_pred_label =  y_pred - y_pred.mean(dim=<span class="hljs-number">0</span>, keepdim=<span class="hljs-literal">True</span>)<br>    loss = F.mse_loss(y_pred, y_true)<br>    pearson = torch.cosine_similarity(y_true_label ,y_pred_label, dim=<span class="hljs-number">0</span>, eps=<span class="hljs-number">1e-6</span>)<br>    <span class="hljs-keyword">return</span> loss, pearson<br></code></pre></td></tr></table></figure><h3 id="主训练过程"><a href="#主训练过程" class="headerlink" title="主训练过程"></a>主训练过程</h3><p><code>FLASH-Transformer</code>深度为3， 序列长度为4096，使用AdamW优化器，学习率为0.00005</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">writer = SummaryWriter(log_dir + <span class="hljs-string">&#x27;/tensorbord/&#x27;</span>) <br>model = IndustryPredictor(depth=<span class="hljs-number">3</span>, dim=<span class="hljs-number">768</span>, seq_len=<span class="hljs-number">4096</span>)<br>model = model.to(device)<br>opt = optim.AdamW(model.parameters(), lr=<span class="hljs-number">5e-5</span>)<br>step = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    train_dataloader = DataLoader(train_dataset, batch_size=<span class="hljs-number">1</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">4</span>)<br>    model.train()<br>    <span class="hljs-keyword">for</span> ind, batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_dataloader):<br>        label, mask, input_ids, input_times = batch<br>        logit = model(input_ids.to(device), input_times.to(device))<br>        loss, pearson = calc_loss(label.to(device), logit, mask.to(device))<br>              <br>        writer.add_scalars(<span class="hljs-string">&#x27;train&#x27;</span>, &#123;<span class="hljs-string">&#x27;loss&#x27;</span>:loss.item()&#125;, step)<br>        <br>        loss.backward()<br>        opt.step()<br>        opt.zero_grad()<br>        <br>        step += <span class="hljs-number">1</span><br>    torch.save(model.state_dict(), model_dir + <span class="hljs-string">&quot;/news_model/IndustryPredictor_%d.torch&quot;</span> % epoch)<br></code></pre></td></tr></table></figure><h2 id="分析预测结果"><a href="#分析预测结果" class="headerlink" title="分析预测结果"></a>分析预测结果</h2><h3 id="查看训练过程的损失函数变化曲线"><a href="#查看训练过程的损失函数变化曲线" class="headerlink" title="查看训练过程的损失函数变化曲线"></a>查看训练过程的损失函数变化曲线</h3><p><img src="/img/loss.png"></p><p>从图中可以看出,训练过程中的损失函数曲线十分曲折，就是使用0.99的阈值平滑，噪声也很大。因此，这并不是一个容易学习的任务，预测的结果具有很高的随机性。</p><h3 id="查看验证集上的预测值和实际值的相关性系数"><a href="#查看验证集上的预测值和实际值的相关性系数" class="headerlink" title="查看验证集上的预测值和实际值的相关性系数"></a>查看验证集上的预测值和实际值的相关性系数</h3><p>我们在验证集上对108个板块，10个单项指标，合计1080个总指标的预测值与真实值之间的相关系数(<code>sector_corr_df[&quot;corr&quot;].describe()</code>)进行统计,可发现尽管总体上相关程度不高，但也有一些较高的单项。</p><table><thead><tr><th align="left"></th><th align="right">corr</th></tr></thead><tbody><tr><td align="left">count</td><td align="right">1080</td></tr><tr><td align="left">mean</td><td align="right">-0.030514</td></tr><tr><td align="left">std</td><td align="right">0.274666</td></tr><tr><td align="left">min</td><td align="right">-0.649692</td></tr><tr><td align="left">25%</td><td align="right">-0.221297</td></tr><tr><td align="left">50%</td><td align="right">-0.0553582</td></tr><tr><td align="left">75%</td><td align="right">0.136897</td></tr><tr><td align="left">max</td><td align="right">0.864099</td></tr></tbody></table><p>我们详细看看那些预测较高(<code>sector_corr_df[sector_corr_df[&quot;corr&quot;] &gt; 0.6]</code>))的指标：</p><table><thead><tr><th align="left">sector</th><th align="left">indicator</th><th align="right">corr</th></tr></thead><tbody><tr><td align="left">CSRC2农副食品加工业</td><td align="left">intraday_open_close</td><td align="right">0.780031</td></tr><tr><td align="left">CSRC2食品制造业</td><td align="left">intraday_open_close</td><td align="right">0.84407</td></tr><tr><td align="left">CSRC2酒、饮料和精制茶制造业</td><td align="left">intraday_open_close</td><td align="right">0.731186</td></tr><tr><td align="left">CSRC2皮革、毛皮、羽毛及其制品和制鞋业</td><td align="left">intraday_open_close</td><td align="right">0.635645</td></tr><tr><td align="left">CSRC2木材加工及木、竹、藤、棕、草制品业</td><td align="left">intraday_open_close</td><td align="right">0.694802</td></tr><tr><td align="left">CSRC2家具制造业</td><td align="left">intraday_open_close</td><td align="right">0.825688</td></tr><tr><td align="left">CSRC2造纸及纸制品业</td><td align="left">intraday_open_close</td><td align="right">0.755133</td></tr><tr><td align="left">CSRC2橡胶和塑料制品业</td><td align="left">intraday_open_close</td><td align="right">0.636808</td></tr><tr><td align="left">CSRC2金属制品业</td><td align="left">intraday_open_close</td><td align="right">0.838386</td></tr><tr><td align="left">CSRC2通用设备制造业</td><td align="left">intraday_open_close</td><td align="right">0.811593</td></tr><tr><td align="left">CSRC2专用设备制造业</td><td align="left">intraday_open_close</td><td align="right">0.828883</td></tr><tr><td align="left">CSRC2汽车制造业</td><td align="left">intraday_open_close</td><td align="right">0.728715</td></tr><tr><td align="left">CSRC2计算机、通信和其他电子设备制造业</td><td align="left">intraday_open_close</td><td align="right">0.681775</td></tr><tr><td align="left">CSRC2仪器仪表制造业</td><td align="left">intraday_open_close</td><td align="right">0.76271</td></tr><tr><td align="left">CSRC2仪器仪表制造业</td><td align="left">intraday_avg_close</td><td align="right">0.600887</td></tr><tr><td align="left">CSRC2废弃资源综合利用业</td><td align="left">intraday_open_close</td><td align="right">0.617559</td></tr><tr><td align="left">CSRC2电力、热力生产和供应业</td><td align="left">intraday_open_close</td><td align="right">0.679018</td></tr><tr><td align="left">CSRC2燃气生产和供应业</td><td align="left">intraday_open_close</td><td align="right">0.708935</td></tr><tr><td align="left">CSRC2土木工程建筑业</td><td align="left">intraday_open_close</td><td align="right">0.666156</td></tr><tr><td align="left">CSRC2建筑装饰和其他建筑业</td><td align="left">intraday_open_close</td><td align="right">0.864099</td></tr><tr><td align="left">CSRC2建筑装饰和其他建筑业</td><td align="left">intraday_avg_close</td><td align="right">0.709512</td></tr><tr><td align="left">CSRC2批发业</td><td align="left">intraday_open_close</td><td align="right">0.605899</td></tr><tr><td align="left">CSRC2批发业</td><td align="left">intraday_avg_close</td><td align="right">0.612417</td></tr><tr><td align="left">CSRC2电信、广播电视和卫星传输服务</td><td align="left">intraday_open_close</td><td align="right">0.649785</td></tr><tr><td align="left">CSRC2互联网和相关服务</td><td align="left">intraday_open_close</td><td align="right">0.683816</td></tr></tbody></table><p>可发现日内相关指标的系数较高，而日间较低，这与预期相符，毕竟第二天不可控的因素更多。</p><h3 id="具体日期预测结果分析"><a href="#具体日期预测结果分析" class="headerlink" title="具体日期预测结果分析"></a>具体日期预测结果分析</h3><p>我们以<code>2022-07-01</code>日的预测结果回看准确性。将预测的结果倒序，排除日内指标，可看出推荐的Top5隔天平均收益达到1个百分点，整体还是可观的。</p><table><thead><tr><th align="left">trade_date</th><th align="left">sector</th><th align="left">metric</th><th align="right">actual</th><th align="right">prediction</th></tr></thead><tbody><tr><td align="left">2022-07-01</td><td align="left">CSRC2铁路运输业</td><td align="left">daily_close_open</td><td align="right">-1.282</td><td align="right">0.921</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2林业</td><td align="left">daily_close_open</td><td align="right">2.471</td><td align="right">0.899</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2有色金属矿采选业</td><td align="left">daily_close_open</td><td align="right">3.187</td><td align="right">0.895</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2零售业</td><td align="left">daily_close_open</td><td align="right">-0.882</td><td align="right">0.886</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2农业</td><td align="left">daily_close_open</td><td align="right">1.727</td><td align="right">0.875</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2黑色金属矿采选业</td><td align="left">daily_close_open</td><td align="right">3.532</td><td align="right">0.871</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2化学原料及化学制品制造业</td><td align="left">daily_close_open</td><td align="right">1.628</td><td align="right">0.867</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2电气机械及器材制造业</td><td align="left">daily_close_open</td><td align="right">0.953</td><td align="right">0.861</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2有色金属冶炼及压延加工业</td><td align="left">daily_close_open</td><td align="right">1.94</td><td align="right">0.85</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2畜牧业</td><td align="left">daily_close_open</td><td align="right">9.056</td><td align="right">0.84</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2水上运输业</td><td align="left">daily_close_open</td><td align="right">-0.427</td><td align="right">0.835</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2金属制品业</td><td align="left">daily_close_open</td><td align="right">1.102</td><td align="right">0.811</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2航空运输业</td><td align="left">daily_close_open</td><td align="right">-3.904</td><td align="right">0.801</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2医药制造业</td><td align="left">daily_close_open</td><td align="right">2.501</td><td align="right">0.8</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2石油加工、炼焦及核燃料加工业</td><td align="left">daily_close_open</td><td align="right">0.381</td><td align="right">0.797</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2铁路、船舶、航空航天和其它运输设备制造业</td><td align="left">daily_close_open</td><td align="right">0.922</td><td align="right">0.789</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2道路运输业</td><td align="left">daily_close_open</td><td align="right">-1.089</td><td align="right">0.783</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2道路运输业</td><td align="left">daily_avg_open</td><td align="right">-1.441</td><td align="right">0.783</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2通用设备制造业</td><td align="left">daily_close_open</td><td align="right">0.666</td><td align="right">0.782</td></tr><tr><td align="left">2022-07-01</td><td align="left">CSRC2非金属矿采选业</td><td align="left">daily_close_open</td><td align="right">2.067</td><td align="right">0.778</td></tr></tbody></table><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>利用序列模型对新闻事件数据进行拟合、预测，虽然不是非常精确、整体相关性不是很明显，但在一些突发事件中，还是可以获得一些超额收益的。大家如有观点看法，欢迎后台留言讨论！</p><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。<br><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>量化交易</tag>
      
      <tag>新闻事件</tag>
      
      <tag>量化策略</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迅投QMT历史行情转存Clickhouse数据库</title>
    <link href="/2022/07/03/%E8%BF%85%E6%8A%95QMT%E5%8E%86%E5%8F%B2%E8%A1%8C%E6%83%85%E8%BD%AC%E5%AD%98Clickhouse%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2022/07/03/%E8%BF%85%E6%8A%95QMT%E5%8E%86%E5%8F%B2%E8%A1%8C%E6%83%85%E8%BD%AC%E5%AD%98Clickhouse%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>上文介绍如何获取批量股票代码并缓存对应的tick、分钟、日级别的历史数据，本节则介绍如何将读取本地的缓存数据并写入到clickhouse数据库中。历史行情数据从格式上看分为tick数据和K线数据两大类，针对这两类的数据我们分别处理。</p></blockquote><h2 id="Tick数据预处理"><a href="#Tick数据预处理" class="headerlink" title="Tick数据预处理"></a>Tick数据预处理</h2><p>首先读取本地缓存数据，这里以南航转债(<code>110075.SH</code>)为例，需要注意的是tick数据包含了集合竞价时段，成交量/额是按日累计的，因此需要做一定的转换。</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> xtquant <span class="hljs-keyword">import</span> xtdata<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_local_tick_data</span>(<span class="hljs-params">code=<span class="hljs-string">&#x27;110075.SH&#x27;</span>, start_time=<span class="hljs-string">&#x27;19700101&#x27;</span></span>):</span><br>    <span class="hljs-comment"># 获取本地数据</span><br>    df = xtdata.get_local_data(stock_code=[code], period=<span class="hljs-string">&#x27;tick&#x27;</span>, field_list=[<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;lastPrice&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;lastClose&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>, <span class="hljs-string">&#x27;askPrice&#x27;</span>, <span class="hljs-string">&#x27;bidPrice&#x27;</span>, <span class="hljs-string">&#x27;askVol&#x27;</span>, <span class="hljs-string">&#x27;bidVol&#x27;</span>], start_time=start_time, end_time=start_time)<br><br>    <span class="hljs-comment"># 转成DataFRame</span><br>    df = pd.DataFrame(df[code])<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(df) &lt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> df<br><br>    <span class="hljs-comment"># 日期处理</span><br>    df[<span class="hljs-string">&#x27;trade_time&#x27;</span>] = df[<span class="hljs-string">&#x27;time&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: datetime.datetime.fromtimestamp(x / <span class="hljs-number">1000.0</span>)) <span class="hljs-comment"># , cn_tz</span><br>    df[<span class="hljs-string">&#x27;trade_day&#x27;</span>] = df[<span class="hljs-string">&#x27;trade_time&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: x.date())<br>    df[<span class="hljs-string">&#x27;trade_minute&#x27;</span>] = df[<span class="hljs-string">&#x27;trade_time&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: x.hour * <span class="hljs-number">60</span> + x.minute)<br>    df[<span class="hljs-string">&#x27;trade_second&#x27;</span>] = df[<span class="hljs-string">&#x27;trade_time&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: x.hour * <span class="hljs-number">3600</span> + x.minute * <span class="hljs-number">60</span> + x.second)<br>    df = df[df.trade_second &lt;= <span class="hljs-number">54001</span>] <span class="hljs-comment"># 排除盘后交易</span><br>    df = df[df.trade_second &gt;= <span class="hljs-number">33840</span>] <span class="hljs-comment"># 保留最后一分钟的集合竞价数据</span><br>    df = df.reset_index(drop=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment"># 重新计算成交量、成交额</span><br>    df[<span class="hljs-string">&#x27;volume_deal&#x27;</span>] = df.groupby([<span class="hljs-string">&#x27;trade_day&#x27;</span>])[<span class="hljs-string">&#x27;volume&#x27;</span>].diff(periods=<span class="hljs-number">1</span>).fillna(<span class="hljs-number">0</span>)<br>    df[<span class="hljs-string">&#x27;amount_deal&#x27;</span>] = df.groupby([<span class="hljs-string">&#x27;trade_day&#x27;</span>])[<span class="hljs-string">&#x27;amount&#x27;</span>].diff(periods=<span class="hljs-number">1</span>).fillna(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-comment"># 重新选择列</span><br>    df[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-string">&#x27;110075.SH&#x27;</span><br>    df[<span class="hljs-string">&#x27;close&#x27;</span>] = df[<span class="hljs-string">&#x27;lastPrice&#x27;</span>] <span class="hljs-comment"># 收盘</span><br>    df[<span class="hljs-string">&#x27;last&#x27;</span>] = df[<span class="hljs-string">&#x27;lastClose&#x27;</span>] <span class="hljs-comment"># 昨收</span><br>    df = df[[<span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;trade_time&#x27;</span>, <span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;trade_minute&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;last&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>, <span class="hljs-string">&#x27;volume_deal&#x27;</span>, <span class="hljs-string">&#x27;amount_deal&#x27;</span>, <span class="hljs-string">&#x27;askPrice&#x27;</span>, <span class="hljs-string">&#x27;bidPrice&#x27;</span>, <span class="hljs-string">&#x27;askVol&#x27;</span>, <span class="hljs-string">&#x27;bidVol&#x27;</span>]]<br><br>    <span class="hljs-keyword">return</span> df<br><br>df = get_local_tick_data(code=<span class="hljs-string">&#x27;110075.SH&#x27;</span>, start_time=<span class="hljs-string">&#x27;20220630&#x27;</span>)<br><span class="hljs-built_in">print</span>(df.iloc[-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>最终，我们得到诸如下图的tick存储数据:</p><p><img src="/img/tick_data_store.png"></p><h2 id="K线数据预处理"><a href="#K线数据预处理" class="headerlink" title="K线数据预处理"></a>K线数据预处理</h2><p>读取本地缓存数据，这里以行业板块指数为例，首先获取行业指数，然后查询详情，获取元数据:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_sector_list</span>():</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    获取沪深指数、行业指数</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    sector_1 = xtdata.get_stock_list_in_sector(<span class="hljs-string">&#x27;证监会行业板块指数&#x27;</span>)<br>    sector_1 = [(i, xtdata.get_instrument_detail(i)[<span class="hljs-string">&#x27;InstrumentName&#x27;</span>], <span class="hljs-string">&#x27;证监会一级行业&#x27;</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sector_1]<br><br>    sector_2 = xtdata.get_stock_list_in_sector(<span class="hljs-string">&#x27;板块指数&#x27;</span>)<br>    sector_2 = [(i, xtdata.get_instrument_detail(i)[<span class="hljs-string">&#x27;InstrumentName&#x27;</span>], <span class="hljs-string">&#x27;证监会二级行业&#x27;</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sector_2 <span class="hljs-keyword">if</span> i.startswith(<span class="hljs-string">&#x27;23&#x27;</span>)]<br><br><br>    index_code = [(<span class="hljs-string">&#x27;000001.SH&#x27;</span>, <span class="hljs-string">&#x27;上证指数&#x27;</span>, <span class="hljs-string">&#x27;大盘指数&#x27;</span>), (<span class="hljs-string">&#x27;399001.SZ&#x27;</span>, <span class="hljs-string">&#x27;深证成指&#x27;</span>, <span class="hljs-string">&#x27;大盘指数&#x27;</span>), (<span class="hljs-string">&#x27;399006.SZ&#x27;</span>, <span class="hljs-string">&#x27;创业板指&#x27;</span>, <span class="hljs-string">&#x27;大盘指数&#x27;</span>), (<span class="hljs-string">&#x27;000688.SH&#x27;</span>, <span class="hljs-string">&#x27;科创50&#x27;</span>, <span class="hljs-string">&#x27;大盘指数&#x27;</span>), (<span class="hljs-string">&#x27;000300.SH&#x27;</span>, <span class="hljs-string">&#x27;沪深300&#x27;</span>, <span class="hljs-string">&#x27;大盘指数&#x27;</span>), (<span class="hljs-string">&#x27;000016.SH&#x27;</span>, <span class="hljs-string">&#x27;上证50&#x27;</span>, <span class="hljs-string">&#x27;大盘指数&#x27;</span>), (<span class="hljs-string">&#x27;000905.SH&#x27;</span>, <span class="hljs-string">&#x27;中证500&#x27;</span>, <span class="hljs-string">&#x27;大盘指数&#x27;</span>), (<span class="hljs-string">&#x27;000852.SH&#x27;</span>, <span class="hljs-string">&#x27;中证1000&#x27;</span>, <span class="hljs-string">&#x27;大盘指数&#x27;</span>)]<br><br>    code_list = &#123;i[<span class="hljs-number">0</span>]: i[<span class="hljs-number">1</span>:] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sector_1 + sector_2 + index_code&#125;<br><br>    <span class="hljs-keyword">return</span> code_list<br></code></pre></td></tr></table></figure><p>然后处理本地行情，这里以证监会二级行业行业中的餐饮业(<code>230130.BKZS</code>)为例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_local_kline_data</span>(<span class="hljs-params">code=<span class="hljs-string">&#x27;230130.BKZS&#x27;</span>, start_time=<span class="hljs-string">&#x27;20200101&#x27;</span>, period=<span class="hljs-string">&#x27;1d&#x27;</span>, code_list =  get_sector_list(<span class="hljs-params"></span>)</span>):</span><br>    <span class="hljs-comment"># 获取本地数据</span><br>    df = xtdata.get_local_data(stock_code=[code], period=<span class="hljs-string">&#x27;1d&#x27;</span>, field_list=[<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>], start_time=start_time, end_time=datetime.datetime.now().strftime(<span class="hljs-string">&#x27;%Y%m%d%H%M%S&#x27;</span>))<br>    df = pd.concat([df[i].T.rename(columns=&#123;code:i&#125;) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>]], axis=<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(df) &lt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> df<br><br>    <span class="hljs-comment"># 时间转换</span><br>    df[<span class="hljs-string">&#x27;trade_day&#x27;</span>] = df[<span class="hljs-string">&#x27;time&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: datetime.datetime.fromtimestamp(x / <span class="hljs-number">1000.0</span>).date())<br><br>    <span class="hljs-comment"># 重新选择列</span><br>    df[<span class="hljs-string">&#x27;code&#x27;</span>] = code<br>    df[<span class="hljs-string">&#x27;sector_name&#x27;</span>] = df[<span class="hljs-string">&#x27;code&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: code_list[x][<span class="hljs-number">0</span>])<br>    df[<span class="hljs-string">&#x27;sector_type&#x27;</span>] = df[<span class="hljs-string">&#x27;code&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: code_list[x][<span class="hljs-number">1</span>])<br>    df = df[[<span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;trade_day&#x27;</span>, <span class="hljs-string">&#x27;sector_name&#x27;</span>, <span class="hljs-string">&#x27;sector_type&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;volume&#x27;</span>, <span class="hljs-string">&#x27;amount&#x27;</span>]]<br><br>    <span class="hljs-keyword">return</span> df<br></code></pre></td></tr></table></figure><p><img src="/img/kline_data_store.png"></p><h2 id="Clickhouse数据库设计"><a href="#Clickhouse数据库设计" class="headerlink" title="Clickhouse数据库设计"></a>Clickhouse数据库设计</h2><p>这里选用Clickhouse，而不是MySQL的主要原因是性能问题。行情数据一旦写入，几乎不会更新，并且量非常大，没有复杂的表关联，MySQL在这种场景下主要的问题是存储空间占用多、读写慢，而ClickHouse主要用于在线分析处理查询（OLAP），具有高效的数据压缩、向量引擎、列式存储特性，非常适合金融行情数据存储。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> database xtquant<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> xtquant.bond_tick<br>(<br>    code String, <br>    trade_time DateTime(<span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>), <br>    trade_day <span class="hljs-type">Date</span>, <br>    trade_minute Int16, <br>    <span class="hljs-keyword">open</span> Nullable(Float32), <br>    <span class="hljs-keyword">close</span> Nullable(Float32), <br>    high Nullable(Float32), <br>    low Nullable(Float32), <br>    <span class="hljs-keyword">last</span> Nullable(Float32), <br>    volume Nullable(Float64), <br>    amount Nullable(Float64), <br>    volume_deal Nullable(Float32), <br>    amount_deal Nullable(Float32), <br>    askPrice <span class="hljs-keyword">Array</span>(Nullable(Float32)), <br>    bidPrice <span class="hljs-keyword">Array</span>(Nullable(Float32)), <br>    askVol <span class="hljs-keyword">Array</span>(Nullable(Float32)), <br>    bidVol <span class="hljs-keyword">Array</span>(Nullable(Float32))<br>)<br>ENGINE <span class="hljs-operator">=</span> ReplacingMergeTree()<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> (trade_time, code, trade_day)<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> xtquant.sector_1d<br>(<br>    code String, <br>    trade_day <span class="hljs-type">Date</span>, <br>    sector_name String,<br>    sector_type String,<br>    <span class="hljs-keyword">open</span> Nullable(Float32), <br>    <span class="hljs-keyword">close</span> Nullable(Float32), <br>    high Nullable(Float32), <br>    low Nullable(Float32), <br>    volume Nullable(Float64), <br>    amount Nullable(Float64)<br>)<br>ENGINE <span class="hljs-operator">=</span> ReplacingMergeTree()<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> (trade_day, code)<br></code></pre></td></tr></table></figure><h2 id="Clickhouse数据批量写入"><a href="#Clickhouse数据批量写入" class="headerlink" title="Clickhouse数据批量写入"></a>Clickhouse数据批量写入</h2><p>设计好数据表后，利用<code>clickhouse_driver</code>库提供的接口将数据同步到数据库中。</p><p>对于tick数据，按天来遍历插入，对于k线数据，则直接存入，为了增量同步，写入时可查询已有数据的最大时间，避免重复写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> clickhouse_driver <span class="hljs-keyword">import</span> Client<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br>storage_client = Client(<span class="hljs-string">&#x27;10.0.16.11&#x27;</span>, password=<span class="hljs-string">&#x27;******&#x27;</span>, settings=&#123;<span class="hljs-string">&#x27;use_numpy&#x27;</span>: <span class="hljs-literal">True</span>&#125;)<br><br><span class="hljs-comment"># 可转债tick数据</span><br><span class="hljs-comment"># 获取可转债列表</span><br>_, bond_code_list = get_bond_history()<br><span class="hljs-keyword">for</span> code <span class="hljs-keyword">in</span> tqdm(bond_code_list):<br>    start_date = storage_client.execute(<span class="hljs-string">&quot;select max(trade_day) from xtquant.bond_tick where code=&#x27;&#123;&#125;&#x27;&quot;</span>.<span class="hljs-built_in">format</span>(code))<br>    start_date = <span class="hljs-built_in">str</span>(start_date[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]).replace(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    start_date = <span class="hljs-built_in">max</span>(start_date, <span class="hljs-string">&#x27;20200401&#x27;</span>)<br>    trade_dates = xtdata.get_trading_dates(<span class="hljs-string">&#x27;SH&#x27;</span>, start_time=start_date, end_time=datetime.date.today().strftime(<span class="hljs-string">&#x27;%Y%m%d&#x27;</span>))<br>    <span class="hljs-keyword">for</span> day <span class="hljs-keyword">in</span> trade_dates:<br>        day = datetime.datetime.fromtimestamp(day / <span class="hljs-number">1000.0</span>).strftime(<span class="hljs-string">&#x27;%Y%m%d&#x27;</span>)<br>    df = get_local_tick_data(code=code, start_time=day)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(df) &gt; <span class="hljs-number">0</span>:<br>        storage_client.insert_dataframe(<span class="hljs-string">&#x27;INSERT INTO xtquant.bond_tick VALUES&#x27;</span>, df)<br><br><span class="hljs-comment"># 行业1d数据</span><br><span class="hljs-comment"># 获取行业列表</span><br>sector_code_list = get_sector_list()<br><span class="hljs-keyword">for</span> code <span class="hljs-keyword">in</span> tqdm(sector_code_list):<br>    start_date = storage_client.execute(<span class="hljs-string">&quot;select max(trade_day) from xtquant.sector_1d where code=&#x27;&#123;&#125;&#x27;&quot;</span>.<span class="hljs-built_in">format</span>(code))<br>    start_date = <span class="hljs-built_in">str</span>(start_date[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]).replace(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    start_date = <span class="hljs-built_in">max</span>(start_date, <span class="hljs-string">&#x27;20100101&#x27;</span>)<br>    df = get_local_kline_data(code=code, start_time=start_date, period=<span class="hljs-string">&#x27;1d&#x27;</span>, code_list =  sector_code_list)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(df) &gt; <span class="hljs-number">0</span>:<br>        storage_client.insert_dataframe(<span class="hljs-string">&#x27;INSERT INTO xtquant.sector_1d VALUES&#x27;</span>, df)<br></code></pre></td></tr></table></figure><p>运行如上代码后，我们便可在clickhouse客户端中查询到已经写入的数据：</p><p><img src="/img/clickhouse_query.png"></p><p>至此，我们已经完成了历史数据到数据库中存储和增量写入。</p><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="https://mp.weixin.qq.com/s/5XI09nyStjmD0faYs9UIlw">初探迅投QMT极简策略系统</a></li><li><a href="https://mp.weixin.qq.com/s/R2WquJUD4Mu6wuoFjoC3AQ">迅投QMT量化行情接口以及历史行情数据下载</a></li><li><a href="https://mp.weixin.qq.com/s/l-pFVnqsWjLP1iBM63dD9Q">迅投QMT历史行情批量缓存</a></li></ul><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。</p><p><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>迅投QMT</tag>
      
      <tag>量化交易</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迅投QMT历史行情批量缓存</title>
    <link href="/2022/07/01/%E8%BF%85%E6%8A%95QMT%E5%8E%86%E5%8F%B2%E8%A1%8C%E6%83%85%E6%89%B9%E9%87%8F%E7%BC%93%E5%AD%98/"/>
    <url>/2022/07/01/%E8%BF%85%E6%8A%95QMT%E5%8E%86%E5%8F%B2%E8%A1%8C%E6%83%85%E6%89%B9%E9%87%8F%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>上文介绍了QMT行情接口概况和一个历史行情数据下载案例，本文进一步介绍如何获取批量股票代码并缓存对应的tick、分钟、日级别的历史数据。</p></blockquote><h2 id="获取股票名称列表"><a href="#获取股票名称列表" class="headerlink" title="获取股票名称列表"></a>获取股票名称列表</h2><p>QMT的行情函数暂时不能获取可转债列表，因此这里使用<code>akshare</code>库进行相关元数据的获取，使用前确保已安装。<code>akshare</code>库本身的功能十分强大，后续将详细展开，这里先不赘述。</p><p>首先导入相关的包：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> xtquant <span class="hljs-keyword">import</span> xtdata<br><span class="hljs-keyword">import</span> akshare <span class="hljs-keyword">as</span> ak<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br></code></pre></td></tr></table></figure><p>第一个接口是获取包含历史转债代码的列表，以方便同步历史数据，可转债上海市场以11开头，深圳市场以12开头，这里需要将akshare中来自东方财富的数据与QMT进行代码的对齐：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_bond_history</span>():</span><br>    bond_zh_cov_df = ak.bond_zh_cov()<br>    <span class="hljs-comment"># 排除至今未上市的转债</span><br>    bond_zh_cov_df =  bond_zh_cov_df[bond_zh_cov_df[<span class="hljs-string">&#x27;上市时间&#x27;</span>] &lt;= datetime.date.today()]<br>    stock_code_list, bond_code_list = [], []<br>    <span class="hljs-keyword">for</span> _, row <span class="hljs-keyword">in</span> bond_zh_cov_df.iterrows():<br>        <span class="hljs-keyword">if</span> row[<span class="hljs-string">&#x27;债券代码&#x27;</span>].startswith(<span class="hljs-string">&#x27;11&#x27;</span>):<br>            market = <span class="hljs-string">&#x27;.SH&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            market = <span class="hljs-string">&#x27;.SZ&#x27;</span><br>        stock_code_list.append(row[<span class="hljs-string">&#x27;正股代码&#x27;</span>] + market)<br>        bond_code_list.append(row[<span class="hljs-string">&#x27;债券代码&#x27;</span>] + market)<br>    <span class="hljs-keyword">return</span> stock_code_list, bond_code_list<br></code></pre></td></tr></table></figure><p>第二个接口是获取实时转债代码的列表，以方便增量更新，避免重复下载：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_bond_spot</span>():</span><br>    bond_cov_comparison_df = ak.bond_cov_comparison()<br>    <span class="hljs-comment"># 排除至今未上市的转债</span><br>    bond_cov_comparison_df =  bond_cov_comparison_df[bond_cov_comparison_df[<span class="hljs-string">&#x27;上市日期&#x27;</span>] !=<span class="hljs-string">&#x27;-&#x27;</span>]<br><br>    stock_code_list, bond_code_list = [], []<br>    <span class="hljs-keyword">for</span> _, row <span class="hljs-keyword">in</span> bond_cov_comparison_df.iterrows():<br>        <span class="hljs-keyword">if</span> row[<span class="hljs-string">&#x27;转债代码&#x27;</span>].startswith(<span class="hljs-string">&#x27;11&#x27;</span>):<br>            market = <span class="hljs-string">&#x27;.SH&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            market = <span class="hljs-string">&#x27;.SZ&#x27;</span><br>        stock_code_list.append(row[<span class="hljs-string">&#x27;正股代码&#x27;</span>] + market)<br>        bond_code_list.append(row[<span class="hljs-string">&#x27;转债代码&#x27;</span>] + market)<br>    <span class="hljs-keyword">return</span> stock_code_list, bond_code_list<br></code></pre></td></tr></table></figure><p>第三个接口是获取A股市场的沪深指数、所有A股、ETF、债券列表等股票代码，以便下载K线数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_shse_a_list</span>():</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    获取沪深指数、所有A股、ETF、债券列表</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    index_code = [<span class="hljs-string">&#x27;000001.SH&#x27;</span>, <span class="hljs-string">&#x27;399001.SZ&#x27;</span>, <span class="hljs-string">&#x27;399006.SZ&#x27;</span>, <span class="hljs-string">&#x27;000688.SH&#x27;</span>, <span class="hljs-string">&#x27;000300.SH&#x27;</span>, <span class="hljs-string">&#x27;000016.SH&#x27;</span>, <span class="hljs-string">&#x27;000905.SH&#x27;</span>, <span class="hljs-string">&#x27;000852.SH&#x27;</span>] <span class="hljs-comment"># 上证指数、深证成指、创业板指、科创50、沪深300、上证50、中证500、中证1000</span><br>    a_code = xtdata.get_stock_list_in_sector(<span class="hljs-string">&#x27;沪深A股&#x27;</span>)<br>    etf_code =  xtdata.get_stock_list_in_sector(<span class="hljs-string">&#x27;沪深ETF&#x27;</span>)<br>    <span class="hljs-comment">#bond_code = [i for i in xtdata.get_stock_list_in_sector(&#x27;沪深债券&#x27;) if i[:3] in &#123;&#x27;110&#x27;,  &#x27;111&#x27;, &#x27;113&#x27;, &#x27;118&#x27;, &#x27;123&#x27;, &#x27;127&#x27;, &#x27;128&#x27;&#125;]</span><br>    bond_code = get_bond_history()[-<span class="hljs-number">1</span>]<br><br>    <span class="hljs-keyword">return</span> index_code + a_code + etf_code + bond_code<br></code></pre></td></tr></table></figure><h2 id="批量下载可转债tick数据"><a href="#批量下载可转债tick数据" class="headerlink" title="批量下载可转债tick数据"></a>批量下载可转债tick数据</h2><p>通过控制参数<code>init</code>来决定是否增量下载(以天为粒度)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download_history_bond_tick</span>(<span class="hljs-params">init=<span class="hljs-number">1</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    下载历史转债tick数据(20200401起)</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># 初始化：获取转债及其正股代码</span><br>    <span class="hljs-keyword">if</span> init:<br>        <span class="hljs-comment"># 包含历史过期代码</span><br>        stock_code_list, bond_code_list = get_bond_history()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 仅当日代码</span><br>        stock_code_list, bond_code_list = get_bond_spot()<br>    <br>    <span class="hljs-comment"># 数据下载目录</span><br>    data_dir = <span class="hljs-string">&#x27;E:\\QMT\\userdata_mini\\datadir\\&#x27;</span><br>    <span class="hljs-keyword">for</span> stock, bond <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">zip</span>(stock_code_list, bond_code_list), total=<span class="hljs-built_in">len</span>(stock_code_list)):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始下载：股票 &#123;&#125;, 转债 &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(stock, bond))<br>        <span class="hljs-comment"># 上海转债: 已下载的数据</span><br>        <span class="hljs-keyword">if</span> bond.endswith(<span class="hljs-string">&quot;SH&quot;</span>):<br>            dir_path = data_dir + <span class="hljs-string">&quot;\\SH\\0\\&quot;</span> + bond.split(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br>        <span class="hljs-comment"># 深圳转债：已下载的数据</span><br>        <span class="hljs-keyword">else</span>:<br>            dir_path = data_dir + <span class="hljs-string">&quot;\\SZ\\0\\&quot;</span> + bond.split(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br>        <br>        start_date = <span class="hljs-string">&#x27;20200401&#x27;</span> <span class="hljs-comment"># QMT支持的最久数据时间</span><br>        <span class="hljs-comment"># 如果路径存在，断点续传，重设起点下载时间</span><br>        <span class="hljs-keyword">if</span> os.path.exists(dir_path):<br>            downloaded = os.listdir(dir_path)<br>            <span class="hljs-comment"># 获取已下载的最大日期，作为本次同步的起始时间</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(downloaded) &gt; <span class="hljs-number">0</span>:<br>                start_date = <span class="hljs-built_in">max</span>(downloaded).split(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br>            <br>        xtdata.download_history_data(stock_code=bond, period=<span class="hljs-string">&#x27;tick&#x27;</span>, start_time=start_date)<br><br></code></pre></td></tr></table></figure><h2 id="批量下载K线"><a href="#批量下载K线" class="headerlink" title="批量下载K线"></a>批量下载K线</h2><p>通过传入参数<code>start_time</code>设置起始下载时间，参数<code>period</code>设置K线类型:</p><ul><li>1m: 1分钟K线</li><li>1d: 1日K线</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download_history_kline</span>(<span class="hljs-params">code_list, start_time=<span class="hljs-string">&#x27;&#x27;</span>, period=<span class="hljs-string">&#x27;1m&#x27;</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    下载历史K线数据:</span><br><span class="hljs-string">    code_list: 股票代码， 如：get_shse_a_list()</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;本次开始下载的时间为：&quot;</span>, datetime.datetime.now().strftime(<span class="hljs-string">&quot;%Y%m%d%H%M%S&quot;</span>))<br>    <span class="hljs-keyword">for</span> code <span class="hljs-keyword">in</span> tqdm(code_list):<br>        xtdata.download_history_data(code, period=period, start_time=start_time)<br><br></code></pre></td></tr></table></figure><p>经过漫长的等待，本地便会有历史数据的缓存了，存储的目录形式为<code>datadir\SH\&#123;0|60|86400&#125;\&#123;code&#125;</code>，便于我们进一步加工处理。</p><p>至此，我们已经缓存了许多历史数据，并且可以增量更新，保存到数据库中供后续分析。</p><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="https://mp.weixin.qq.com/s/5XI09nyStjmD0faYs9UIlw">初探迅投QMT极简策略系统</a></li><li><a href="https://mp.weixin.qq.com/s/R2WquJUD4Mu6wuoFjoC3AQ">迅投QMT量化行情接口以及历史行情数据下载</a></li></ul><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。</p><p><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>迅投QMT</tag>
      
      <tag>量化交易</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QMT行情接口以及历史行情数据下载</title>
    <link href="/2022/06/27/QMT%E8%A1%8C%E6%83%85%E6%8E%A5%E5%8F%A3%E4%BB%A5%E5%8F%8A%E5%8E%86%E5%8F%B2%E8%A1%8C%E6%83%85%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD/"/>
    <url>/2022/06/27/QMT%E8%A1%8C%E6%83%85%E6%8E%A5%E5%8F%A3%E4%BB%A5%E5%8F%8A%E5%8E%86%E5%8F%B2%E8%A1%8C%E6%83%85%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<blockquote><p>上文介绍QMT一些背景知识，本文则主要介绍QMT行情接口概况和一个历史行情数据下载案例，希望对读者有所启发。</p></blockquote><h2 id="行情接口分析"><a href="#行情接口分析" class="headerlink" title="行情接口分析"></a>行情接口分析</h2><p>QMT行情有两套不同的处理逻辑：</p><ul><li>数据查询接口：使用时需要先确保MiniQmt已有所需要的数据，如果不足可以通过补充数据接口补充，再调用数据获取接口获取。适用于少量的实时行情数据和大批量的历史行情数据。</li><li>订阅接口：直接设置数据回调，数据到来时会由回调返回。订阅接收到的数据一般会保存下来，同种数据不需要再单独补充。适用于大批量的实时行情数据。</li></ul><p>按照类别，主要有以下四类：</p><ul><li>行情数据（K线数据、分笔数据，订阅和主动获取的接口）</li><li>财务数据</li><li>合约基础信息</li><li>基础行情数据板块分类信息等基础信息</li></ul><h2 id="行情接口概况"><a href="#行情接口概况" class="headerlink" title="行情接口概况"></a>行情接口概况</h2><p>首先导入行情库：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> xtquant <span class="hljs-keyword">import</span> xtdata<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(xtdata))<br></code></pre></td></tr></table></figure><p>可以看到行情主要分为以下几个模块：</p><ul><li>实时行情订阅：subscribe* 系列</li><li>基本信息和行情查询：get_* 系列</li><li>历史数据订阅： download_* 系列 </li><li>历史数据处理： get_local_data</li></ul><p>针对数据存储目录，默认为<code>xtdata.data_dir=../userdata_mini/datadir</code>, 按照官方文档的说明似乎可以任意设置，但实操下来却发现没起到作用。因此，如果默认存储空间有限的话，我们可以将其移动到有较大空间的地方，然后创建一个快捷方式指向原来的地方，避免磁盘空间被耗尽。</p><h3 id="实战：历史行情数据下载"><a href="#实战：历史行情数据下载" class="headerlink" title="实战：历史行情数据下载"></a>实战：历史行情数据下载</h3><p>QMT提供的历史行情下载接口有两个：</p><ul><li>单支股票下载：download_history_data(stock_code, period, start_time=’’, end_time=’’)</li><li>批量股票下载：download_history_data2(stock_list, period, start_time=’’, end_time=’’,callback=None)</li></ul><p>其中各个参数具体含义如下：</p><ul><li>stock_code：股票名，以<code>code.exchange</code>的形式表示，exchange可从如下品种中选择<ul><li>上海证券(SH), 如<code>510050.SH</code></li><li>深圳证券(SZ), 如<code>159919.SZ</code></li><li>上海期权(SHO), 如<code>10004268.SHO</code></li><li>深圳期权(SZO), 如<code>90000967.SZO</code></li><li>中国金融期货(CFFEX), 如<code>IC07.CFFEX</code></li><li>郑州商品期货(CZCE), 如<code>SR05.CZCE</code></li><li>大连商品期货(DCE), 如<code>m2212.DCE</code></li><li>上海期货(SHFE), 如<code>wr2209.SHFE</code></li><li>能源中心(INE), 如<code>sc00.INE</code></li><li>香港联交所(HK), 如<code>00700.HK</code></li></ul></li><li>stock_list, 股票列表，如[‘510050.SH’, ‘159919.SZ’]</li><li>period, 数据周期，可选<code>1m</code>、<code>5m</code>、<code>1d</code>、<code>tick</code>, 分别表示1分钟K线、5分钟K线、1天K线、分笔数据</li><li>start_time, 数据起始时间，格式YYYYMMDD/YYYYMMDDhhmmss/YYYYMMDDhhmmss.milli，如 “20200427” “20200427093000” “20200427093000.000”</li><li>end_time，数据结束时间，格式同start_time</li></ul><p>如果运行如下代码，下载深圳市场300ETF期权<code>沪深300ETF购9月4900</code>标的的tick行情，就会在<code>userdata_mini\datadir\SZO\0\90000967</code>目录下生成以日为单位的tick数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> xtquant <span class="hljs-keyword">import</span> xtdata<br><br>xtdata.download_history_data(<span class="hljs-string">&#x27;90000967.SZO&#x27;</span>, period=<span class="hljs-string">&#x27;tick&#x27;</span>)<br>data = xtdata.get_local_data(field_list=[], stock_code=[<span class="hljs-string">&#x27;90000967.SZO&#x27;</span>], period=<span class="hljs-string">&#x27;tick&#x27;</span>, count=<span class="hljs-number">10</span>)<br><br>df = pd.DataFrame(data[<span class="hljs-string">&#x27;90000967.SZO&#x27;</span>])<br><span class="hljs-built_in">print</span>(df.iloc[-<span class="hljs-number">1</span>])<br><br></code></pre></td></tr></table></figure><p><img src="/img/data_file.png"></p><p>上述二进制文件是无法直接读取的，这里通过<code>get_local_data</code>接口进行数据文件的解析，便可解码已经下载的tick行情，包含时间戳、K线、买五卖五快照信息等：</p><p><img src="/img/option_tick_data.png"></p><p>注意到这里的Unix时间戳是精确到毫秒的，可以通过datetime转换成字符型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> datetime<br>df[<span class="hljs-string">&#x27;datetime&#x27;</span>] = df[<span class="hljs-string">&#x27;time&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: datetime.datetime.fromtimestamp(x / <span class="hljs-number">1000.0</span>))<br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><p><img src="/img/option_tick_timestamp.png"></p><p>至此，我们已经调试成功历史行情下载接口了，下篇文章则将会重点介绍如何获取指定的股票代码并下载对应的历史数据，保存到数据库中供后续分析。</p><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="https://mp.weixin.qq.com/s/5XI09nyStjmD0faYs9UIlw">初探迅投QMT极简策略系统</a></li></ul><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。</p><p><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>迅投QMT</tag>
      
      <tag>量化交易</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初探迅投QMT极简策略系统</title>
    <link href="/2022/06/26/%E5%88%9D%E6%8E%A2%E8%BF%85%E6%8A%95QMT%E6%9E%81%E7%AE%80%E7%AD%96%E7%95%A5%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/06/26/%E5%88%9D%E6%8E%A2%E8%BF%85%E6%8A%95QMT%E6%9E%81%E7%AE%80%E7%AD%96%E7%95%A5%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>迅投QMT是一个门槛相对较低、功能强大的量化策略交易系统。本文首先介绍一些背景知识，并主要分析极简策略交易系统的一些功能，后续将陆续呈现行情、交易、策略等实战教程。</p></blockquote><h2 id="QMT极速策略交易系统"><a href="#QMT极速策略交易系统" class="headerlink" title="QMT极速策略交易系统"></a>QMT极速策略交易系统</h2><p><strong>迅投QMT极速策略交易系统</strong> 是一款专门针对券商、期货公司、信托等机构的高净值客户开发设计的集行情显示，投资研究，产品交易于一身，并自备完整风控系统的综合性平台。其自带投研量化平台可以灵活实现CTA，无风险套利等多种量化策略，并能够对策略进行回测检验和自动化交易。目前大部分券商都有支持策略交易，目前已知的像国金、国盛、国信、海通、华鑫等券商均有对普通用户开放，在开通资金门槛、功能阉割和佣金费率方面可能有一些差异，目前部分券商股票佣金可低至万1，可极大降低量化交易摩擦成本。</p><p>QMT极速策略可手工交易的品种有：普通股票/ETF、港股通、融资融券、ETF期权等，其中ETF期权的程序化交易权限较难申请，其他均可在内置的模型交易中实现本地自动化程序交易。</p><p><img src="/img/strategy.png"></p><h2 id="QMT极简策略交易系统"><a href="#QMT极简策略交易系统" class="headerlink" title="QMT极简策略交易系统"></a>QMT极简策略交易系统</h2><p><code>xtquant</code>是<code>QMT</code>官方内置的<code>XtMiniQmt</code>极简客户端对应的Python接口，目前支持的版本为3.6~3.8，可支持历史行情下载、实时数据订阅、外部数据访问、普通账户和两融账户交易(需开通相关权限)，对量化交易支持的比较完善，跟极速策略交易系统相比最主要的优势是简洁、灵活，不局限在bar、kline的事件触发，可以容易地集成多种数据源进行综合分析，相关的官方文档可点击<a href="https://github.com/ai4trade/XtQuant/tree/main/xtquant/doc">GitHub仓库</a>下载查看。</p><p><code>QMT</code>内置的Python版本为3.6，第一次使用的话需手动下载相关的库，或直接拷贝已经下载好的<code>xtquant</code>库。</p><p><img src="/img/setting.png"></p><p><code>XtMiniQmt.exe</code>存在于QMT安装目录下的<code>bin.x64</code>子目录中, <code>xtquant</code>库默认安装在<code>bin.x64\Lib\site-packages</code>中。</p><p>内置的Python版本较老，对于一些较新的库支持有限，因此，如果我们想在自定义的<code>Python</code>中调用，如<code>Python3.8</code>，只需将<code>xtquant</code>拷贝到我们自己python安装目录的<code>Lib\site-packages</code>中便可，这里我的安装路径是 C:\ProgramData\Anaconda3\Lib\site-packages\xtquant。</p><p><code>xtquant</code>主要包含两大块：</p><ul><li><strong>xtdata</strong>：<code>xtdata</code>提供和<code>MiniQmt</code>的交互接口，本质是和<code>MiniQmt</code>建立连接，由<code>MiniQmt</code>处理行情数据请求，再把结果回传返回到<code>python</code>层。需要注意的是这个模块的使用目前并不需要登录，因此只要安装了<code>QMT</code>,就可以无门槛的使用其提供的数据服务。</li><li><strong>xttrader</strong>：<code>xttrader</code>是基于迅投<code>MiniQMT</code>衍生出来的一套完善的Python策略运行框架，对外以Python库的形式提供策略交易所需要的交易相关的API接口。该接口需开通A股实盘版权限方可登录使用。</li></ul><p>在运行使用<code>XtQuant</code>的程序前需要先启动<code>MiniQMT</code>客户端。通常有两种方式，一种是直接启动极简QMT客户端<code>XtMiniQmt.exe</code>：</p><p><img src="/img/XtMiniQmt.png"></p><p>如果登录时提示没有相关权限，可尝试启动QMT量化交易终端<code>XtItClient.exe</code>,在登录界面选择极简模式：</p><p><img src="/img/XtItClient.png"></p><p>部分券商不支持策略的云服务器运行，但接收行情数据不受影响。设置好客户端后，便可在ipython、jupyter等环境中调试数据和策略了。下期将带来行情相关的详细介绍以及服务化封装的细节。</p><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="https://github.com/ai4trade/XtQuant">XtQuant行情和策略封装GitHub仓库持续更新</a></li></ul><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。</p><p><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>迅投QMT</tag>
      
      <tag>量化交易</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>量化资源</title>
    <link href="/2022/01/08/%E9%87%8F%E5%8C%96%E8%B5%84%E6%BA%90/"/>
    <url>/2022/01/08/%E9%87%8F%E5%8C%96%E8%B5%84%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<blockquote><p>维护量化分析中的常用资源，包括量化平台、量化数据、量化库、AI模型、数据库、交易接口等。</p></blockquote><h1 id="量化平台"><a href="#量化平台" class="headerlink" title="量化平台"></a>量化平台</h1><ul><li><a href="https://www.joinquant.com/">K线策略框架：聚宽量化</a></li><li><a href="https://github.com/microsoft/qlib">深度学习框架：微软QLib</a></li><li><a href="https://github.com/AI4Finance-Foundation/FinRL">强化学习框架：FinRL</a></li></ul><h1 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h1><ul><li><a href="http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz">TA-Lib : Technical Analysis Library</a> </li><li><a href="https://github.com/mrjbq7/ta-lib">Python wrapper for TA-LIB</a></li><li><a href="https://github.com/twopirllc/pandas-ta">Pandas TA - A Technical Analysis Library in Python 3</a></li></ul><h1 id="预训练模型"><a href="#预训练模型" class="headerlink" title="预训练模型"></a>预训练模型</h1><ul><li><a href="https://github.com/Langboat/Mengzi">澜舟科技 Mengzi-BERT-base-fin</a></li><li><a href="https://github.com/valuesimplex/FinBERT">熵简科技 FinBERT 1.0</a></li></ul><h1 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h1><ul><li><a href="https://github.com/akfamily/akshare">akshare</a></li><li><a href="https://github.com/alvarobartt/investpy">investpy</a></li><li><a href="https://tushare.pro/">tushare</a></li><li><a href="https://www.joinquant.com/help/api/help">聚宽数据</a></li><li><a href="https://eodhistoricaldata.com/">eod历史数据</a></li><li><a href="https://site.financialmodelingprep.com/developer/docs">Financial Modeling Prep美股数据</a></li></ul><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><ul><li><a href="https://clickhouse.com/">Clickhouse数据仓库</a></li><li><a href="https://github.com/mymarilyn/clickhouse-driver">ClickHouse Python接口</a></li><li><a href="https://github.com/maximdanilchenko/aiochclient">ClickHouse 异步Python接口 aiochclient</a></li><li><a href="https://github.com/aio-libs/aiomysql">MySQL 异步Python接口 aiomysql</a></li></ul><h1 id="下单接口"><a href="#下单接口" class="headerlink" title="下单接口"></a>下单接口</h1><ul><li><a href="http://www.thinktrader.net/">迅投QMT</a></li><li><a href="https://www.isimu123.com/">恒生云纪PTrade</a></li><li><a href="https://github.com/shidenggui/easytrader">同花顺EasyTrader</a></li><li><a href="https://openapi.futunn.com/futu-api-doc/">富途OpenAPI</a></li><li><a href="https://quant.itiger.com/">老虎量化</a></li></ul><hr><p>欢迎关注我的公众号“<strong>量化实战</strong>”，原创技术文章第一时间推送。</p><p><img src="/img/qrcode.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>量化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>资源</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
